################################################
#CHROMOSOME BASED METHOD ON DELETIONs

library(gtools)
library(ggplot2)
txtfls <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
txtfls
threshold_list = vector("list")
#calculate percentages
for(i in 1:length(txtfls)){  
  a=read.table(txtfls[i],row.names = 1,header=TRUE,sep="\t")
  name=strsplit(txtfls[i],"/")
  name=name[[1]][length(name[[1]])]
  print(name)
  a[1:5,1:5]
  a = a[,-1] #elimina la colonna degli entrez ID
  a[1:5,1:5]
  dim(a)
  deletion = rowSums(a==-2)
  percentDeletion = round(deletion / (dim(a)[2])*100,1)
  head(percentDeletion)
  m = round(mean(percentDeletion),2)
  s = round(sd(percentDeletion),2)
  write.table(percentDeletion,file=paste("./cancer_data/percentages_Deletion/",name,"_percentages_Deletion.txt",sep=""),sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
}

#Calculate chromosome thresholds 
percentages <- list.files("./cancer_data/percentages_Deletion/",pattern="*_percentages_Deletion.txt",full.names=TRUE)
percentages
txtfls <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
txtfls
onco_genelist <- read.table(file="./cancer_data/known_TSG_list.txt",sep="\t",header=TRUE)
percentordered2 =  read.table(file=percentages[1],sep="\t",header=F)
gene_list = as.character(percentordered2$V1) #carica la lista dei geni da un file
length(gene_list)
# 24776
coordinates = read.table(file="./cancer_data/coordinates_plusgenesrescuedbyentrez_plusgenesrescuedbysynonyms.txt",sep="\t",header = TRUE)
dim(coordinates)
#[1] 25787     6

################################
################################
x=read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE,quote="")

ntrials=1000
for (k in 1:length(txtfls)){ # k scorre per tutti i cancri
  #randomizzare le delezioni dei geni in ogni paziente lungo tutto il cromosoma e ricalcolare le percentuali
  a=read.table(txtfls[k],row.names = 1,header=TRUE,sep="\t")
  name=strsplit(txtfls[k],"/")
  name=name[[1]][length(name[[1]])]
  print(name)
  a[1:5,1:5]
  
  dim(a)
  percentordered2=read.table(file=percentages[k],sep="\t",header=F)#qui mi prendo le percentuali gia' calcolate in passato. per fare un confronto dovrei randomizzre le 
  #precentuali all'inteno dei cromosomi e calcolarmele scrivermele e ripescarmele
  # calcolare le percentuali dei geni appartenenti ad ogni cromosoma
  # trasforma i gene symbol in percentordered2$V1 in ENSG
  filters <- c("hgnc_symbol")
  x=NULL
  x = merge(coordinates, percentordered2, by.x="hgnc_symbol", by.y="V1")
  head(x)
  dim(x) 
  meanpos=NULL
  for(l in 1:dim(x)[1]){meanpos[l]=mean(c(x$start_position[l], x$end_position[l]))}
  x = cbind(x,meanpos)
  #for all chromosomes
  x=subset(x,nchar(x$chromosome_name)<5) # elimina i cromosomi patch
  head(x)
  dim(x) 
  chrnames=unique(x$chromosome_name)
  print(chrnames)
  #calcola qui sotto frequenze osservate per ogni cromosoma
  threshold_list=NULL
  for (i in 1:length(chrnames) ){ #i scorre per i cromosomi
    datax1=NULL
    x1 = subset(x,x$chromosome_name==chrnames[i]) #prendi da x solo i geni nel cromosoma corrente
    x1 = x1[with(x1, order(chromosome_name, start_position)), ] #ordina le posizioni
    #create frequency of deletion and chromosome position
    datax1 = cbind(x1$meanpos,x1$V2) #V2 viene da percentordered
    datax1 = as.data.frame(datax1)
    head(datax1)
    print(max(datax1$V2))
    png(filename=paste("./cancer_data/deleted_genes/significant_deleted_genes_2/",name,"_Chr",chrnames[i],"_freq_VS_pos.png",sep=""))
    plot(datax1,type="b",col="blue",xlab=paste("./cancer_data/deleted_genes/significant_deleted_genes_2/Chr",chrnames[i],"position",sep="") ,ylab="deletion frequency",main=name)
    dev.off()
    #calcola qui sotto frequenze randomizzate per ogni cromosoma
    a = a[,-1] #elimina la colonna degli entrez ID
    a=as.matrix(a)
    a[1:5,1:5]
    thre =NULL
    for (t in 1:ntrials){
      a1=NULL
      a1 = a[which(row.names(a) %in% x1$hgnc_symbol),] #prendi da x solo i geni nel cromosoma corrente
      rand <- apply(a1,2,sample)
      amplification_rand = rowSums(rand==-2)
      percentAmplification_rand = round(amplification_rand/ (dim(rand)[2])*100,1)
      quant = quantile(percentAmplification_rand,  probs = c(0.1,25,50,75,99)/100)
      thre[t] = as.numeric(quant[5]) #threshold calcolata solo per il cromosoma 
    }
    threshold_list[i] = round(mean(thre),1)
    signifgenes = subset(x1, x1$V2 > threshold_list[i]) #prendi i geni strettamente maggiori della threshold
    write.table(signifgenes,file=paste("./cancer_data/deleted_genes/significant_deleted_genes_2/",name,"_Chr",chrnames[i],"_thresh_",threshold_list[i],"_signifgenes.txt",sep=""),sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
  }
  write.table(threshold_list,file=paste("./cancer_data/deleted_genes/significant_deleted_genes_2/",name,"_threshold_list.txt",sep=""),sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
}

#######################
#raccogli tutti i risultati in un'unica tabella
table=NULL
significant_genes_pearson  <- list.files("./cancer_data/deleted_genes/significant_deleted_genes_2/",pattern="*_signifgenes.txt",full.names=TRUE)
length(significant_genes_pearson)
significant_genes_pearson[1:30]
number_of_genes=NULL
#table has to grow
library(qpcR)
for (i in 1:length(significant_genes_pearson)){
  if(!is.null(tryCatch(read.table(file=significant_genes_pearson[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    new_column_to_add = read.table(file=significant_genes_pearson[i],sep="\t",header=FALSE,quote="")
    name=strsplit(significant_genes_pearson[i],"/")
    name2=name[[1]][length(name[[1]])]
    name=strsplit(name2,"_")
    name=paste(name[[1]][3],name[[1]][6],sep="_")
    print(name)
    new_column_to_add = (as.matrix(new_column_to_add$V2))
    colnames(new_column_to_add) = name
    new_column_to_add= unique(new_column_to_add)
    number_of_genes[i]=length(new_column_to_add)
    table = qpcR:::cbind.na(table, new_column_to_add)
  }
} 
table=table[,-1]
table[1:3,1:30]
dim(table)
write.table(table,file=paste("./cancer_data/deleted_genes/STEP_1_deleted_chromosome_threshold_table_2.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

table=read.table(file="./cancer_data/deleted_genes/STEP_1_deleted_chromosome_threshold_table_2.txt",sep="\t",header=TRUE,quote="")
unionlistofgenes=Reduce(union, table)
head(unionlistofgenes)
length(unique(unionlistofgenes))-1
# 10464 

x=read.table(file="./cancer_data/known_TSG_list.txt",sep="\t",header=TRUE,quote="")
length(x$Gene.Symbol)
#74
length(intersect(x$Gene.Symbol, unique(unionlistofgenes)))/length(x$Gene.Symbol)
# 0.7567568
int_genes = intersect(as.character(x$Gene.Symbol), unique(unionlistofgenes))
length(int_genes)
# 56
setdiff(as.character(x$Gene.Symbol), unique(unionlistofgenes))

fisher.test(rbind(c(55,19),c(10024,14971)),alternative="greater")
#p-value = 2.483e-08

######################################################
####raggruppare tutti i chromosomi in uno stesso cancro

txtfls <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
txtfls
tableallchr=NULL
for (j in 1:length(txtfls)){ # cicla per ogni cancro
  name=strsplit(txtfls[j],"/")
  name2=name[[1]][length(name[[1]])]
  name3=strsplit(name2,"_")
  name=name3[[1]][3]
  print(name) #prendi cromosomi di uno stesso cancro
  tablechr=name
  if(as.character(tablechr)=="coadread"){tablechr="coad"}
  chrlist=list.files("./cancer_data/deleted_genes/significant_deleted_genes_2/",pattern=paste(tablechr,".+_signifgenes.txt",sep=""),full.names=TRUE)
  for(k in 1:length(chrlist)){
    if(!is.null(tryCatch(read.table(file=chrlist[k],sep="\t",header=TRUE,quote=""), error=function(e) NULL))){
      tablechrtemp = read.table(file=chrlist[k],sep="\t",header=F,quote="")
      tablechr = append(tablechr,as.character(tablechrtemp$V2))
    } 
  }
  tableallchr=qpcR:::cbind.na(tableallchr,tablechr)
}
head(tableallchr)
tableallchr = tableallchr[,-1]
dim(tableallchr)
write.table(tableallchr,file=paste("./cancer_data/deleted_genes/STEP_1_compacted_deleted_Chromosome_threshold_table_2.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")

table = read.table(file=paste("./cancer_data/deleted_genes/STEP_1_compacted_deleted_Chromosome_threshold_table_2.txt",sep=""),header=TRUE,sep="\t")
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
write.table(table,file=paste("./cancer_data/deleted_genes/STEP_1_compacted_deleted_Chromosome_threshold_table_2.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")

#######################
#STEP 2 Calculate correlations (t-test or wilcox)
CNAs <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
CNAs
expressions <- list.files("./cancer_data/expression_median/",pattern="*_expression_median.txt",full.names=TRUE)
expressions 
table=NULL
for (j in 1:length(expressions)){
  expression = read.table(expressions[j],header=TRUE,sep="\t")
  name=strsplit(expressions[j],"/")
  name2=name[[1]][length(name[[1]])]
  name=strsplit(name2,"_")
  CNA = read.table(CNAs[j],row.names = 1,header=TRUE,sep="\t")
  print("PLEASE WAIT!")
  print(name[[1]][1])
  if ((name[[1]][1])=="coadread"){name[[1]][1]="coad"}
  significant_genes <- list.files("./cancer_data/deleted_genes/significant_deleted_genes_2/",pattern=paste("data_CNA_",(name[[1]][1]),".+_signifgenes.txt",sep=""),full.names=TRUE)
  for(k in 1:23){
    if(!is.null(tryCatch(read.table(significant_genes[k],header=FALSE,row.names=1,sep="\t"), error=function(e) NULL))){
      signifgenes = read.table(significant_genes[k],header=FALSE,row.names=1,sep="\t")
      gene_list=NULL
      for(i in 1:dim(signifgenes)[1]) { #search only among significant genes
        if (dim(subset(expression, as.character(expression$Hugo_Symbol) == as.character(signifgenes$V2[i])))[1] == 1){
          #prendi tutti quei pazienti in cui vale + 2 e fai il test contro quelli in cui vale 0
          CNAgene=subset(CNA, rownames(CNA) == signifgenes$V2[i])
          expressiongene=subset(expression, as.character(expression$Hugo_Symbol) == as.character(signifgenes$V2[i]))
          deleted_patients = colnames(CNAgene[,which(CNAgene==-2)]) #pazienti deleti
          deleted_expressions = expressiongene[,which(colnames(expressiongene) %in% deleted_patients)]
          not_altered_patients = colnames(CNAgene[,which(CNAgene==0)]) #pazienti diploidi
          not_altered_expressions = expressiongene[,which(colnames(expressiongene) %in% not_altered_patients)]
          if((length(not_altered_expressions)>1) & (length(deleted_expressions)>1)){
            #res_ttest = t.test(as.numeric(deleted_expressions),as.numeric(not_altered_expressions)) #performig a t.test
            res_ttest = wilcox.test(as.numeric(deleted_expressions),as.numeric(not_altered_expressions), mu=0, alternative = "less",paired=F)
            if (!is.na(res_ttest$p.value)){
              #if ((res_ttest$p.value<0.05) & (median(as.numeric(deleted_expressions),na.rm = T) < median(as.numeric(not_altered_expressions),na.rm = T))){ #la media dei deleti inferiore a quella dei non alterati
                gene_list = append(gene_list,as.character(signifgenes$V2[i]))
                temp = c((name[[1]][1]), as.character(signifgenes$V2[i]), res_ttest$p.value, (median(as.numeric(deleted_expressions))/ median(as.numeric(not_altered_expressions))))
                table = rbind(table,temp)
              #}
            }
          }
        }
      }
      if(!is.null(gene_list)){write.table(gene_list,file=paste("./cancer_data/deleted_genes/gene_list_Wilcoxon_Chr_2/",name[[1]][1],"_Chr",signifgenes$V3[1],"_genelist_wilcoxtest.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)}
    }
  }
}
colnames(table) = c( "Cancer","Gene","P-value","Fold Change over control")
head(table)
write.table(table,file="./cancer_data/deleted_genes/STEP2_homo_deletion_summary_total.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)


##############
### p value adjusted 
table = read.table(file="./cancer_data/deleted_genes/STEP2_homo_deletion_summary_total.txt",sep="\t",header=TRUE)
P.value.adjusted = p.adjust(table$P.value, "BH")
newtable = cbind(table, P.value.adjusted)
write.table(newtable,file="./cancer_data/deleted_genes/STEP2_homo_deletion_summary_total_pvalue_adjusted.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)


#######################
#raccogli tutti i risultati in un'unica tabella

newtable = read.table(file="./cancer_data/deleted_genes/STEP2_homo_deletion_summary_total_pvalue_adjusted.txt",sep="\t", header=TRUE)
head(newtable)
chrnames =  as.character(unique(newtable$Cancer))
#table has to grow
library(qpcR)
table = NULL
for (i in 1:length(chrnames)){
  print(chrnames[i])
  newtable_cancer = subset(newtable,newtable$Cancer==chrnames[i])
  newtable_cancer_pvaladjusted = subset(newtable_cancer, newtable_cancer$P.value.adjusted<0.05)
  newtable_cancer_pvaladjusted_FC = subset(newtable_cancer_pvaladjusted, !is.na(newtable_cancer_pvaladjusted$Fold.Change.over.control)) #eliminate Fold Change = 0/0
  new_column_to_add = (as.matrix(newtable_cancer_pvaladjusted_FC$Gene))
  colnames(new_column_to_add) = (chrnames[i])
  new_column_to_add= unique(new_column_to_add)
  table = qpcR:::cbind.na(table, new_column_to_add)
} 
table[1:5,1:5]
table=table[,-1]
table[1:5,1:25]
dim(table)
write.table(table,file=paste("./cancer_data/deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

table_adjusted = read.table(file="./cancer_data/deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep="\t",header=TRUE,quote="")
unionlistofgenes = Reduce(union, table_adjusted)
head(unionlistofgenes)
length(unique(unionlistofgenes))
# 4866 wilcoxon with correction
x=read.table(file="./cancer_data/known_TSG_list.txt",sep="\t",header=TRUE,quote="")
length(intersect(x$Gene.Symbol, unique(unionlistofgenes)))/length(x$Gene.Symbol)
# correlations (wilcox)
int_genes = intersect(as.character(x$Gene.Symbol), unique(unionlistofgenes))
int_genes

#crea tabella delle differenze cancro per cancro
table_adjusted = read.table(file="./cancer_data/deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep="\t",header=TRUE,quote="")
table = read.table(file="./cancer_data/deleted_genes/NEW_STEP_2_compacted_chromosome_Wilcoxon_deleted_table.txt",sep="\t",header=TRUE,quote="")
difftable=NULL
for (i in 1:length(chrnames)){
  print(chrnames[i])
  genes_adjusted_cancer = unique(as.character(table_adjusted[,colnames(table_adjusted)==chrnames[i]]))
  genes_cancer = unique(as.character(table[,colnames(table)==chrnames[i]]))
  print(length(genes_cancer)-length(genes_adjusted_cancer))
  new_column_to_add = as.matrix(unique(setdiff(genes_cancer,genes_adjusted_cancer))) # genes_cancer - genes_adjusted_cancer
  print(length(new_column_to_add))
  colnames(new_column_to_add) = (chrnames[i])
  difftable = qpcR:::cbind.na(difftable, new_column_to_add)
}
difftable=difftable[,-1]
#write.table(difftable,file=paste("./cancer_data/deleted_genes/NEW_STEP_2_genes_to_eliminate_table.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")


x = read.table(file="./cancer_data/known_TSG_list.txt",sep="\t",header=TRUE,quote="")
length(intersect(x[,1], unique(unionlistofgenes)))/length(x[,1])
# 0.6351351
int_genes = intersect(as.character(x[,1]), unique(unionlistofgenes))
length(int_genes)
# 47

table=read.table(file="./cancer_data/deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep="\t",header=TRUE,quote="")
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,file=paste("./cancer_data/deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

unionlistofgenes=Reduce(union, table)
head(unionlistofgenes)
length(unique(unionlistofgenes))
#4866 wilcox
x=read.table(file="./cancer_data/known_TSG_list.txt",sep="\t",header=TRUE,quote="")
length(intersect(x$Gene.Symbol, unique(unionlistofgenes)))/length(x$Gene.Symbol)
# 0.6351351 correlations (wilcox)
int_genes = intersect(as.character(x$Gene.Symbol), unique(unionlistofgenes))
int_genes

##############
################
###survival on single gene with patients divided by cancer stage in the chromosome based method!

library(TCGAbiolinks)
library(SummarizedExperiment)
library(survival)
library(survminer)
library(ggplot2)
library(gridExtra)
library(survMisc)

pval_fun <- function (data, clusterCol = NULL, legend = "Legend", labels = NULL, 
                      risk.table = TRUE, xlim = NULL, main = "Kaplan-Meier Overall Survival Curves", 
                      ylab = "Probability of survival", xlab = "Time since diagnosis (days)", 
                      filename = "survival.pdf", color = NULL, height = 8, width = 12, 
                      dpi = 300, pvalue = TRUE, conf.int = TRUE, ...) 
{
  .e <- environment()
  if (!all(c("vital_status", "days_to_death", "days_to_last_follow_up") %in% 
           colnames(data))) 
    stop("Columns vital_status, days_to_death and  days_to_last_follow_up should be in data frame")
  if (is.null(color)) {
    color <- rainbow(length(unique(data[, clusterCol])))
  }
  group <- NULL
  if (is.null(clusterCol)) {
    stop("Please provide the clusterCol argument")
  }else if (length(unique(data[, clusterCol])) == 1) {
    stop(paste0("Sorry, but I'm expecting at least two groups\n", 
                "  Only this group found: ", unique(data[, clusterCol])))
  }
  notDead <- is.na(data$days_to_death)
  if (any(notDead == TRUE)) {
    data[notDead, "days_to_death"] <- data[notDead, "days_to_last_follow_up"]
  }
  if (length(data[which((data[, "days_to_death"] < 0) == T), 
                  "sample"]) > 0 & "sample" %in% colnames(data)) {
    message("Incosistencies in the data were found. The following samples have a negative days_to_death value:")
    message(paste(data[which((data[, "days_to_death"] < 0) == 
                               T), "sample"], collapse = ", "))
  }
  if (any(is.na(data[, "days_to_death"])) & "sample" %in% colnames(data)) {
    message("Incosistencies in the data were found. The following samples have a NA days_to_death value:")
    message(paste(data[is.na(data[, "days_to_death"]), "sample"], 
                  collapse = ", "))
  }
  data$s <- grepl("dead|deceased", data$vital_status, ignore.case = TRUE)
  data$type <- as.factor(data[, clusterCol])
  data <- data[, c("days_to_death", "s", "type")]
  f.m <- formula(Surv(as.numeric(data$days_to_death), event = data$s) ~ 
                   data$type)
  result = coxph(f.m, data=data)
  if (is.na(result$coefficients)){return(c(1,0))}else{
    hr = round(coef(summary(result))[,2],3)
    fit <- do.call(survfit, list(formula = f.m, data = data))
    oncoactivity=0
    if( hr < 1 ){oncoactivity = 1}else{oncoactivity = 0} # HERE hr < 1
    return(c(surv_pvalue(fit)$pval,oncoactivity))
  }
  
}

###START the survival on single gene with patients divided by cancer stage in the chromosome based method!

txtfls <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
txtfls
tabl=read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_2_compacted_chromosome_Wilcoxon_deleted_table.txt",sep=""),header=T,sep="\t")

for(i in 1:dim(tabl)[2]){ 
  name=colnames(tabl)[i]
  print(name)
  table=tabl[,i]
  table=Reduce(union, table)
  a=read.table(txtfls[i],row.names = 1,header=TRUE,sep="\t",quote="")
  a = a[,-1] #elimina la colonna degli entrez ID
  #download cancer data from web
  clin <- GDCquery_clinic(paste("TCGA-",toupper(name),sep=""), "clinical")
  dim(clin)
  clin[1:15,1:10]
  print("total number of patients")
  print(length(clin$submitter_id))
  clin_early_stage=NULL
  clin_late_stage=NULL
  clin_notreported=NULL
  for(t in 1:dim(clin)[1]){
    clin_early_stage = subset(clin, (clin$tumor_stage =="stage i" |clin$tumor_stage=="stage ii" |
                                       clin$tumor_stage=="stage ia"|clin$tumor_stage=="stage iia"|
                                       clin$tumor_stage=="stage ib"|clin$tumor_stage=="stage iib"|
                                       clin$tumor_stage=="stage ic"|clin$tumor_stage=="stage iic"))
    clin_late_stage =  subset(clin,(clin$tumor_stage=="stage iii"|clin$tumor_stage=="stage iiia"|clin$tumor_stage=="stage iiib"| clin$tumor_stage=="stage iiic"|
                                      clin$tumor_stage== "stage iv"|clin$tumor_stage=="stage iva"|clin$tumor_stage=="stage ivb"|clin$tumor_stage=="stage ivc"))
    clin_notreported = subset(clin,clin$tumor_stage=="stage x"|clin$tumor_stage=="not reported"|is.na(clin$tumor_stage)) # cos'e' stage x e NA?
  }
  print("patients divided in three groups early and late stage:")
  print(dim(clin_early_stage)[1])
  print(dim(clin_late_stage)[1])
  print(dim(clin_notreported)[1])
  
  if(dim(clin_notreported)[1] > 2){
    listgenes_notreported_discarded_not_significant = NULL #crea questa lista e stampala
    listgenes_notreported_discarded_better_prognosis = NULL #crea questa lista e stampala
    listgenes_notreported_discarded_few_patients = NULL #crea questa lista e stampala
    listgenes_notreported = NULL #crea questa lista e stampala
    patients = strsplit(as.character(clin_notreported$submitter_id),"-")
    patientnames=NULL
    # scrivi i nomi col punto . invece che col -
    for (p in 1:length(patients)){
      patientnames[p] = paste("TCGA",patients[[p]][2],patients[[p]][3],"01",sep=".")
    }
    patientnames
    if(is.na(table[length(table)])){table=table[-length(table)]} 
    for(k in 1:(length(table))){ #cicla su tutti i geni
      print(table[k])
      #"SF3B4" dividi i pazienti in 2 gruppi. quelli in cui SF3B4 e' deleto e quelli in cui non lo sono. cerca in a
      gene_patients = subset(a,as.character(rownames(a))==table[k]) #gene_patients = subset(a,as.character(rownames(a))=="LURAP1L")
      indeces = which(gene_patients==-2) # PRENDI INDICI DEI PAZIENTI HOMO DELETI
      amplif_gene_patiens = colnames(gene_patients)[indeces] # prendi i pazienti in cui il gene corrente e' deleto
      amplif_gene_patiens = intersect(amplif_gene_patiens,patientnames) #interseca quei pazienti in cui il gene e' deletocon i pazienti in notreported
      #if (length(amplif_gene_patiens)>4){ # almeno 5 pazienti deleti per bilanciare il test conto il gruppo di pazienti non deleti
      indecesamplipatient=NULL
      for (s in 1:length(amplif_gene_patiens)){
        if(length((which(patientnames==amplif_gene_patiens[s])))==1){
          indecesamplipatient[s]=which(patientnames==amplif_gene_patiens[s])
        }   
      }
      indecesamplipatient
      deleted=NULL
      if(!is.null(indecesamplipatient)){
        deleted = rep("NOT deleted",dim(clin_notreported)[1])
        deleted[indecesamplipatient]="deleted"
        clinic=clin_notreported
        clinic=cbind(clinic,deleted) #unisci la colonna deleted per dividere i 2 gruppi di pazienti
        pvalue = NULL
        if(length(which(clinic$deleted=="deleted"))>4 & length(which(clinic$deleted=="NOT deleted"))>4){ # controllo utile ma superfluo per le amplifications
          pvalue = pval_fun(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                            main = "Kaplan-Meier Overall Survival Curves",
                            ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                            filename = "survival.pdf",color = c("red","green"),dpi = 300, conf.int = TRUE)
          if(pvalue[1] < 0.05){ # controllo significativita'
            if((pvalue[2]==1)){ # controllo worse prognosis
              temp1 = cbind(name,table[k],pvalue[1],"worse prognosis","notreported",length(amplif_gene_patiens))
              listgenes_notreported = rbind(listgenes_notreported,temp1)
              TCGAanalyze_survival(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox_Deletion/survival_notreported_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }else{
              print("HR positive! Better prognosis in those patients in which the current gene is deleted")
              temp2 = cbind(name,table[k],pvalue[1],"HR positive! Better prognosis","notreported",length(amplif_gene_patiens))
              listgenes_notreported_discarded_better_prognosis = rbind(listgenes_notreported_discarded_better_prognosis,temp2)
              TCGAanalyze_survival(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox_Deletion/survival_notreported_HR_positive_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }
          }else{
            print("pvalue >= 0.5! not significant!")
            temp3 = cbind(name,table[k],pvalue[1],"not significant","notreported",length(amplif_gene_patiens))
            listgenes_notreported_discarded_not_significant = rbind(listgenes_notreported_discarded_not_significant,temp3)
          }
        }else{
          print("Few patients!")
          temp4 = cbind(name,table[k],pvalue[1],"few patients","notreported",length(amplif_gene_patiens))
          listgenes_notreported_discarded_few_patients = rbind(listgenes_notreported_discarded_few_patients,temp4)
        }
      }
    } #fine ciclo su tutti i geni
    print(listgenes_notreported)
    write.table(listgenes_notreported,                                  file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_notreported.txt",                                 sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_notreported_discarded_better_prognosis,       file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_notreported_discarded_better_prognosis.txt",      sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_notreported_discarded_not_significant,        file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_notreported_discarded_not_significant.txt",       sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_notreported_discarded_few_patients,           file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_notreported_discarded_few_patients.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
  }
  
  if(dim(clin_early_stage)[1]>2){
    listgenes_early_stage_discarded_not_significant = NULL #crea questa lista e stampala
    listgenes_early_stage_discarded_better_prognosis = NULL #crea questa lista e stampala
    listgenes_early_stage_discarded_few_patients = NULL #crea questa lista e stampala
    listgenes_early_stage = NULL #crea questa lista e stampala
    patients = strsplit(as.character(clin_early_stage$submitter_id),"-")
    patientnames=NULL
    # scrivi i nomi col punto . invece che col -
    for (p in 1:length(patients)){
      patientnames[p] = paste("TCGA",patients[[p]][2],patients[[p]][3],"01",sep=".")
    }
    patientnames
    if(is.na(table[length(table)])){table=table[-length(table)]} 
    for(k in 1:(length(table))){ #cicla su tutti i geni
      print(table[k])
      #"SF3B4" dividi i pazienti in 2 gruppi. quelli in cui SF3B4 e' amplificato e quelli in cui non lo sono. cerca in a
      gene_patients = subset(a,as.character(rownames(a))==table[k]) #gene_patients = subset(a,as.character(rownames(a))=="LURAP1L")
      indeces = which(gene_patients==-2) # PRENDI INDICI DEI PAZIENTI DELETI
      amplif_gene_patiens = colnames(gene_patients)[indeces] # prendi i pazienti in cui il gene corrente e' amplificato
      amplif_gene_patiens = intersect(amplif_gene_patiens,patientnames) #interseca quei pazienti in cui il gene e' amplificato con i pazienti in early_stage
      #if (length(amplif_gene_patiens)>4){ # almeno 5 pazienti amplificati per bilanciare il test conto il gruppo di pazienti non amplificati
      indecesamplipatient=NULL
      for (s in 1:length(amplif_gene_patiens)){
        if(length((which(patientnames==amplif_gene_patiens[s])))==1){
          indecesamplipatient[s]=which(patientnames==amplif_gene_patiens[s])
        }   
      }
      indecesamplipatient
      deleted=NULL
      if(!is.null(indecesamplipatient)){
        deleted = rep("NOT deleted",dim(clin_early_stage)[1])
        deleted[indecesamplipatient]="deleted"
        clinic=clin_early_stage
        clinic=cbind(clinic,deleted) #unisci la colonna deleted per dividere i 2 gruppi di pazienti
        pvalue = NULL
        if(length(which(clinic$deleted=="deleted"))>4 & length(which(clinic$deleted=="NOT deleted"))>4){ # controllo utile ma superfluo per le amplifications
          pvalue = pval_fun(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                            main = "Kaplan-Meier Overall Survival Curves",
                            ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                            filename = "survival.pdf",color = c("red","green"),dpi = 300, conf.int = TRUE)
          if(pvalue[1] < 0.05){ # controllo significativita'
            if((pvalue[2]==1)){ # controllo worse prognosis
              temp1 = cbind(name,table[k],pvalue[1],"worse prognosis","early stage",length(amplif_gene_patiens))
              listgenes_early_stage = rbind(listgenes_early_stage,temp1)
              TCGAanalyze_survival(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox_Deletion/survival_early_stage_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }else{
              print("HR positive! Better prognosis in those patients in which the current gene is deleted.")
              temp2 = cbind(name,table[k],pvalue[1],"HR positive! Better prognosis","early stage",length(amplif_gene_patiens))
              listgenes_early_stage_discarded_better_prognosis = rbind(listgenes_early_stage_discarded_better_prognosis,temp2)
              TCGAanalyze_survival(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox_Deletion/survival_early_stage_HR_positive_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }
          }else{
            print("pvalue >0.5! not significant!")
            temp3 = cbind(name,table[k],pvalue[1],"not significant","early stage",length(amplif_gene_patiens))
            listgenes_early_stage_discarded_not_significant = rbind(listgenes_early_stage_discarded_not_significant,temp3)
          }
        }else{
          print("Few deleted patients!")
          temp4 = cbind(name,table[k],pvalue[1],"few patients","early stage",length(amplif_gene_patiens))
          listgenes_early_stage_discarded_few_patients = rbind(listgenes_early_stage_discarded_few_patients,temp4)
        }
      }
    } #fine ciclo su tutti i geni
    print(listgenes_early_stage)
    write.table(listgenes_early_stage,                                  file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_early_stage.txt",                                 sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_early_stage_discarded_better_prognosis,       file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_early_stage_discarded_better_prognosis.txt",      sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_early_stage_discarded_not_significant,        file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_early_stage_discarded_not_significant.txt",       sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_early_stage_discarded_few_patients,           file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_early_stage_discarded_few_patients.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
  }
  
  if(dim(clin_late_stage)[1]>2){  
    listgenes_late_stage_discarded_not_significant = NULL #crea questa lista e stampala
    listgenes_late_stage_discarded_better_prognosis = NULL #crea questa lista e stampala
    listgenes_late_stage_discarded_few_patients = NULL #crea questa lista e stampala
    listgenes_late_stage = NULL #crea questa lista e stampala
    patients = strsplit(as.character(clin_late_stage$submitter_id),"-")
    patientnames=NULL
    # scrivi i nomi col punto . invece che col -
    for (p in 1:length(patients)){
      patientnames[p] = paste("TCGA",patients[[p]][2],patients[[p]][3],"01",sep=".")
    }
    patientnames
    if(is.na(table[length(table)])){table=table[-length(table)]} 
    for(k in 1:(length(table))){ #cicla su tutti i geni
      #print(table[k])
      #"SF3B4" dividi i pazienti in 2 gruppi. quelli in cui SF3B4 e' amplificato e quelli in cui non lo sono. cerca in a
      gene_patients = subset(a,as.character(rownames(a))==table[k]) #gene_patients = subset(a,as.character(rownames(a))=="LURAP1L")
      indeces = which(gene_patients==-2) # PRENDI INDICI DEI PAZIENTI DELETI
      amplif_gene_patiens = colnames(gene_patients)[indeces] # prendi i pazienti in cui il gene corrente e' amplificato
      amplif_gene_patiens = intersect(amplif_gene_patiens,patientnames) #interseca quei pazienti in cui il gene e' amplificato con i pazienti in late_stage
      #if (length(amplif_gene_patiens)>4){ # almeno 5 pazienti amplificati per bilanciare il test conto il gruppo di pazienti non amplificati
      indecesamplipatient=NULL
      for (s in 1:length(amplif_gene_patiens)){
        if(length((which(patientnames==amplif_gene_patiens[s])))==1){
          indecesamplipatient[s]=which(patientnames==amplif_gene_patiens[s])
        }   
      }
      indecesamplipatient
      deleted=NULL
      if(!is.null(indecesamplipatient)){
        deleted = rep("NOT deleted",dim(clin_late_stage)[1])
        deleted[indecesamplipatient]="deleted"
        clinic=clin_late_stage
        clinic=cbind(clinic,deleted) #unisci la colonna deleted per dividere i 2 gruppi di pazienti
        pvalue = NULL
        if(length(which(clinic$deleted=="deleted"))>4 & length(which(clinic$deleted=="NOT deleted"))>4){ # controllo utile ma superfluo per le amplifications
          pvalue = pval_fun(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                            main = "Kaplan-Meier Overall Survival Curves",
                            ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                            filename = "survival.pdf",color = c("red","green"),dpi = 300, conf.int = TRUE)
          if(pvalue[1] < 0.05){ # controllo significativita'
            if((pvalue[2]==1)){ # controllo worse prognosis
              temp1 = cbind(name,table[k],pvalue[1],"worse prognosis","late stage",length(amplif_gene_patiens))
              listgenes_late_stage = rbind(listgenes_late_stage,temp1)
              TCGAanalyze_survival(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox_Deletion/survival_late_stage_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }else{
              print("HR positive! Better prognosis in those patients in which the current gene is deleted.")
              temp2 = cbind(name,table[k],pvalue[1],"HR positive! Better prognosis","late stage",length(amplif_gene_patiens))
              listgenes_late_stage_discarded_better_prognosis = rbind(listgenes_late_stage_discarded_better_prognosis,temp2)
              TCGAanalyze_survival(data=clinic,clusterCol ="deleted",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox_Deletion/survival_late_stage_HR_positive_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }
          }else{
            print("pvalue >= 0.5! not significant!")
            temp3 = cbind(name,table[k],pvalue[1],"not significant","late stage",length(amplif_gene_patiens))
            listgenes_late_stage_discarded_not_significant = rbind(listgenes_late_stage_discarded_not_significant,temp3)
          }
        }else{
          print("Few patients!")
          temp4 = cbind(name,table[k],pvalue[1],"few patients","late stage",length(amplif_gene_patiens))
          listgenes_late_stage_discarded_few_patients = rbind(listgenes_late_stage_discarded_few_patients,temp4)
        }
      }
    } #fine ciclo su tutti i geni
    print(listgenes_late_stage)
    write.table(listgenes_late_stage,                                  file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_late_stage.txt",                                 sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_late_stage_discarded_better_prognosis,       file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_late_stage_discarded_better_prognosis.txt",      sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_late_stage_discarded_not_significant,        file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_late_stage_discarded_not_significant.txt",       sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_late_stage_discarded_few_patients,           file=paste("./cancer_data/survivalplots_chr_wilcox_Deletion/",name,"_survival_listgenes_late_stage_discarded_few_patients.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
  }
  
}

################
#######################
#create a compact table

survival_listgenes <- list.files("./cancer_data/survivalplots_chr_wilcox_Deletion/",pattern="*_survival_listgenes_",full.names=TRUE)
survival_listgenes

#table has to grow
table=data.frame(A="Cancer", B="Gene", Pvalue=1, D="Survival_Outcome",	E="Stage", Number_Of_patients_with_CNA=0)
library(qpcR)
for (i in 1:length(survival_listgenes)){
  if(!is.null(tryCatch(read.table(file=survival_listgenes[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    new_column_to_add = read.table(file=survival_listgenes[i],sep="\t",header=TRUE,quote="")
    if(dim(new_column_to_add)[2]==5){ #se manca la colonna aggiungi p-value not available
      new_column_to_add = cbind(cbind(new_column_to_add[,1:2],rep(NA,dim(new_column_to_add)[1])),new_column_to_add[,3:5]) 
    }
    table = qpcR:::rbind.na(table, new_column_to_add)
  }
}
table=table[-1,]
colnames(table) = c("Cancer",	"Gene", "P-value",	"Survival_Outcome",	"Stage",	"Number_Of_patients_with_CNA")
head(table)
dim(table)
write.table(table,file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

#######################
#create a compact table by cancer name

stage="early_stage"
survival_listgenes <- list.files("./cancer_data/survivalplots_chr_wilcox_Deletion/",pattern=paste("*_survival_listgenes_",stage,".txt",sep=""),full.names=TRUE)
survival_listgenes
#table has to grow
table=NULL
library(qpcR)
for (i in 1:length(survival_listgenes)){
  if(!is.null(tryCatch(read.table(file=survival_listgenes[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    new_column_to_add = read.table(file=survival_listgenes[i],sep="\t",header=TRUE,quote="")
    newcolumn=c(as.character(new_column_to_add[1,1]),as.character(new_column_to_add[,2]))
    table = qpcR:::cbind.na(table, newcolumn)
  }
}
head(table)
table=table[,-1]
head(table)
dim(table)
write.table(table,file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_",stage,"_onlygenes.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")


table = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_",stage,"_onlygenes.txt",sep=""),header=TRUE,sep="\t",stringsAsFactors=FALSE)
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table

write.table(table,file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_",stage,"_onlygenes.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

notreported_unionlistofgenes = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_notreported_onlygenes.txt",sep=""),header=TRUE,sep="\t")
notreported_unionlistofgenes = Reduce(union, notreported_unionlistofgenes)
length(notreported_unionlistofgenes)-1
#349

early_unionlistofgenes = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_early_stage_onlygenes.txt",sep=""),header=TRUE,sep="\t")
early_unionlistofgenes = Reduce(union, early_unionlistofgenes)
length(early_unionlistofgenes)-1
#341

late_unionlistofgenes =  read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_late_stage_onlygenes.txt",sep=""),header=TRUE,sep="\t")
late_unionlistofgenes = Reduce(union, late_unionlistofgenes )
length(late_unionlistofgenes)-1
#99

unionlistofgenes = unique(union(late_unionlistofgenes, union(notreported_unionlistofgenes, early_unionlistofgenes)))
length(unionlistofgenes)-1
#724

genes = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival.txt",sep=""),header=TRUE,sep="\t")
genes = subset(genes,genes$Survival_Outcome=="worse prognosis")
early_genes = subset(genes,genes$Stage=="early stage")
length(unique(as.character(early_genes$Gene)))
#341
late_genes = subset(genes,genes$Stage=="late stage")
length(unique(as.character(late_genes$Gene)))
#199 
notreported_genes = subset(genes,genes$Stage=="notreported")
length(unique(as.character(notreported_genes$Gene)))
#349


#########################
#Look for which genes are in the Glycogene list
stage="notreported"
secre_genelist <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
dim(secre_genelist)
survival_genes_table <- read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_",stage,"_onlygenes.txt",sep=""),sep="\t",header=TRUE,quote="",stringsAsFactors=FALSE)
dim(survival_genes_table)
head(survival_genes_table)
colnamessurv = colnames(survival_genes_table)
colnamessurv
unionlistofgenes=Reduce(union, survival_genes_table)
length(unionlistofgenes)
#head(unionlistofgenes)
table=NULL
table = intersect(secre_genelist[[1]],survival_genes_table[,1]) 
for (k in 2:dim(survival_genes_table)[2]){
  gene_in_intersection2 = intersect(secre_genelist[[1]],survival_genes_table[,k]) # intersection between the reduced coordinates and secre genes only!!!!!!
  print(colnames(survival_genes_table)[k])
  print(length(gene_in_intersection2)/length(survival_genes_table[,k])*100)
  table = qpcR:::cbind.na(table, gene_in_intersection2)
}  
colnames(table)=colnamessurv
table
unionlistofgenes=Reduce(union, table)
head(unionlistofgenes)
length(unique(unionlistofgenes))
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,file=paste("./cancer_data/deleted_genes/NEW_glycogenes_homo_deleted_survival_",stage,"_table.txt",sep=""), quote=FALSE,row.names = FALSE,sep="\t")

notreported_unionlistofgenes = read.table(file=paste("./cancer_data/deleted_genes/NEW_glycogenes_homo_deleted_survival_notreported_table.txt",sep=""),header=TRUE,sep="\t")
notreported_unionlistofgenes = Reduce(union, notreported_unionlistofgenes)
length(notreported_unionlistofgenes)-1
early_unionlistofgenes = read.table(file=paste("./cancer_data/deleted_genes/NEW_glycogenes_homo_deleted_survival_early_stage_table.txt",sep=""),header=TRUE,sep="\t")
early_unionlistofgenes = Reduce(union, early_unionlistofgenes)
length(early_unionlistofgenes)-1
late_unionlistofgenes = read.table(file=paste("./cancer_data/deleted_genes/NEW_glycogenes_homo_deleted_survival_late_stage_table.txt",sep=""),header=TRUE,sep="\t")
late_unionlistofgenes = Reduce(union, late_unionlistofgenes )
length(late_unionlistofgenes)-1
unionlistofgenes = unique(union(late_unionlistofgenes, union(notreported_unionlistofgenes, early_unionlistofgenes)))
length(unionlistofgenes)-1
#24 total
#3 late
#10 earlystage
#13 notreported

########################################
####    SEGMENTATION HOMO DELETION
#####################################
#Segmentation #Piecewise  Constant  Fits 
#gene alone in the deletione
##qui vedo l'intersezione dei geni nello step 3  con i geni segmentati prima del primo step in quel cancro e in  quel cromosoma e in quel segmento.
#Quanti geni in un deletione hanno superato tutti gli step?
setwd("C:/Users/f.russo/Documents/cancer_data/")
library(biomaRt)
ensembl <- useMart("ensembl")
ensembl <- useDataset("hsapiens_gene_ensembl", mart=ensembl)
filters <- c("hgnc_symbol") #cerca tra i nomi dei geni
# select attributes to return
attributes <- c('chromosome_name','start_position','end_position','band', 'strand','hgnc_symbol')

###### percentages HOMO Deletion
percentfiles = list.files("./percentages_Deletion/",pattern="*",full.names=TRUE)
percentordered2 = read.table(file=percentfiles[1],sep="\t",header=F)

coordinates = read.table(file="./coordinates_plusgenesrescuedbyentrez_plusgenesrescuedbysynonyms.txt",sep="\t",header=T)

dim(coordinates)
setwd("C:/Users/f.russo/Documents/cancer_data/")
linear_CNAs <- list.files("./data_linear_CNA/",pattern="*_data_linear_CNA.txt",full.names=TRUE)
linear_CNAs
data_CNAs <- list.files("./data_CNA2",pattern="$",full.names=TRUE)
data_CNAs

chrnames=unique((coordinates$chromosome_name)[which(nchar(coordinates$chromosome_name)<5)])
chrnames
library(rpart)
#definizione di plot_tree
plot_tree <- function(tree, x, y,threshold) {
  s <- seq(min(z), max(z), by=100000)
  plot(z, y,cex=1, pch = 16,type="p",col="blue")
  lines(s, predict(tree, data.frame(z=s)),col="red",cex=0.1, pch = 1)
  abline(h=threshold)
}

txtfls = linear_CNAs
calculate_meadian_homo_deletion <- function(txtfls){ #ONLY ACROSS THOSE PATIENS WITH -2
  for(i in 30:length(txtfls)){ 
    if (i==28) { #PROBLEMA con thca 
      a = read.table(txtfls[i],header=TRUE,sep="\t") #row.names = 0
      CNAs = read.table(data_CNAs[i],row.names = 1,header=TRUE,sep="\t")
      name=strsplit(txtfls[i],"/")
      name=name[[1]][length(name[[1]])]
      print(name)
      a[1:5,1:5]
      a = a[,-2] #elimina la colonna degli entrez ID
      a[1:5,1:5]
      dim(a)
      CNAs[1:5,1:5]
      CNAs = CNAs[,-1] #elimina la colonna degli entrez ID
      CNAs[1:5,1:5]
      dim(CNAs)  
      linear_deletion = NULL
      temp=NULL
      for(j in 1:dim(a)[1]){ #dim(a)[1]
        currentgene = subset(CNAs,rownames(CNAs)==as.character(a$Hugo_Symbol)[j]) #solo qui Hugo_Symbol
        if(dim(currentgene)[1]==1){
          deleted_patients = colnames(CNAs)[which(currentgene==-2)] #DELETIONS
          deleted_linear_values = a[j,which(colnames(a) %in% deleted_patients)]
          deleted_linear_values = as.numeric(deleted_linear_values)
          linear_deletion[j] = round(median(deleted_linear_values),3)
          median_deletion = cbind(as.character(a$Hugo_Symbol)[j],linear_deletion[j])
          temp = rbind(temp,median_deletion)
        }
      }  
      write.table(temp,file=paste("./median_homo_deletion/",name,"_median_homo_deletion.txt",sep=""),sep="\t",quote=FALSE,row.names = T,col.names = F)
   }else{
    a = read.table(txtfls[i],row.names = 1,header=TRUE,sep="\t")
    CNAs = read.table(data_CNAs[i],row.names = 1,header=TRUE,sep="\t")
    name=strsplit(txtfls[i],"/")
    name=name[[1]][length(name[[1]])]
    print(name)
    a[1:5,1:5]
    a = a[,-1] #elimina la colonna degli entrez ID
    a[1:5,1:5]
    dim(a)
    a=as.matrix(a)
    CNAs[1:5,1:5]
    CNAs = CNAs[,-1] #elimina la colonna degli entrez ID
    CNAs[1:5,1:5]
    dim(CNAs) 
    linear_deletion = NULL
    temp=NULL
    for(j in 1:dim(a)[1]){ #dim(a)[1]
        currentgene = subset(CNAs,rownames(CNAs)==rownames(a)[j])
        deleted_patients = colnames(CNAs)[which(currentgene==-2)] #DELETIONS
        deleted_linear_values = a[j,which(colnames(a) %in% deleted_patients)]
        deleted_linear_values = as.numeric(deleted_linear_values)
        linear_deletion[j] = round(median(deleted_linear_values),3)
    }  
    median_deletion =  cbind(row.names(a),linear_deletion)
    head(median_deletion)
    write.table(median_deletion ,file=paste("./median_homo_deletion/",name,"_median_homo_deletion.txt",sep=""),sep="\t",quote=FALSE,row.names = T,col.names = F)
   }
  }
}
calculate_meadian_homo_deletion(txtfls)

####crea tabella homo delezioni
ampl_table = NULL
median_deletions <- list.files("./cancer_data/median_homo_deletion/",pattern="*_median_homo_deletion",full.names=TRUE)
for (i in 1:length(median_deletions)){
  a = read.table(median_deletions[i],header=FALSE,sep="\t")
  a=a[,-1]
  dim(a)
  head(a)
  name=strsplit(median_deletions[i],"/")
  name=name[[1]][length(name[[1]])]
  name=strsplit(name,"_")
  name=name[[1]][1]
  print(name)
  colnames(a)=c(name,"amplification")
  ampl_table = qpcR:::cbind.na(ampl_table,a)
}  
ampl_table = ampl_table[,-1]
head(ampl_table)
write.table(ampl_table,file=paste("./cancer_data/homo_deleted_linear_values_table.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)

###############################
############ fare una segmentazione solo per i geni in step1
setwd("C:/Users/f.russo/Documents/")
median_deletions <- list.files("./cancer_data/median_homo_deletion/",pattern="*_median_homo_deletion.txt",full.names=TRUE)
percentfiles = list.files("./cancer_data/percentages_Deletion/",pattern="*",full.names=TRUE)
length(median_deletions)
length(percentfiles)
for (k in 1:length(percentfiles)){ #con k selezioni il cancro
  #prendi la lista delle threshold per quel cancro
  median_delet = read.table(median_deletions[k],sep="\t",header=F,row.names = 1)
  name = strsplit(percentfiles[k],"_")[[1]][5]
  # acc
  name2 = strsplit(median_deletions[k],"/")[[1]][4]
  # acc_data_linear_CNA.txt_median_homo_deletion.txt
  print(name)
  print(name2)
  thresholdfiles = list.files("./cancer_data/deleted_genes/significant_deleted_genes_2/",pattern=paste("data_CNA_",name,".+_thresh_.+_signifgenes.txt",sep=""),full.names=TRUE)
  ###  con i selezioni il cromosoma
  for (i in 1:length(chrnames)){
    if(!is.null(tryCatch(read.table(file=thresholdfiles[i],sep="\t",header=F), error=function(e) NULL))){
      percentordered2 = read.table(file=thresholdfiles[i],sep="\t",header=F)  # prendi solo i geni nello step1
      x1=NULL
      head(coordinates)
      head(percentordered2)
      x1 = merge(coordinates, percentordered2, by.x="hgnc_symbol", by.y="V2")
      x1=subset(x1,nchar(x1$chromosome_name)<5) # elimina i cromosomi patch
      x1=x1[,c(1,2,3,4,5,6,13)]
      head(x1)
      # prima del merge fare la mediana dei valori di linear deletion
      x=NULL
      x = merge(x1, median_delet, by.x="hgnc_symbol", by.y="V2")
      colnames(x)=c("hgnc_symbol","chromosome_name","start_position","end_position","band","strand","percentage","median_deletions")
      head(x) 
      if(dim(x)[1]>0){
        cancerfile=strsplit(thresholdfiles[i],"/")[[1]][5]
        arraynames=strsplit(cancerfile,"_")[[1]]
        indexy=which(arraynames=="thresh")
        threshold=arraynames[indexy+1] #cONTROLLA QUI COME CARICA LA TRESHOLD
        x1 = subset(x,x$chromosome_name==chrnames[i]) #prendi da x solo i geni 
        dim(x1)
        x1 = x1[with(x1, order(chromosome_name, start_position)), ] #ordina le posizioni
        #create frequency of deletions and chromosome position
        meanpos=NULL
        for(l in 1:dim(x1)[1]){meanpos[l]=mean(c(x1$start_position[l], x1$end_position[l]))} #calcola la posizione media del gene sul cromosoma
        length(meanpos)
        length(x1$percentage)
        datax1 = cbind(meanpos,x1$percentage)
        #qui ho bisogno dei dati di tutto il chromosoma per poter partizionare.
        dim(datax1)
        head(datax1)
        z = datax1[,1]
        y = datax1[,2]
        df <- data.frame(z=z, y=y)
        tree <- rpart(y ~ z, data=df, control=rpart.control(minsplit=15, cp=.001))
        png(filename=paste("./cancer_data/deleted_genes/segmentation_only_step1_deletion/",name,"_Chr",chrnames[i],"_freq_VS_pos_segmentation.png",sep=""))
        plot_tree(tree, z, y,threshold)
        dev.off()
        fitteddataframe = cbind(x1, tree$where, predict(tree)) #devo sapere anche il valore medio calcolato dalla piecewise contant fit function contenuta in predict(tree)
        highlyfitteddataframe = subset(fitteddataframe,fitteddataframe$`predict(tree)` > as.numeric(threshold))# CONTROLLARE LE THRESHOLD!!!PESCA MALE
        write.table(fitteddataframe, file=paste("./cancer_data/deleted_genes/segmentation_only_step1_deletion/",name,"_Chr",chrnames[i],"_freq_VS_pos_segmentation.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
      }
    }
  }
}

#controllare i segmenti creati ecorreggerli. Risolve i problemi come quelli riscontrati negli tgct chr1 e in blca chr3, pcpg chr2, stad chr4
segmentation_file = list.files("./cancer_data/deleted_genes/segmentation_only_step1_deletion/",pattern=paste("*_freq_VS_pos_segmentation.txt",sep=""),full.names=TRUE)
length(segmentation_file)
#673

for (i in 1:length(segmentation_file)){
  #i=414
  #i=2
  if(dim(read.table(file = segmentation_file[i], header=TRUE, sep="\t"))[1] > 0){
    current_segmentation_table = read.table(file = segmentation_file[i], header=TRUE, sep="\t")
    cancer_name = strsplit((strsplit(segmentation_file[i],"/")[[1]][5]),"_")[[1]][1]
    chromosome_name = strsplit((strsplit(segmentation_file[i],"/")[[1]][5]),"_")[[1]][2]
    segments = unique(current_segmentation_table$tree.where) #segmenti trovati con frequenze alte
    print(cancer_name)
    k=1 #inizializza contatore
    new_current_segmentation_table=NULL
    if (dim(current_segmentation_table)[1]>1){
      for(j in 1:length(segments)){ #seleziona segmento
        newcurrentsegment=NULL
        #j=3
        current_segment = subset(current_segmentation_table,current_segmentation_table$tree.where==segments[j])
        nclust=2 #il numero di clusters sono tipicamente 2
        if(((max(current_segment$end_position) - min(current_segment$start_position))> 50000000) && (dim(current_segment)[1]==3)){nclust=3}
        if(((max(current_segment$end_position) - min(current_segment$start_position))> 50000000) && (dim(current_segment)[1]>3)){nclust=4}
        #controllare posizioni medie del primo gene contro il resto
        hc = hclust(dist(cbind(current_segment$start_position,current_segment$percentage)))
        #cut the tree into 2 clusters
        memb = cutree(hc, k = nclust)
        cent <- vector("list")
        for(s in 1:nclust){
          k=k+1
          cent[[s]] <- current_segment[memb == s, , drop = FALSE]
          cent[[s]]$tree.where = max(current_segmentation_table$tree.where)+k # assegna un nuovo tag
          newcurrentsegment= rbind(cent[[s]], newcurrentsegment)
        }
        new_current_segmentation_table = rbind(new_current_segmentation_table, newcurrentsegment)
      }
      write.table(new_current_segmentation_table, file=paste("./cancer_data/deleted_genes/segmentation_only_step1_deletion_corrected/",cancer_name,"_",chromosome_name ,"_freq_VS_pos_segmentation.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    }else{    
      write.table(current_segmentation_table, file=paste("./cancer_data/deleted_genes/segmentation_only_step1_deletion_corrected/",cancer_name,"_",chromosome_name ,"_freq_VS_pos_segmentation.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    } 
  }
}

########creare un'unica segment table
# caricare tutti i file in segmentation
#listare tutti i segmenti
# prendere gli HIGLY segmenti contenenti i glicogeni e selezionare quei glicogeni senza oncogeni noti
segmentation_file = list.files("./cancer_data/deleted_genes/segmentation_only_step1_deletion_corrected/",pattern=paste("*_freq_VS_pos_segmentation.txt",sep=""),full.names=TRUE)
length(segmentation_file)
glycogenes <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
known_oncogenes = read.table(file="./cancer_data/known_TSG_list.txt",sep="\t",header=TRUE,quote="")
known_oncogenes = known_oncogenes[,1]

segment_table = c("cancer","chromosome_name","start_segment","end_segment","segment_length","bands","segment_tag","percentage_mean","genes")
glyco_segment_table = c(segment_table,"glycogenes","known_oncogenes")
k=0
for (i in 1:length(segmentation_file)){
  #i=4
  if(dim(read.table(file = segmentation_file[i], header=TRUE, sep="\t"))[1] > 0){
    current_segmentation_table = read.table(file = segmentation_file[i], header=TRUE, sep="\t")
    cancer_name = strsplit((strsplit(segmentation_file[i],"/")[[1]][5]),"_")[[1]][1]
    chromosome_name = strsplit((strsplit(segmentation_file[i],"/")[[1]][5]),"_")[[1]][2]
    segments = unique(current_segmentation_table$tree.where) #segmenti trovati con frequenze alte
    print(cancer_name)
    for(j in 1:length(segments)){ #seleziona segmento
      #j=1
      current_segment = subset(current_segmentation_table,current_segmentation_table$tree.where==segments[j])
      start_segment = min(current_segment$start_position)
      end_segment = max(current_segment$end_position)
      segment_length = end_segment - start_segment + 1
      bands = paste(unique(current_segment$band), collapse=", ")
      #median_of_median_amplifications = median(current_segment$median_amplification)
      genes = paste(current_segment$hgnc_symbol, collapse=", ")
      segment_tag = unique(current_segment$tree.where)
      percentage_mean = round(unique(current_segment$predict.tree.),2)
      current_segment_line = cbind(cancer_name,chromosome_name,start_segment,end_segment,segment_length,bands,segment_tag,percentage_mean,genes)
      segment_table = qpcR:::rbind.na(segment_table,current_segment_line)
      if(length(intersect(as.character(current_segment$hgnc_symbol), as.character(glycogenes$gene)))>0){ #se sono presenti dei glycogeni
        glyco_segment_table = qpcR:::rbind.na(glyco_segment_table,current_segment_line) # aggiungi
        k=k+1
        glycogenes_present_in_the_segment = intersect(as.character(current_segment$hgnc_symbol), as.character(glycogenes$gene))
        glyco_segment_table[k+1,10] = paste(glycogenes_present_in_the_segment, collapse=", ") #perche' k+1 ???
        if(length(intersect(as.character(current_segment$hgnc_symbol), as.character(known_oncogenes)))>0){
          known_oncogenes_present_in_the_segment = intersect(as.character(current_segment$hgnc_symbol), as.character(known_oncogenes))
          glyco_segment_table[k+1,11] = paste(known_oncogenes_present_in_the_segment, collapse=", ") #perche' k+1 ???
        }  
      }
      
    }
  }
}
dim(segment_table)
segment_table[1:3,1:6]
write.table(segment_table,file=paste("./cancer_data/deleted_genes/homo_deleted_segment_table6.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names=FALSE)

##COLLAPSE
#############################################################################################################
##### Se i segmenti sono in comune con almeno 50% dei pazienti se si collassali devono essere meno di 85Mb
### inizio definizione funzioni da utilizzare

# segment1 = segments[j,]
intersect_within_a_segment <- function(segment1){
  segmentsgenes1 = segment1$genes
  genes1 = strsplit(as.character(segmentsgenes1),", ")[[1]]  ###CONTROLLLARE QUI
  if(grepl("\"", genes1[1])){  ##problema con questo carattere all'inizio e alla fine di genes1
    genes1[1] <- strsplit(genes1,"\"")[[1]][2]
  }
  if(grepl("\"", genes1[length(genes1)])){
    genes1[length(genes1)] <- strsplit(genes1,"\"")[[length(genes1)]]
  }
  CNAgene1 = CNA[ which(rownames(CNA) %in% genes1) ,]
  amplified_patients1=vector("list")
  for(k in 1:dim(CNAgene1)[1]){ #cicla su tutti i geni
    col_index = which(CNAgene1[k,]==2)
    amplified_patients1[[k]] = colnames(CNAgene1[col_index])
  }
  #trova pazienti in comune a tutti i geni nel segmento 1
  final_intersection1 = amplified_patients1[[1]]
  if(length(amplified_patients1)>1){
    for(p in 2:length(amplified_patients1)){
      final_intersection1 = intersect(amplified_patients1[[p]],final_intersection1)
    }
  }
  return(final_intersection1)
}

# segment1 = segments[j,]
union_within_a_segment <- function(segment1){
  segmentsgenes1 = segment1$genes
  genes1 = strsplit(as.character(segmentsgenes1),", ")[[1]]
  if(grepl("\"", genes1[1])){  ##problema con questo carattere all'inizio e alla fine di genes1
    genes1[1] <- strsplit(genes1,"\"")[[1]][2]
  }
  if(grepl("\"", genes1[length(genes1)])){
    genes1[length(genes1)] <- strsplit(genes1,"\"")[[length(genes1)]]
  }
  CNAgene1 = CNA[ which(rownames(CNA) %in% genes1) ,]
  amplified_patients1=vector("list")
  for(k in 1:dim(CNAgene1)[1]){ #cicla su tutti i geni
    col_index = which(CNAgene1[k,]==2)
    amplified_patients1[[k]] = colnames(CNAgene1[col_index])
  }
  #trova pazienti in comune a tutti i geni nel segmento 1
  final_union1 = amplified_patients1[[1]]
  if(length(amplified_patients1)>1){
    for(p in 2:length(amplified_patients1)){
      final_union1 = union(amplified_patients1[[p]],final_union1)
    }
  }
  return(final_union1)
}

union_across_two_segments <- function(final_union1,final_union2){
  union = union(final_union1,final_union2)
  return(union)
}

intersect_across_two_segments <- function(final_intersection1,final_intersection2){
  intersection = intersect(final_intersection1,final_intersection2)
  return(intersection)
}

collapse_two_segments <- function(segment1,segment2){
  new_segment = segment1
  new_segment$start_segment = min(segment1$start_segment, segment2$start_segment)
  new_segment$end_segment   = max(segment1$end_segment, segment2$end_segment)
  new_segment$segment_length = new_segment$end_segment - new_segment$start_segment + 1
  new_segment$bands =  paste(segment1$bands, segment2$bands, sep=", ")
  new_segment$segment_tag = paste(segment1$segment_tag, segment2$segment_tag, sep=", ")
  new_segment$percentage_mean = paste(segment1$percentage_mean,segment2$percentage_mean, sep=", ")
  #$median_of_amplifications_medians = paste(segment1$median_of_amplifications_medians,segment2$median_of_amplifications_medians, sep=", ")
  new_segment$genes = paste(segment1$genes, segment2$genes, sep=", ")
  #new_segment$glycogenes = paste(segment1$glycogenes, segment2$glycogenes, sep=", ")
  #new_segment$known_oncogenes = paste(segment1$known_oncogenes, segment2$known_oncogenes, sep=", ")
  return(new_segment)
}

###fine definizione funzioni da utilizzare

setwd("C:/Users/f.russo/Documents/")
CNAs <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
CNAs
allsegments = read.table(file="./cancer_data/deleted_genes/homo_deleted_segment_table6.txt",sep="\t",header=TRUE)
allsegments[1:2,]

cancer_table_segments = NULL
for(k in 1:length(CNAs)){ #selecting cancer
  #k=22
  CNA = read.table(CNAs[k],row.names = 1,header=TRUE,sep="\t")
  cancer_name = strsplit(strsplit(CNAs[k],"/")[[1]][4],"_")[[1]][3]
  print(cancer_name)
  chromosome_table_segments = NULL
  cancersegments = subset(allsegments, as.character(allsegments$cancer) == as.character(cancer_name) )
  cancersegments[,1:7]
  chrnames = unique(cancersegments$chromosome_name)
  for(i in 1:length(chrnames)){ #collassa all'interno di ogni cromosoma
    #i=1
    segments = subset(cancersegments, as.character(cancersegments$chromosome_name) == as.character(chrnames[i]) )
    #ordinare start position
    segments = segments[with(segments, order(start_segment)), ] #ordina le posizioni
    new_table_segments = segments[1,]
    if(dim(segments)[1] > 1){
      segments[1:4,1:5]
      patients_in_intersection1 = intersect_within_a_segment(segments[1,])
      patients_in_union1 = union_within_a_segment(segments[1,])
      patients_in_intersection1 
      newsegment = segments[1,]
      newsegment[1,1:9]
      for(j in 2:(dim(segments)[1])){
        #print(j)
        patients_in_intersection2 = intersect_within_a_segment(segments[j,])
        patients_in_union2 = union_within_a_segment(segments[j,])
        same_patients_in_two_segments = intersect_across_two_segments(patients_in_intersection1,patients_in_intersection2)
        union_of_the_patients_in_two_segments = union_across_two_segments(patients_in_union1,patients_in_union2)
        patient_ratio = length(same_patients_in_two_segments)/length(union_of_the_patients_in_two_segments)
        #se il rapporto e' maggiore di 0.5 e i due segmenti appartengono allo stesso segmento collassali
        #print(patient_ratio)
        if( patient_ratio>=0.5 && (!is.na(patient_ratio))){    
          #print("collapse")
          newsegment = collapse_two_segments(newsegment ,segments[j,])
          new_table_segments = qpcR:::rbind.na(new_table_segments ,newsegment)
          #print(new_table_segments[,1:7])
          #print("elimino:")
          #print(new_table_segments[(dim(new_table_segments)[1]-1),1:7])
          new_table_segments = new_table_segments[-(dim(new_table_segments)[1]-1),]
          #print(new_table_segments[,1:7])
          patients_in_intersection1 = intersect_within_a_segment(newsegment)
        }else{
          #print("add")
          new_table_segments = qpcR:::rbind.na(new_table_segments ,segments[j,])
          #new_table_segments = new_table_segments[-(j-1),]
          #print(new_table_segments[,1:7])
          #fornisci il nuovo segmento1 su cui lavorare
          newsegment = segments[j,]
          patients_in_intersection1 = intersect_within_a_segment(newsegment)
          patients_in_union1        = union_within_a_segment(newsegment) ###Qui c'era il bug dovevo aggiungere anche union
        }
      }
    }
    chromosome_table_segments = qpcR:::rbind.na(chromosome_table_segments,new_table_segments)
  }
  cancer_table_segments = qpcR:::rbind.na(cancer_table_segments,chromosome_table_segments)
}

dim(cancer_table_segments)
cancer_table_segments[1:5,1:7]
cancer_table_segments=cancer_table_segments[-c(1,2),]
write.table(cancer_table_segments,file="./cancer_data/deleted_genes/homo_deleted_collapsed_segments_8_9_2020.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names=TRUE)

####### UNIQUE of GENES
setwd("C:/Users/f.russo/Documents/")
seg_table = read.table(file="./cancer_data/deleted_genes/homo_deleted_collapsed_segments_8_9_2020.txt",header=TRUE,sep="\t")
seg_table[1:5,]
newsegtable = NULL
for(i in 1:dim(seg_table)[1]){
  temp = unique(unlist(strsplit(as.character(seg_table$genes[i]),", ")))
  temp = paste(temp, collapse=", ") 
  newsegtable_temp = cbind(seg_table[i,],temp)
  newsegtable = rbind(newsegtable, newsegtable_temp)
}
newsegtable[1:5,]
newsegtable = newsegtable[,-9]
colnames(newsegtable)[9] = "genes"
newsegtable[1:5,]
write.table(newsegtable,file="./cancer_data/deleted_genes/homo_deleted_collapsed_segments_8_9_2020.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names=TRUE)

#########

seg_table = read.table(file="./cancer_data/deleted_genes/homo_deleted_collapsed_segments_8_9_2020.txt",header=TRUE,sep="\t")
head(seg_table)
dim(seg_table)
seg_table$segment_length[1]
colnames(seg_table)
hist(seg_table$segment_length, main=paste("Deletion lengths in bp",sep=""),xlab=" ", 
     ylab="n. of deletions", border="black", col="yellow", las=2, breaks=20)
dev.print(pdf,paste("./cancer_data/deleted_genes/deletion_frequency.pdf",sep=""))
dev.off()
hist(seg_table$segment_length, main=paste("Deletion lengths in bp",sep=""),xlab=" ", 
     ylab="n. of deletions", border="black", col="yellow", las=2, breaks=20,ylim=c(0,100))
dev.print(pdf,paste("./cancer_data/deleted_genes/deletion_frequency_zoom.pdf",sep=""))
dev.off()
min(seg_table$segment_length, na.rm=TRUE)
# 1051
max(seg_table$segment_length, na.rm=TRUE)
# 92629183
median(seg_table$segment_length, na.rm=TRUE)
# 850547


###########################################################
##########################################################

##############################################################
################# ALONE in_fitted_frequency_deleted_regions

unionlistofgenes = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),header=TRUE,sep="\t")
dim(unionlistofgenes)
seg_table = read.table(file="./cancer_data/deleted_genes/homo_deleted_collapsed_segments_8_9_2020.txt",header=TRUE,sep="\t")
seg_table[1:3,1:7]
new_table = NULL
genelist = NULL
cancers = unique(as.character(seg_table$cancer))
for (i in 1:length(cancers)){
  cancer_name = cancers[i]
  genelist = cancer_name
  cancer_step3_genes = as.character(unique(unionlistofgenes[,which(colnames(unionlistofgenes)==paste(cancer_name,sep=""))]))
  if (length(cancer_step3_genes)>0){
    cancer_segtable = subset(seg_table,seg_table$cancer==cancer_name) #prendi segmenti del cancro corrente
    for (j in 1:dim(cancer_segtable)[1]){ #per tutti gli deletioni da me definiti in quel cancro
      #prendi geni
      amplicon_genes = unlist(strsplit(as.character(cancer_segtable[j,]$genes),", "))
      #qui vedo l'intersezione dei geni nello step 3 "cancer_genes" con i geni segmentati prima del secondo step in quel cancro, in quel cromosoma e in quel segmento
      if(length(intersect(amplicon_genes,as.character(cancer_step3_genes)) )==1){ # se e' solo inseriscilo
        print("inserted!")
        print(i)
        print(j)
        genelist = qpcR:::rbind.na(genelist,intersect(amplicon_genes,as.character(cancer_step3_genes)))
      }
    }
    if(length(genelist)>1){
      new_table = qpcR:::cbind.na(new_table,genelist)
    }
  }
}

new_table[1,]
gene_table  = new_table[,-1]  
gene_table = as.data.frame(gene_table)
gene_table
write.table(gene_table,file=paste("./cancer_data/deleted_genes/alone_in_fitted_frequency_deleted_regions_and_oncogene_tables/genes_aloneinthedeletion.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names=F)
    table = read.table(file=paste("./cancer_data/deleted_genes/alone_in_fitted_frequency_deleted_regions_and_oncogene_tables/genes_aloneinthedeletion.txt",sep=""),header=TRUE,sep="\t",stringsAsFactors=FALSE)
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,file=paste("./cancer_data/deleted_genes/alone_in_fitted_frequency_deleted_regions_and_oncogene_tables/genes_aloneinthedeletion.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names=T)

#estrai solo i glicogeni

table = read.table(file=paste("./cancer_data/deleted_genes/alone_in_fitted_frequency_deleted_regions_and_oncogene_tables/genes_aloneinthedeletion.txt",sep=""),sep="\t",header=TRUE)
table[1:3,1:7]
glycogenes <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
new_table = NULL
for (i in 1:dim(table)[2]){
  cancer_name= colnames(table)[i]
  intersectiongenes = intersect(as.character(glycogenes[,1]), as.character(unique(table[,i])))
  intersectiongenes = c(cancer_name,intersectiongenes)
  if(length(intersectiongenes )>1){
    new_table = qpcR:::cbind.na(new_table,intersectiongenes)
  }
}
gene_table  = new_table[,-1]  
gene_table = as.data.frame(gene_table)
gene_table
write.table(gene_table,file=paste("./cancer_data/deleted_genes/alone_in_fitted_frequency_deleted_regions_and_oncogene_tables/glycogenes_aloneinthedeletion.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names=FALSE)

################

#Depmap Iorio
setwd("C:/Users/f.russo/Documents/cancer_data")
#depmap = read.table(file="./CCLE_gene_cn.csv",sep=",",header=TRUE,quote="") DO NOT CONSIDER CNA
depmap=NULL
achilles = read.table(file="./Achilles_gene_effect.csv",sep=",",header=TRUE,quote="")
dim(achilles)
achilles[1:20,1:5]
achilles=t(achilles)
achilles[1:20,1:5]
gene.names = strsplit(rownames(achilles),"[.]")
genes=lapply(gene.names, `[[`, 1)
mygenes=(unlist(genes))
length(mygenes)
rownames(achilles) = mygenes
achilles[1:20,1:5]
dim(achilles)
#[1] 18334   625 solo 625 linee cellulari
achilles[1,1:100]
info_achille = read.table(file="./sample_info.csv",sep=",",header=TRUE,row.names = 1,quote="")
info_achille[1:4,]

res=vector("list")
glycogenes_table = read.table(file=paste("./deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),sep="\t",header=TRUE,quote="")
#glycogenes_table = glycogenes_table[-c(1,2,3),-1]
head(glycogenes_table)

final_tab= NULL

for(j in 1:dim(glycogenes_table)[2]){
  #first read the cancer type
  cancer_type2 = strsplit(colnames(glycogenes_table)[j],"_")[[1]][1]
  print(cancer_type2)
  cancer_type = NULL
  if(cancer_type2 =="acc"){cancer_type="Adrenal Cancer"}
  if(cancer_type2 =="blca"){cancer_type="Bladder Cancer"}
  if(cancer_type2 =="brca"){cancer_type="Breast Cancer"}
  if(cancer_type2 =="cesc"){cancer_type="Cervical Cancer"}
  if(cancer_type2 =="chol"){cancer_type="Bile Duct Cancer"}
  if(cancer_type2 =="coad"){cancer_type="Colon/Colorectal Cancer"}
  if(cancer_type2 =="dlbc"){cancer_type="Lymphoma"}
  if(cancer_type2 =="esca"){cancer_type="Esophageal Cancer"}
  if(cancer_type2 =="gbm"){cancer_type="Brain Cancer"}
  if(cancer_type2 =="hnsc"){cancer_type="Head and Neck Cancer"}
  if(cancer_type2 =="kich"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="kirc"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="kirp"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="lalm"){cancer_type="Leukemia"}
  if(cancer_type2 =="lgg"){cancer_type="Brain Cancer"}
  if(cancer_type2 =="lihc"){cancer_type="Liver Cancer"}
  if(cancer_type2 =="luad"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="lusc"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="meso"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="ov"){cancer_type="Ovarian Cancer"}
  if(cancer_type2 =="paad"){cancer_type="Pancreatic Cancer"}
  if(cancer_type2 =="pcpg"){cancer_type=""}
  if(cancer_type2 =="prad"){cancer_type="Prostate Cancer"}
  if(cancer_type2 =="sarc"){cancer_type="Sarcoma"}
  if(cancer_type2 =="skcm"){cancer_type="Skin Cancer"}
  if(cancer_type2 =="stad"){cancer_type="Gastric Cancer"}
  if(cancer_type2 =="tgct"){cancer_type=""}
  if(cancer_type2 =="thca"){cancer_type="Thyroid Cancer"}
  if(cancer_type2 =="thym"){cancer_type=""}
  if(cancer_type2 =="ucec"){cancer_type="Endometrial/Uterine Cancer"}
  if(cancer_type2 =="ucs"){cancer_type="Endometrial/Uterine Cancer"}
  if(cancer_type2 =="uvm"){cancer_type="Eye Cancer"}
  glycogenes = glycogenes_table[,j]
  glycogenes = unique(glycogenes)
  if (is.na(as.character(glycogenes[length(glycogenes)]))){glycogenes = glycogenes[1:length(glycogenes)-1]}
  length(glycogenes)
  glycogenes_new = NULL
  achilles[1:5,1:5]
  temp=NULL
  for(i in 1:length(glycogenes)){ #estrai tutte le righe relative ai geni nello step2 in quel cancro
    sub_table = subset(achilles,rownames(achilles)==as.character(glycogenes[i]))
    if (dim(sub_table)[1]>0){
      sub_table = sub_table[1,]
      temp = rbind(temp,sub_table)
      glycogenes_new = c(glycogenes_new,as.character(glycogenes[i]))
    }
  }
  if(!is.null(glycogenes_new)){
    glycogenes = glycogenes_new
    length(glycogenes)     
  dim(temp)
  colnames(temp)=achilles[1,]
  rownames(temp)=as.character(glycogenes)
  cancer_cells_table = subset(info_achille,info_achille[,2]==cancer_type) # seleziona terza colonna con 2 #seleziona tutte le cellule che hanno quel cancro
  if(dim(cancer_cells_table)[1]>0){
    cancer_cells = rownames(cancer_cells_table)
    indexes = which(colnames(temp) %in% cancer_cells)
    if (dim(temp)[1]==1){
      temp2 = t(as.data.frame(as.numeric(temp[,indexes])))
    }else{
      temp2 = temp[,indexes]
    } # solo se ho una dataframe con una sola riga
    temp2 = as.data.frame(temp2)
    dim(temp2)
    colnames(temp2) = colnames(temp)[indexes]
    ##Confrontare i valori di CERES di quel gene in quelle linee cellulari di quel cancro contro tutto il resto del genoma in quelle stesse linee cellulari.
    #Adesso estrai tutti i valori di ceres nel resto del genoma in quelle cellule
    #per tutti i geni in quella linea cellulare  cancer_cells
      indexes = which(achilles[1,] %in% cancer_cells)
      genome_ceres_values = achilles[,indexes]
      if(!is.null(dim(genome_ceres_values))){
        genome_ceres_values = as.numeric(genome_ceres_values[-1,])
      }else{genome_ceres_values = as.numeric(genome_ceres_values[-1])}
      genome_ceres_values[1:10]
      pvalue_tab = NULL
      res = NULL
    if(dim(temp2)[2] > 0){
      for (k in 1:length(as.character(glycogenes))){ 
         ###CONTROLLARE QUI DIREZIONE DEL TEST # CERES values of NOT-DELETED. cells > values of DELETED. cells 
         signle_gene_ceres_values = subset(temp2,rownames(temp2) == as.character(glycogenes[k]))
         if( (length(as.numeric(as.matrix(signle_gene_ceres_values)))>0) & (length(genome_ceres_values)>0) ) {
            res[[k]]= wilcox.test( as.numeric(as.matrix(signle_gene_ceres_values)),genome_ceres_values, mu=0, alternative = "less",paired=F,correct=FALSE)  
            pvalue_tab_temp = c(as.character(glycogenes[k]),round(res[[k]][3]$p.value,5))
            pvalue_tab  = qpcR:::rbind.na(pvalue_tab,pvalue_tab_temp)   
         }
      }
      if(!is.null(pvalue_tab)){
        colnames(pvalue_tab)= c(cancer_type2,"pvalue")
        pvalue_tab = subset(pvalue_tab, as.numeric(pvalue_tab[,2]) < 0.05)
        if (dim(pvalue_tab)[1] > 0){
           final_tab  = qpcR:::cbind.na(final_tab, pvalue_tab) 
        }
      }
    }
   }
  }
}
#final_tab = final_tab[,-1]
write.table(final_tab,file=paste("./deleted_genes/achilles/homo_deletion_ceres_pvalue_tab.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t") 

################################################

#intersect with COSMIC census data https://cancer.sanger.ac.uk/census
census = read.table(file="./cancer_data/Census.tsv",sep="\t",header=TRUE,quote="")
dim(census)
census[1:5,1:5]
table_late = read.table(file=paste("./cancer_data/deleted_genes/STEP_3_deleted_survival_chr_wilcox_latestage_table.xls",sep=""),header=TRUE,sep="\t")
table_early = read.table(file=paste("./cancer_data/deleted_genes/STEP_3_deleted_survival_chr_wilcox_earlystage_table.xls",sep=""),header=TRUE,sep="\t")
table_notreported = read.table(file=paste("./cancer_data/deleted_genes/STEP_3_deleted_survival_chr_wilcox_notreported_table.xls",sep=""),header=TRUE,sep="\t")
notreported_unionlistofgenes = Reduce(union, table_notreported)
early_unionlistofgenes = Reduce(union, table_early)
late_unionlistofgenes = Reduce(union, table_late)
intersect(census$Gene.Symbol,late_unionlistofgenes)
intersect(census$Gene.Symbol,early_unionlistofgenes)
intersect(census$Gene.Symbol,notreported_unionlistofgenes)
length(intersect(census$Gene.Symbol,late_unionlistofgenes))
#"ARID1B" "CASP3"  "CDKN2A" "FAT1"   "MLLT3"  "NF2"    "PTEN"   "PTPN13" "SMAD4" 
length(intersect(census$Gene.Symbol,early_unionlistofgenes))
#"ARHGEF12" "ATM"      "ATP1A1"   "BCL2"     "BIRC3"    "CASP3"    "CDKN2A"   "DCC"      "DDX10"    "FLI1"     "FOXP1"    "KDSR"     "KMT2C"    "MALT1"    "MAP2K4"   "MITF"     "MLLT3"    "NFIB"     "NRAS"    
#"RB1"      "SDHD"     "SMARCA4"  "SPECC1"   "TP53"     "TRIM33"   "VTI1A"    "YWHAE"    "ZBTB16"   "ZNRF3"   
length(intersect(census$Gene.Symbol,notreported_unionlistofgenes))
#"ARHGEF10" "ARHGEF12" "ATIC"     "CDKN2A"   "FAS"      "H3F3A"    "JAK2"     "LEPROTL1" "MAP3K1"   "MLLT3"    "NCOR2"    "NF1"      "PCM1"     "PSIP1"    "PTEN"     "SMAD4"    "SPECC1"   "WRN"      "ZFHX3"  


#########################################################################
####interseca coi pathways di REACTOME

library(DOSE)
library(clusterProfiler)
library(ReactomePA)

setwd("C:/Users/f.russo/Documents/cancer_data/")

#https://reactome.org/downloa-data "Reactome Pathways Gene Set"   https://reactome.org/download/current/ReactomePathways.txt
reactomepathways <- read.table("reactomepathwaysnew.txt",header=FALSE,sep="\t") ###attenzione agli apostrofi nel file  ( ' ) . Eliminarli
dim(reactomepathways)
reactomepathways = data.frame(lapply(reactomepathways, as.character), stringsAsFactors=FALSE)
as.character(reactomepathways[1:3,1:6])

STEP_2_genes <-  read.table(paste("./deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni
head(STEP_2_genes)

table_temp = NULL
for(i in 1:dim(STEP_2_genes)[2]){ #for each cancer type
  cancername = colnames(STEP_2_genes)[i]
  amplified_genes = unique(as.character(STEP_2_genes[,i]))
  print(cancername)
  temp = cancername
  mut = read.table(paste("./data_mutation/",cancername,"_data_mutations_extended.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni di quel cancro
  submut_missense = subset(mut,mut$Variant_Classification == "Nonsense_Mutation"|
                                        mut$Variant_Classification == "Frame_Shift_Del"|  
                                        mut$Variant_Classification =="Frame_Shift_Ins"|
                                        mut$Variant_Classification == "Translation_Start_Site"|
                                        mut$Variant_Classification == "Splice_Site"|
                                        mut$Variant_Classification == "Splice_Region") #select only those patients with that mutation
  mutated_genes = unique(as.character(submut_missense$Hugo_Symbol))
  #Intersect each reactome pathway separately with the set of mutated genes (significance test?)
  for (j in 1:dim(reactomepathways)[1]){#for all the 2339 Reactome pathways
    genes_in_the_pathway = unique(as.character(reactomepathways[j,]))
    genes_in_intersection = intersect(mutated_genes, genes_in_the_pathway)
    res= fisher.test(rbind(c(length(genes_in_intersection)                      , length(genes_in_the_pathway)-length(genes_in_intersection)),
                           c(length(mutated_genes)-length(genes_in_intersection), 22000-length(genes_in_the_pathway)-length(mutated_genes)-length(genes_in_intersection))), 
                     alternative = "two.sided")
    if(res$p.value < 0.05){
      only_amplified_genes_in_intersection = intersect(genes_in_the_pathway, amplified_genes) # all the STEP2 genes present in that reactome pathway will gain one point.
      if(length(only_amplified_genes_in_intersection)>0){
        if(!is.na(only_amplified_genes_in_intersection)){
          write.table(only_amplified_genes_in_intersection,file=paste("./deleted_genes/Reactome_PATHWAY_analysis/pathway_",cancername,"_",j,".txt",sep=""),quote=F,row.names=F,sep="\t")
          temp = c(temp,unique(only_amplified_genes_in_intersection))
        }
      }
    }
  }
  if(length(unique(temp))>1){table_temp = qpcR:::cbind.na(table_temp,unique(temp))}
}
#table_temp = table_temp[,-1]
head(table_temp)
write.table(table_temp,file=paste("./deleted_genes/Reactome_PATHWAY_analysis/morethanonemember_homo_deleted_mutated_in_pathways.txt",sep=""),quote=F,row.names=F,col.names = F,sep="\t")

#######################
####OMIM
setwd("C:/Users/f.russo/Documents/cancer_data/")
omim_hpo <- read.table(file="omim_hpo.txt",sep="\t",header=FALSE)
head(omim_hpo)
dim(omim_hpo)
tail(omim_hpo)

STEP_2_genes <-  read.table(paste("./deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni
head(STEP_2_genes)

total = NULL
genes_found = vector("list")
for(i in 1:dim(STEP_2_genes)[2]){
  name = colnames(STEP_2_genes)[i]
  print(name)
  cancer_name = NULL
  if(name=="acc") {cancer_name = "Adrenocortical carcinoma"}
  if(name=="blca"){cancer_name = "Bladder carcinoma"}
  if(name=="brca"){cancer_name = "Breast carcinoma"}
  if(name=="chol"){cancer_name = "Cholangiocarcinoma"}
  if(name=="coad"){cancer_name = "Hereditary nonpolyposis colorectal carcinoma"}
  if(name=="dlbc"){cancer_name = "B-cell lymphoma"}
  if(name=="esca"){cancer_name = "Esophageal carcinoma"}
  if(name=="gbm") {cancer_name = "Glioblastoma multiforme"}
  if(name=="hnsc"){cancer_name = "Neoplasm of head and neck"}
  if(name=="kich"){cancer_name = "Renal neoplasm"}
  if(name=="kirc"){cancer_name = "Renal cell carcinoma"}
  if(name=="kirp"){cancer_name = "Papillary renal cell carcinoma"}
  if(name=="lalm"){cancer_name = "Acute myeloid leukemia"}
  if(name=="lgg") {cancer_name = "Glioma"}
  if(name=="lihc"){cancer_name = "Neoplasm of the liver"}
  if(name=="luad"){cancer_name = "Lung adenocarcinoma"}
  if(name=="lusc"){cancer_name = "Neoplasm of the lung"}
  if(name=="meso"){cancer_name = "Malignant mesothelioma"}
  if(name=="paad"){cancer_name = "Pancreatic adenocarcinoma"}
  if(name=="pcpg"){cancer_name = "Paraganglioma"}
  if(name=="prad"){cancer_name = "Prostate Cancer"}
  if(name=="stad"){cancer_name = "Stomach cancer"}
  if(name=="ov")  {cancer_name = "Ovarian carcinoma"}
  if(name=="sarc"){cancer_name = "Sarcoma"}
  if(name=="skcm"){cancer_name = "Neoplasm of the skin"}
  if(name=="stad"){cancer_name = "Stomach Cancer"}
  if(name=="tgct"){cancer_name = "Testicular neoplasm"}
  if(name=="thca"){cancer_name = "Thyroid carcinoma"}
  if(name=="thym"){cancer_name = "Thymoma"}
  if(name=="uvm") {cancer_name = "Uveal melanoma"}
  print(cancer_name)
  if(!is.null(cancer_name)){
    genelist = as.character(subset(omim_hpo, cancer_name==omim_hpo$V3)[,2])
    print(genelist)
    genes_found[[i]] = c(name,intersect(genelist,unique(as.character((STEP_2_genes)[,i]))))
    total = qpcR:::cbind.na(total, genes_found[[i]]) 
  }
}
total = total[,-1]
table = total
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(file=paste("./deleted_genes/OMIM_results/homo_deleted_omim_results.txt",sep=""),total,quote=F,sep="\t",row.names = F,col.names = F)

######################################################################
######STRING ANALYSIS Interattori DIRETTI trovati tramite i dati scaricati da STRING
library(DOSE)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
library(biomaRt)
library(igraph)
library(STRINGdb)
setwd("C:/Users/f.russo/Documents/cancer_data/")
#string_db <- STRINGdb$new( version="10", species=9606,score_threshold=0)
print("Loading conversion map. Please WAIT!")
#ensembl=useMart('ENSEMBL_MART_ENSEMBL', host='www.ensembl.org', dataset='hsapiens_gene_ensembl')
#results <- getBM(attributes = c("hgnc_symbol","entrezgene_id"), mart=ensembl)
#string_db <- STRINGdb$new( version="10", species=9606, score_threshold=0, input_directory="" )
#intersect with COSMIC census data https://cancer.sanger.ac.uk/cosmic/download
census = read.table(file="./Census.tsv",sep="\t",header=TRUE,quote="")
dim(census)
census[1:5,1:5]

protein_info = read.table(file="./9606.protein.info.v11.0.txt",sep="\t",header=TRUE,quote="")
head(protein_info)
dim(protein_info)
protein_links <- read.csv("./9606.protein.links.detailed.v11.0.txt",stringsAsFactors=FALSE, header=T, nrows=11759455, sep=" ")  
tail(protein_links)
dim(protein_links)

table=NULL
table = data.frame(protein_external_id="NA", preferred_name="NA")
genes_not_found = "NA"

for(k in 1:dim(census)[1]){
  temp_table = subset(protein_info,protein_info$preferred_name==as.character(census$Gene.Symbol[k]))[,1:2]
  if(dim(temp_table)[1]==0){
    print("non trovato")
    genes_not_found = c(genes_not_found,as.character(census$Gene.Symbol[k]))
  }else{table = rbind(table, temp_table)}
}

map_table = table[-1,] #me ne perdo 13
dim(map_table)
# 711   2
head(map_table)
genes_not_found 
#write.table(file="./tablemap.txt",map_table,quote=F,sep="\t") ##qui ci sono i geni in CENSUS

STEP_2_genes <-  read.table(paste("./deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni
head(STEP_2_genes)

interaction_threshold = 400
total_table=NULL
for(i in 1:dim(STEP_2_genes)[2]){ 
  name = colnames(STEP_2_genes)[i]
  print(name)
  currentcancerlist = name
  survival_results_cancertype = unique(as.character(STEP_2_genes[,i]))
  for(j in 1:length(survival_results_cancertype)[1]){ #per ogni gene
    currentgenelist = NULL
    currentgene = as.character(survival_results_cancertype[j])
    id_currentgene = subset(protein_info,protein_info$preferred_name==currentgene)$protein_external_id # estrai il gene id da protein info
    currentgene_subtable = subset(protein_links,protein_links$protein1==id_currentgene)
    current_subtableabovethre = subset(currentgene_subtable, currentgene_subtable$experimental > interaction_threshold) #Perche' solo experimental????
    #######################################################################
    ### Vedi se tra questi interattori ci sono degli oncogeni di CENSUS ###
    #######################################################################
    genes_in_intersection = intersect(current_subtableabovethre$protein2,as.character(map_table$protein_external_id))
    if(length(genes_in_intersection)>0){ #se li trovi ritraduci i nomi dei geni
      gene_interactors=NULL
      for(s in 1:length(genes_in_intersection)){ 
        gene_interactors[s] = as.character(subset(map_table,as.character(map_table$protein_external_id)==genes_in_intersection[s])[,2]) 
      }
      #currentgenelist = qpcR:::cbind.na(currentgene,gene_interactors) 
      currentgenelist = qpcR:::cbind.na(currentgene,paste(gene_interactors, collapse=", "))
    }
    if(length(currentgenelist)>0){
      currentcancerlist = qpcR:::rbind.na(currentcancerlist,currentgenelist) 
    }
  }
  if(length(currentcancerlist)>1){
    total_table = qpcR:::cbind.na(total_table,currentcancerlist) 
  }
}
total_table = total_table[,-1]
write.table(file=paste("./deleted_genes/STRING_interactors/homo_deleted_interactors_table.txt",sep=""),total_table,row.names=F,col.names=F,quote=F,sep="\t")

##########################
############ ANIMAL STUDIES (Candidate Cancer Gene Database (CCGD)) 
## Since we are studying Deletion we are looking for tumor suppressor genes. like PTEN and P53
## Therefore, I will look for "loss" in the "Effect" column.
setwd("C:/Users/f.russo/Documents/cancer_data/")
res=vector("list")
gene_table = read.table(file=paste("./deleted_genes/NEW_STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),sep="\t",header=TRUE,quote="")
head(gene_table)
mapccgd = read.table(file="ccgd_export_2020-05-11.txt",sep="\t",header=TRUE)
dim(mapccgd)
head(mapccgd)

new_table = NULL
for(j in 1:dim(gene_table)[2]){
  #first read the cancer type
  #j=10
  cancer_type2 = colnames(gene_table)[j]
  cancer_type = NULL
  if(cancer_type2 =="acc"){cancer_type="none"}
  if(cancer_type2 =="blca"){cancer_type="Bladder Cancer"}
  if(cancer_type2 =="brca"){cancer_type="Breast Cancer"}
  if(cancer_type2 =="cesc"){cancer_type="Cervical Cancer"}
  if(cancer_type2 =="chol"){cancer_type=""}
  if(cancer_type2 =="coad"){cancer_type="Colorectal Cancer"}
  if(cancer_type2 =="dlbc"){cancer_type="Blood Cancer"}
  if(cancer_type2 =="esca"){cancer_type="Esophageal Cancer"}
  if(cancer_type2 =="gbm"){cancer_type="Nervous System Cancer"}
  if(cancer_type2 =="hnsc"){cancer_type="Head and Neck Cancer"}
  if(cancer_type2 =="kich"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="kirc"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="kirp"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="lalm"){cancer_type="Blood Cancer"}
  if(cancer_type2 =="lgg"){cancer_type="Nervous System Cancer"}
  if(cancer_type2 =="lihc"){cancer_type="Liver Cancer"}
  if(cancer_type2 =="luad"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="lusc"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="meso"){cancer_type=""}
  if(cancer_type2 =="ov"){cancer_type="Ovarian Cancer"}
  if(cancer_type2 =="paad"){cancer_type="Pancreatic Cancer"}
  if(cancer_type2 =="pcpg"){cancer_type=""}
  if(cancer_type2 =="prad"){cancer_type="Prostate Cancer"}
  if(cancer_type2 =="sarc"){cancer_type="Sarcoma"}
  if(cancer_type2 =="skcm"){cancer_type="Skin Cancer"}
  if(cancer_type2 =="stad"){cancer_type="Gastric Cancer"}
  if(cancer_type2 =="tctg"){cancer_type=""}
  if(cancer_type2 =="thca"){cancer_type="Thyroid Cancer"}
  if(cancer_type2 =="thym"){cancer_type=""}
  if(cancer_type2 =="ucec"){cancer_type="Endometrial/Uterine Cancer"}
  if(cancer_type2 =="ucs"){cancer_type="Endometrial/Uterine Cancer"}
  if(cancer_type2 =="uvm"){cancer_type="Eye Cancer"}
  genes = gene_table[,j]
  genes = unique(genes)
  if (is.na(as.character(genes[length(genes)]))){genes = genes[1:length(genes)-1]}
  temp = cancer_type2
  sub_mapccgd = subset(mapccgd,as.character(mapccgd$Cancer)==cancer_type)
  for(i in 1:length(genes)){
    sub_table = subset(sub_mapccgd,as.character(sub_mapccgd$HumanName)==as.character(genes[i]))
    if ((dim(sub_table)[1]>0) && (as.character(sub_table$Effect)!="Gain")){ #NOT  Equal to Gain
      print("HI")
      temp = c(temp,as.character(genes[i]))
    }
  }
  if(length(temp)>1){new_table = qpcR:::cbind.na(new_table,temp)}
}  
new_table = new_table[,-1]
new_table
write.table(file=paste("./deleted_genes/ANIMAL_STUDIES/homo_deleted_animal_studies_table.txt",sep=""),new_table,row.names=FALSE,col.names=FALSE,quote=FALSE,sep="\t")


#########################################
##### MUTATION AND HOMO DELETIONS ARE MUTUALLY EXCLUSIVE
setwd("C:/DATA/cancer_data/")
#adesso prendo tutti i geni dello step 3 cosi' gia' so che sono stati selezionati come significativi. 
#poi li cerco nel file mut per vedere in quali pazienti sono mutati. Seleziono il gruppo di pazienti. 
#poi cerco il gene nel file CNA per vedere in quali pazienti e' amplificato. poi interseco
#i due gruppi di pazienti cosi' trovati per vedere se ci sono dei pazienti in comune. Per quei
#geni per cui l'intersezione e' nulla li scrivo in un file.
step3genes = read.table(paste("./deleted_genes/STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),header=TRUE,sep="\t")
step3genes[1,]
total_tab = NULL
library(qpcR)
for (i in 1:dim(step3genes)[2]){
  cancername = colnames(step3genes)[i] #seleziona il cancro
  print(cancername)
  cna = read.table(paste("./cbioportaldataset/",cancername,"/tcga/data_CNA_",cancername,".txt",sep=""),header=TRUE,sep="\t") #carica il file delle amplificazioni per quel cancro
  mut = read.table(paste("./data_mutation/",cancername,"_data_mutations_extended.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni
  currentgenelist = unique(as.character(step3genes[,i])) #carica la lista univoca dei geni per quel cancro
  k=1 #per ogni cancro inizializza il cotatore dei geni trovati
  list_of_mutually_esclusive_genes = NULL #inizializza lista dei geni
  for (j in 1:length(currentgenelist)){
    submut = subset(mut,as.character(mut$Hugo_Symbol)==(currentgenelist[j])) #cerca il gene corrente nel file mut
    if(dim(submut)[1]>0){
      ### VEDERE IL TIPO DI MUTAZIONE
      submut_missense = subset(submut,submut$Variant_Classification == "Nonsense_Mutation"|
                                 submut$Variant_Classification == "Frame_Shift_Del"|  
                                 submut$Variant_Classification =="Frame_Shift_Ins"|
                                 submut$Variant_Classification == "Translation_Start_Site"|
                                 submut$Variant_Classification == "Splice_Site"|
                                 submut$Variant_Classification == "Splice_Region")
      if(dim(submut_missense)[1]>0){
        mutatedpatients = as.character(submut_missense$Tumor_Sample_Barcode)# prendi i pazienti mutati per quel gene
        mutatedpatients = strsplit(mutatedpatients ,"-")
        patientnames=NULL
        # scrivi i nomi col punto . invece che col -
        for (p in 1:length(mutatedpatients)){
          patientnames[p] = paste("TCGA",mutatedpatients[[p]][2],mutatedpatients[[p]][3],"01",sep=".")
        }
        mutatedpatients = patientnames
        if(length(mutatedpatients)>0){ #se non e' vuoto cerca in CNA per quel gene se ci sono dei pazienti amplificati
          subcna = subset(cna,as.character(cna$Hugo_Symbol)==(currentgenelist[j])) 
          if(dim(subcna)[1]>0){ #penso sia un coltrollo superfluo
            amplifpatients = colnames(subcna[which(subcna==-2)]) #questi pazienti hanno il . invece del -   cerca i -2 homo deletion
            if(length(amplifpatients)>0){  #vedo se hanno pazienti in comune #controllo superfluo
              patientinamplifiedandmutated = intersect(amplifpatients,mutatedpatients)
              if(length(patientinamplifiedandmutated)==0){ 
                # se il gene e' amplificato ma non mutato (intersezione nulla)
                #i.e.: mutation and amplification are mutually exclusive
                list_of_mutually_esclusive_genes[k] = (currentgenelist[j])
                k = k+1
              }
            }
          }
        }
      }
    }
  }
  list_of_mutually_esclusive_genes = c(cancername,list_of_mutually_esclusive_genes)
  total_tab =  qpcR:::cbind.na(total_tab,list_of_mutually_esclusive_genes) #quando hai finito per un cancro, costruisci qui la tabella finale
}
head(total_tab)
total_tab = total_tab[,-1]
write.table(total_tab,paste("./deleted_genes/mutually_exclusive/homo_deletion_mutation_mutually_exclusive.txt",sep=""),col.names = FALSE,row.names = FALSE,quote=FALSE,sep="\t")

##### summary analysis

step1_homo_del = read.table("STEP_1_compacted_Chromosome_threshold_table.xls",header=TRUE,sep="\t")
head(step1_homo_del)
arrayoflength = NULL
totalgenelist = NULL
for(j in 1:dim(step1_homo_del)[2]){
  arrayoflength[j] = length(unique(as.character(step1_homo_del[,j])))-1
  genes = (unique(as.character(step1_homo_del[,j])))
  totalgenelist = c(totalgenelist, genes)
}
totalgenelist = unique(totalgenelist)
length(totalgenelist)
arrayoflength
min(arrayoflength)
max(arrayoflength)
# i duplicati nel caso blca
genes=as.character(step1_homo_del[,2])
unique(genes[duplicated(genes)])
# 444 2059 2491 1730  376 1295  667 1182  913 2029  322 1027  571  453 2242 1290 2132 1348  301 2310  375  391 3194 1423 1440 2918  414  198  290 1085  427  488
write.table(arrayoflength,"arrayoflenngth.xls",col.names = FALSE,row.names = FALSE)
write.table(totalgenelist,"totalgenelist.txt",col.names = FALSE,row.names = FALSE,quote=FALSE)
#############

### STEP_3 corrected tables
setwd("C:/Users/f.russo/Documents/")
STEP_2_genes_to_eliminate = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_2_genes_to_eliminate_table.txt",sep=""),header=TRUE,sep="\t")
table_late =  read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_late_stage_onlygenes.txt",sep=""),header=TRUE,sep="\t")
table_early = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_early_stage_onlygenes.txt",sep=""),header=TRUE,sep="\t")
table_notreported = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_notreported_onlygenes.txt",sep=""),header=TRUE,sep="\t")
newtable = NULL
table = table_early
for (i in 1:dim(STEP_2_genes_to_eliminate)[2]){
  ind = which(colnames(table)==colnames(STEP_2_genes_to_eliminate)[i])  #cerca lo stesso cancro in step_3
  if(length(ind)>0){
    temp = setdiff( unique(as.character(table[,ind])), unique(as.character(STEP_2_genes_to_eliminate[,i])) ) #sottrai i geni corretti per BH
    temp = c(colnames(STEP_2_genes_to_eliminate)[i],temp)
    newtable = qpcR:::cbind.na(newtable,temp)
  }
}
newtable 
newtable=newtable[,-1]
table = newtable
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,"./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_early_stage_onlygenes2.txt",col.names = FALSE,row.names = FALSE,quote=FALSE,sep="\t")

######################
###################################
##create FINAL table
setwd("C:/DATA/")
library("qpcR")
table = read.table(file=paste("./cancer_data/deleted_genes/homo_deleted_collapsed_segments_8_9_2020.txt",sep=""),header=TRUE,sep="\t")
table_late =  read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_late_stage_onlygenes.txt",sep=""),header=TRUE,sep="\t")
table_early = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_early_stage_onlygenes.txt",sep=""),header=TRUE,sep="\t")
table_notreported = read.table(file=paste("./cancer_data/deleted_genes/NEW_STEP_3_homo_deleted_survival_notreported_onlygenes.txt",sep=""),header=TRUE,sep="\t")
STEP_2_genes = read.table(file=paste("./cancer_data/deleted_genes/STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),header=TRUE,sep="\t")
alone_table = read.table(file=paste("./cancer_data/deleted_genes/alone_in_fitted_frequency_deleted_regions_and_oncogene_tables/genes_aloneinthedeletion.txt",sep=""),header=TRUE,sep="\t")
ampl_mut_mutually_exclusive = read.table(file=paste("./cancer_data/deleted_genes/mutually_exclusive/homo_deletion_mutation_mutually_exclusive.txt",sep=""),header=TRUE,sep="\t")
omim_results = read.table(file=paste("./cancer_data/deleted_genes/OMIM_results/homo_deleted_omim_results.txt",sep=""),header=TRUE,sep="\t")
m_or_amplif_in_same_path  = read.table(file=paste("./cancer_data/deleted_genes/Reactome_PATHWAY_analysis/morethanonemember_homo_deleted_mutated_in_pathways.txt", sep=""),header=TRUE,sep="\t")
interaction_with_cancer_census_genes  = read.table(file="./cancer_data/deleted_genes/STRING_interactors/homo_deleted_interactors_table.txt",header=TRUE,sep="\t")
animal_studies = read.table(file="./cancer_data/deleted_genes/ANIMAL_STUDIES/homo_deleted_animal_studies_table.txt",header=TRUE,sep="\t")
census = read.table(file="./cancer_data/Census.tsv",sep="\t",header=TRUE,quote="")
census_list = as.character(census$Gene.Symbol)
x = read.table(file="./cancer_data/known_TSG_list.txt",sep="\t",header=TRUE)
x = c(as.character(x[,1]),census_list) # concatena i geni
achilles = read.table(file="./cancer_data/deleted_genes/achilles/homo_deletion_ceres_pvalue_tab.txt",sep="\t",header=TRUE)
glyco_genes <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
glycogenes = as.character(glyco_genes[,1])
ampl_table <- read.table(file="./cancer_data/homo_deleted_linear_values_table.txt",sep="\t",header=TRUE)

dim(table)
table[12,]
final_tab = NULL
#
for(j in 1:dim(table)[1]){ #scorri tutte le righe di collapsed_segments_7_5_2020.txt
  
  genes_in_amplicon = strsplit(as.character(table[j,]$genes),", ")[[1]]
  n_genes_in_amplicon = length(genes_in_amplicon)
  #select the segment cancer
  cancer_name = as.character(table[j,]$cancer)
  if (cancer_name == "coad"){cancer_name = "coadread"}
  ampl_table_cancer = ampl_table[,c(which(colnames(ampl_table) == cancer_name),which(colnames(ampl_table) == cancer_name)+1)]
  genes_in_intersection = intersect(genes_in_amplicon, as.character(ampl_table_cancer[,1]))
  median_of_linear_amplifications_in_the_amplicon = median(ampl_table_cancer[which(as.character(ampl_table_cancer[,1]) %in% genes_in_intersection),2],na.rm = T)
  
  step_2_genes_cancer = as.character(unique(STEP_2_genes[,which(colnames(STEP_2_genes) == cancer_name)]))
  genes_wtest = intersect(genes_in_amplicon,step_2_genes_cancer) #interseca con la lista totale dei geni
  n_genes_wtest = length(genes_wtest)
  
  #survival
  table_early_cancer = as.character(unique(table_early[,which(colnames(table_early) == cancer_name)]))
  genes_early_stage = intersect(genes_in_amplicon, table_early_cancer) #interseca con la lista totale dei geni
  n_early_stage = length(genes_early_stage)
  
  table_late_cancer = as.character(unique(table_late[,which(colnames(table_late) == cancer_name)]))
  genes_late_stage = intersect(genes_in_amplicon, table_late_cancer) #interseca con la lista totale dei geni
  n_late_stage = length(genes_late_stage)
  
  table_notreported_cancer = as.character(unique(table_notreported[,which(colnames(table_notreported) == cancer_name)]))
  genes_notreported = intersect(genes_in_amplicon, table_notreported_cancer) #interseca con la lista totale dei geni
  n_notreported = length(genes_notreported)
  
  #alone_in_amplicon
  table_alone_cancer = as.character(unique(alone_table[,which(colnames(alone_table) == cancer_name)]))
  genes_alone = intersect(genes_in_amplicon, table_alone_cancer) #interseca con la lista totale dei geni
  n_alone = length(genes_alone)
  
  #amplification muitation are mutually exclusive
  ampl_mut_mutually_exclusive_cancer  = as.character(unique(ampl_mut_mutually_exclusive [,which(colnames(ampl_mut_mutually_exclusive ) == cancer_name)]))
  ampl_mut_mutually_exclusive_genes  = intersect(genes_in_amplicon, ampl_mut_mutually_exclusive_cancer) #interseca con la lista totale dei geni
  n_ampl_mut_mutually_exclusive_genes = length(ampl_mut_mutually_exclusive_genes)
  
  #omim
  table_omim_cancer = as.character(unique(omim_results[,which(colnames(omim_results) == cancer_name)]))
  genes_omim = intersect(genes_in_amplicon, table_omim_cancer) #interseca con la lista totale dei geni
  n_omim = length(genes_omim)
  
  #m_or_amplif_in_same_path
  table_m_or_amplif_in_same_path_cancer = as.character(unique(m_or_amplif_in_same_path[,which(colnames(m_or_amplif_in_same_path) == cancer_name)]))
  genes_m_or_amplif_in_same_path = intersect(genes_in_amplicon, table_m_or_amplif_in_same_path_cancer) #interseca con la lista totale dei geni
  n_m_or_amplif_in_same_path = length(genes_m_or_amplif_in_same_path )
  
  #census #inserire anche i geni di census che interagiscono. riscrivere il software che produce early_stage_interactors_table.txt FATTO!
  interaction_with_cancer_census_genes_new = interaction_with_cancer_census_genes[,seq(1,dim(interaction_with_cancer_census_genes)[2],2)]
  interaction_with_cancer_census_genes_cancer = as.character(unique(interaction_with_cancer_census_genes_new[,which(colnames(interaction_with_cancer_census_genes_new) == cancer_name)]))
  genes_interaction_with_cancer_census_genes = intersect(genes_in_amplicon, interaction_with_cancer_census_genes_cancer) #interseca con la lista totale dei geni
  n_genes_that_interact_with_cancer_census_genes = length(genes_interaction_with_cancer_census_genes)
  
  cosmic_census_interactors_table_cancer = interaction_with_cancer_census_genes[,c(which(colnames(interaction_with_cancer_census_genes) == cancer_name),which(colnames(interaction_with_cancer_census_genes) == cancer_name)+1)]
  cosmic_census_interactors_list = vector("character",n_genes_that_interact_with_cancer_census_genes)
  if(dim(cosmic_census_interactors_table_cancer)[2] > 0){
    for (k in 1: n_genes_that_interact_with_cancer_census_genes ){  
      cosmic_census_interactors_list[k]= as.character(cosmic_census_interactors_table_cancer[which(
        as.character(cosmic_census_interactors_table_cancer[,1])==genes_interaction_with_cancer_census_genes[k]),2])
    }
  }
  cosmic_census_interactors_list = unique(cosmic_census_interactors_list)
  cosmic_census_interactors_list 
  
  #animal_studies
  animal_studies_cancer = as.character(unique(animal_studies[,which(colnames(animal_studies) == cancer_name)]))
  animal_studies_genes = intersect(genes_in_amplicon, animal_studies_cancer) #interseca con la lista totale dei geni
  n_animal_studies = length(animal_studies_genes)
  
  #known_oncogenes_in_the_amplicon
  known_oncogenes_in_the_amplicon = intersect(genes_in_amplicon,x)
  glycogenes_in_the_amplicon = intersect(genes_in_amplicon,glycogenes)  
  #print(glycogenes_in_the_amplicon)
  
  #Achilles CERES
  achilles_new = achilles[,seq(1,dim(achilles)[2],2)]
  achilles_cancer = as.character(unique(achilles_new[,which(colnames(achilles_new) == cancer_name)]))
  genes_achilles = intersect(genes_in_amplicon, achilles_cancer) #interseca con la lista totale dei geni
  n_achilles = length(genes_achilles)
  
  genes_wtest = paste(genes_wtest, collapse=", ")
  genes_early_stage = paste(genes_early_stage, collapse=", ")
  genes_late_stage = paste(genes_late_stage, collapse=", ")
  genes_notreported = paste(genes_notreported, collapse=", ")
  genes_alone = paste(genes_alone, collapse=", ")
  ampl_mut_mutually_exclusive_genes = paste(ampl_mut_mutually_exclusive_genes, collapse=", ")
  genes_omim = paste(genes_omim, collapse=", ")
  genes_m_or_amplif_in_same_path = paste(genes_m_or_amplif_in_same_path, collapse=", ")
  genes_that_interact_with_cancer_census_genes = paste(genes_interaction_with_cancer_census_genes, collapse=", ")
  cosmic_census_interactors_list = paste(cosmic_census_interactors_list,collapse=", ")
  animal_studies_genes = paste(animal_studies_genes,collapse=", ")
  known_oncogenes_in_the_amplicon = paste(known_oncogenes_in_the_amplicon, collapse=", ")
  glycogenes_in_the_amplicon = paste(glycogenes_in_the_amplicon, collapse=", ")
  genes_achilles = paste(genes_achilles, collapse=", ")
  percentage_mean_over_segments = round(mean(as.numeric((strsplit(table[j,]$percentage_mean,", "))[[1]]), na.rm=TRUE),2)
  
  new_table = qpcR:::cbind.na(table[j,],percentage_mean_over_segments,n_genes_in_amplicon,
                              genes_wtest,n_genes_wtest,
                              genes_early_stage,n_early_stage,
                              genes_late_stage,n_late_stage,
                              genes_notreported,n_notreported,
                              genes_alone,n_alone,
                              ampl_mut_mutually_exclusive_genes,n_ampl_mut_mutually_exclusive_genes,
                              genes_omim,n_omim,
                              genes_m_or_amplif_in_same_path,n_m_or_amplif_in_same_path,
                              genes_that_interact_with_cancer_census_genes,n_genes_that_interact_with_cancer_census_genes,
                              cosmic_census_interactors_list,
                              animal_studies_genes,n_animal_studies,
                              known_oncogenes_in_the_amplicon,
                              glycogenes_in_the_amplicon,
                              genes_achilles,n_achilles)
  
  final_tab = qpcR:::rbind.na(final_tab, new_table)
}

dim(final_tab)
final_tab=final_tab[-1,]
final_tab=final_tab[,-8]

write.table(final_tab,file=paste("./cancer_data/deleted_genes/homo_deleted_final_table_30_9_2020.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

#############################
### Points
#############################

txtfls <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
txtfls
final_tab = read.table(file="./cancer_data/deleted_genes/homo_deleted_final_table_30_9_2020.txt",sep="\t",header=TRUE)
dim(final_tab)
final_tab[1:5,1:5]
total_table=NULL
for(i in 1:length(txtfls)){
  #select the segment cancer
  a = read.table(txtfls[i],row.names = 1,header=TRUE,sep="\t")
  name = strsplit(txtfls[i],"/")
  cancer_name = name[[1]][length(name[[1]])]
  cancer_name = strsplit(cancer_name,"_")
  cancer_name = cancer_name[[1]][3]
  print(cancer_name)
  final_tab_cancer = final_tab[which(as.character(final_tab$cancer) == cancer_name),] 
  dim(final_tab_cancer)
  final_tab_cancer[1:5,1:5]
  for(j in 1: dim(final_tab_cancer)[1]){ #scorri ampliconi j=8
    chromosomal_locations = strsplit(as.character(final_tab_cancer$bands[j]),", ")[[1]]
    Chromosomal_location_of_the_amplicon_start = chromosomal_locations[1]
    Chromosomal_location_of_the_amplicon_end = chromosomal_locations[length(chromosomal_locations)]
    chromosome  = substr(as.character(final_tab_cancer$chromosome_name[j]),4,4+length(as.character(final_tab_cancer$chromosome_name[j])))
    Chromosomal_location_of_the_amplicon = paste(paste(chromosome,Chromosomal_location_of_the_amplicon_start,sep=""),
                                                 paste(chromosome,Chromosomal_location_of_the_amplicon_end,sep=""),sep=" - ")
    #print(Chromosomal_location_of_the_amplicon)
    
    #Percentage_median_of_patients_with_CNA = median(as.numeric(strsplit(as.character(final_tab_cancer$percentage_mean[j]),", ")[[1]]) )
    
    Median_amplitude_of_CNA = final_tab_cancer$median_of_linear_amplifications_in_the_amplicon[j]
    
    genes = final_tab_cancer$genes[j]
    gene_list = strsplit(as.character(genes),", ")
    
    Cancer_early_stage_clinically_relevant = strsplit(as.character(final_tab_cancer$genes_early_stage[j]),", ")[[1]]
    Cancer_late_stage_clinically_relevant  = strsplit(as.character(final_tab_cancer$genes_late_stage[j]),", ")[[1]]
    Cancer_notreported_clinically_relevant = strsplit(as.character(final_tab_cancer$genes_notreported[j]),", ")[[1]]
    for(k in 1:length(gene_list[[1]])){ #scorri i geni
      current_gene = gene_list[[1]][k]
      Cancer_stage_where_the_gene_is_clinically_relevant1=""
      Cancer_stage_where_the_gene_is_clinically_relevant2=""
      Cancer_stage_where_the_gene_is_clinically_relevant3=""
      Cancer_stage_where_the_gene_is_clinically_relevant=""
      if(is.element(current_gene, Cancer_early_stage_clinically_relevant)){Cancer_stage_where_the_gene_is_clinically_relevant1 = "early"}
      if(is.element(current_gene, Cancer_late_stage_clinically_relevant)) {Cancer_stage_where_the_gene_is_clinically_relevant2 = " late"}
      if(is.element(current_gene, Cancer_notreported_clinically_relevant)){Cancer_stage_where_the_gene_is_clinically_relevant3 = " notreported"}
      
      Cancer_stage_where_the_gene_is_clinically_relevant = paste( Cancer_stage_where_the_gene_is_clinically_relevant1, 
                                                                  Cancer_stage_where_the_gene_is_clinically_relevant2, Cancer_stage_where_the_gene_is_clinically_relevant3,sep="")
      
      Clinical_relevance = 0
      if( nchar(Cancer_stage_where_the_gene_is_clinically_relevant) > 2 ){Clinical_relevance = 1}
      
      Only_gene_in_the_amplicon = 0 
      Only_gene_in_the_amplicon_logic = (as.character(final_tab_cancer$genes_alone[j])==current_gene)
      if( Only_gene_in_the_amplicon_logic  ){ Only_gene_in_the_amplicon = 1}
      
      mutated_or_amplified_genes_in_same_pathway = 0
      mutated_or_amplified_genes_in_same_pathway_logic = as.character(final_tab_cancer$genes_m_or_amplif_in_same_path[j])==current_gene
      if(mutated_or_amplified_genes_in_same_pathway_logic ){
        mutated_or_amplified_genes_in_same_pathway = 1
      }
      
      KD_promotes_growth_logic = (as.character(final_tab_cancer$genes_achilles[j])==current_gene)
      KD_promotes_growth = 0
      if( KD_promotes_growth_logic ){ KD_promotes_growth = 1}
      
      ampl_mut_mutually_exclusive_logic = (as.character(final_tab_cancer$ampl_mut_mutually_exclusive_genes[j])==current_gene)
      ampl_mut_mutually_exclusive = 0
      if( ampl_mut_mutually_exclusive_logic ){ ampl_mut_mutually_exclusive = 1}
      
      genes_omim_logic = as.character(final_tab_cancer$genes_omim[j])==current_gene
      genes_omim = 0
      if( genes_omim_logic ){ genes_omim = 1}
      
      animal_studies_genes_logic = as.character(final_tab_cancer$animal_studies_genes[j])==current_gene
      animal_studies_genes = 0
      if(animal_studies_genes_logic ){animal_studies_genes = 1}
      
      genes_that_interact_with_cancer_census_genes_logic = as.character(final_tab_cancer$genes_that_interact_with_cancer_census_genes[j])==current_gene
      genes_that_interact_with_cancer_census_genes = 0
      if(genes_that_interact_with_cancer_census_genes_logic ){genes_that_interact_with_cancer_census_genes = 1}
      
      Total_points = Clinical_relevance + Only_gene_in_the_amplicon + mutated_or_amplified_genes_in_same_pathway + KD_promotes_growth + ampl_mut_mutually_exclusive +
        genes_omim + animal_studies_genes + genes_that_interact_with_cancer_census_genes
      Class = "IV"
      if(Total_points > 0){Class = "III"}
      if(Total_points > 2){Class = "II"}
      Gene = current_gene
      gene_line = qpcR:::cbind.na(Gene,cancer_name,Chromosomal_location_of_the_amplicon,Cancer_stage_where_the_gene_is_clinically_relevant,
                                  Clinical_relevance,Only_gene_in_the_amplicon,mutated_or_amplified_genes_in_same_pathway,KD_promotes_growth,ampl_mut_mutually_exclusive, 
                                  genes_omim,animal_studies_genes,genes_that_interact_with_cancer_census_genes,Total_points,Class)
      if(k==1){amplicon_table = gene_line}else{amplicon_table = qpcR:::rbind.na(amplicon_table,gene_line)}
    }
    if(j==1){cancer_table = amplicon_table}else{cancer_table = qpcR:::rbind.na(cancer_table,amplicon_table)}
  }
  if(i==1){total_table = cancer_table}else{total_table = qpcR:::rbind.na(total_table,cancer_table)}
}

dim(total_table)
total_table[1:3,]
write.table(total_table,file=paste("./cancer_data/deleted_genes/deleted_points_30_9_2020.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

###Filter genes not present in STEP2
STEP_2_genes = read.table(file=paste("./cancer_data/deleted_genes/STEP_2_homo_deletion_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),header=TRUE,sep="\t")
points = read.table(file=paste("./cancer_data/deleted_genes/deleted_points_30_9_2020.txt",sep=""),header=T,sep="\t")
head(points)
filtered_points=NULL
for (i in 1:dim(points)[1]){
  temp=points[i,]
  step2cancergenes = unique(as.character(STEP_2_genes[,colnames(STEP_2_genes)==as.character(temp$cancer_name)]))
  if(length(intersect(as.character(temp$Gene),step2cancergenes))>0){
    filtered_points = rbind(filtered_points,temp)
  }
}
dim(points)
dim(filtered_points)
filtered_points[1:20,1:3]
write.table(filtered_points,file=paste("./cancer_data/deleted_genes/filtered_deleted_points_30_9_2020.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

###take all the glyc

total_table = read.table(file=paste("./cancer_data/deleted_genes/filtered_points_deleted_30_9_2020.txt",sep=""),header=T,sep="\t")
glycogenes <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
total_table_glycogenes = total_table[(which(as.character(total_table[,1]) %in% as.character(glycogenes[,1]))),]
dim(total_table_glycogenes)
head(total_table_glycogenes)
length(unique(total_table_glycogenes[,1]))
#[1] 293
write.table(total_table_glycogenes,file=paste("./cancer_data/deleted_genes/deleted_glycogenes_points_30_9_2020.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

for(k in 1:length(unique(total_table_glycogenes[,1]))){
  total_table_glycogenes[ which(as.character(total_table_glycogenes[,1]) %in%  unique(total_table_glycogenes[,1])[k]),]
  
}

hist(as.numeric(total_table_glycogenes$Total_points), main=paste("Glycogene Point Frequencies",sep=""),xlab="points", ylab="glycogenes (with repetitions)", border="black", col="yellow", las=1, breaks=50)
dev.print(pdf,paste("./cancer_data/deleted_genes/deleted_total_table_glycogenes_point_frequencies.pdf",sep=""))
dev.off()

hist(as.numeric(total_table$Total_points), main=paste("Gene Point Frequencies",sep=""),xlab="points", ylab="genes (with repetitions)", border="black", col="yellow", las=1, breaks=50)
dev.print(pdf,paste("./cancer_data/deleted_genes/deleted_total_table_point_frequencies.pdf",sep=""))
dev.off()

##################################
#####        THE END         #####
##################################
