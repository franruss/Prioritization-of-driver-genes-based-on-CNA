##Calcola percentuali
txtfls <- list.files("./data_CNA2",pattern="$",full.names=TRUE)
txtfls

calculatepercentages <- function(txtfls){
  for(i in 1:length(txtfls)){  
    a=read.table(txtfls[i],row.names = 1,header=TRUE,sep="\t")
    name=strsplit(txtfls[i],"/")
    name=name[[1]][length(name[[1]])]
    print(name)
    a[1:5,1:5]
    a = a[,-1] #elimina la colonna degli entrez ID
    a[1:5,1:5]
    dim(a)
    amplification = rowSums(a==2) #here we use the GISTIC SCORE
    percentAmplification = round(amplification/ (dim(a)[2])*100,1)
    head(percentAmplification)
    m = round(mean(percentAmplification),2)
    s = round(sd(percentAmplification),2)
    write.table(percentAmplification,file=paste("./percentages/",name,"_percentages.txt",sep=""),sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
  }
}
calculatepercentages(txtfls)


######################## percentage table
percentages <- list.files("./cancer_data/percentages/",pattern="*.txt_percentages.txt",full.names=TRUE)
percentages
full_table =  read.table(file=percentages[1],sep="\t",header=F) 
name = strsplit(percentages[1],"/")
cancer_name = name[[1]][length(name[[1]])]
cancer_name = strsplit(cancer_name,"_")
cancer_name = cancer_name[[1]][3]
print(cancer_name)
full_table = qpcR:::rbind.na(c(cancer_name,cancer_name),full_table)
head(full_table)
for(k in 2:length(percentages)){
  current_percent_table = read.table(file=percentages[k],sep="\t",header=F) 
  name = strsplit(percentages[k],"/")
  cancer_name = name[[1]][length(name[[1]])]
  cancer_name = strsplit(cancer_name,"_")
  cancer_name = cancer_name[[1]][3]
  print(cancer_name)
  current_percent_table = qpcR:::rbind.na(c(cancer_name,cancer_name),current_percent_table)
  head(current_percent_table)
  full_table = qpcR:::cbind.na(full_table,current_percent_table[,2])
}

head(full_table)
write.table(full_table,file = paste("./cancer_data/amplified_genes/full_table_percentages.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")

glycogenes <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
full_table_glycogenes = full_table[(which(as.character(full_table[,1]) %in% as.character(glycogenes[,1]))),]
dim(full_table_glycogenes)
head(full_table)
full_table_glycogenes = qpcR:::rbind.na(full_table[1,],full_table_glycogenes)
head(full_table_glycogenes)

setdiff(as.character(glycogenes[,1]),as.character(full_table[,1]) )
#0
length(as.character(glycogenes[,1])) #488

write.table(full_table_glycogenes,file = paste("./cancer_data/amplified_genes/full_table_glycogene_percentages.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")

# Create CGDS object
#mycgds = CGDS("http://www.cbioportal.org/")

# Get list of cancer studies at server
#getCancerStudies(mycgds)

# Get available case lists (collection of samples) for a given cancer study  
#getCancerStudies(mycgds)[,1]
#dim(getCancerStudies(mycgds))
#mycancerstudy = getCancerStudies(mycgds)[15,1]
#getCaseLists(mycgds,mycancerstudy)[,1]
#mycaselist = getCaseLists(mycgds,mycancerstudy)[5,1] #Select Patient/Case Set

#getGeneticProfiles(mycgds,mycancerstudy)[,1:2]
# Get available genetic profiles
#mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[3,1]
#mygeneticprofile 
# Get data slices for a specified list of genes, genetic profile and case list
#gene_list = read.table("./cancer_data/actual_gene_list.txt",row.names = 1,header=TRUE,sep="\t")
#rows_pca = as.character(gene_list[,1])
#i <- 1
#while(i <= length(rows_pca)){
#  if(i == 1){
#    z_pca <- matrix()
#  }
#  k <- i+999
#  temp <- getProfileData(mycgds, rows_pca[i:k],mygeneticprofile,mycaselist)
#  message(paste("done for genes -->",i," to ",k))
#  if(dim(temp)[1] != 0){
#    z_pca <- cbind(z_pca,  temp)
#  }
#  i <- k+1
#}
#dim(z_pca)
#z_pca[,1:10]
#z_pca <- t(z_pca)
#rem_pca <- as.numeric(which(apply(z_pca,1,function(x) sum(is.na(x))) == ncol(z_pca)))
#z_pca <- z_pca[-rem_pca,]
#dim(z_pca)
#colnames(z_pca)


#####################################
#####################################
#####  CHROMOSOME BASED METHOD  #####
#####################################
#####################################

#Calculate chromosome thresholds 
#setwd("C:/Users/f.russo/Documents")
setwd("C:/DATA")
library(gtools)
library(ggplot2)
library(biomaRt)
library(curl)
library(qpcR)
# Select appropriate database
ensembl <- useMart("ensembl")
ensembl <- useDataset("hsapiens_gene_ensembl", mart=ensembl)
filters <- c("hgnc_symbol") #cerca tra i nomi dei geni
# select attributes to return
attributes <- c('chromosome_name','start_position','end_position', 'strand','hgnc_symbol', 'band')
percentages <- list.files("./percentages/",pattern="*.txt_percentages.txt",full.names=TRUE)
percentages
txtfls <- list.files("./data_CNA2",pattern="$",full.names=TRUE)
txtfls
onco_genelist <- read.table(file="./cancer_data/known_oncogene_list.txt",sep="\t",header=TRUE)
percentordered2 =  read.table(file=percentages[1],sep="\t",header=F)
gene_list = as.character(percentordered2$V1) #carica la lista dei geni da un file
write.table(gene_list,file="./cancer_data/TCGA_gene_list.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)
length(gene_list)
# 24776
coordinates = NULL
coordinates = getBM(attributes=attributes, filters=filters, values=as.character(percentordered2$V1), mart=ensembl) #in values I fetch the info
dim(coordinates)
# 24328   
#Aggiungi a mano questi 4 di coordinates anche #"CKS1B|ENSG00000173207.8" "WHSC1L1"   "C8orf4"   "C11orf30"   #ma c'c' anche CKS1B|ENSG00000268942.1
gene1=getBM(attributes=attributes, filters=filters, values="CKS1B", mart=ensembl)
gene1$hgnc_symbol="CKS1B|ENSG00000173207.8"
coordinates=rbind(coordinates,gene1)#aggiungi
gene2=getBM(attributes=attributes, filters=filters, values="NSD3", mart=ensembl) #OK
gene2$hgnc_symbol="WHSC1L1"
coordinates=rbind(coordinates,gene2)
gene3=getBM(attributes=attributes, filters=filters, values="TCIM", mart=ensembl) #OK
gene3$hgnc_symbol="C8orf4"
coordinates=rbind(coordinates,gene3)
gene4=getBM(attributes=attributes, filters=filters, values="EMSY", mart=ensembl) #OK
gene4$hgnc_symbol="C11orf30"
coordinates=rbind(coordinates,gene4)
tail(coordinates,10)
coordinates = coordinates[with(coordinates, order(chromosome_name, start_position)), ]
head(coordinates)
write.table(coordinates,file="./cancer_data/ensembl_gene_list.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)
dim(coordinates)
#24332
gene_int=intersect(gene_list, coordinates$hgnc_symbol)
length(gene_int)
#21843
coordinates_int = coordinates[which(gene_int %in% coordinates$hgnc_symbol),]
dim(coordinates_int)
#21843
head(coordinates_int)

gene_lost=setdiff(gene_list,gene_int)
write.table(gene_lost,file="./cancer_data/lost_genes.txt",sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
#geni che mi perdo
length(gene_lost)
#2933

####recuperiamo i gene_lost
##trasforma percentordered genes into entrez_id usando come mappa un file CNA es: ./cancer_data/data_CNA2/data_CNA_acc_Adrenocortical_Carcinoma.txt
acc_CNA = read.table(file="./cancer_data/data_CNA2/data_CNA_acc_Adrenocortical_Carcinoma.txt",sep="\t",header=F)
results <- getBM(attributes = c("hgnc_symbol","entrezgene_id"), mart=ensembl)
entrez_id = ""
genes_still_missing = ""
f=0
nf=0
for (i in 1:length(gene_lost)){
   gene_row = subset(acc_CNA,acc_CNA$V1 == gene_lost[i])
   if((gene_row$V2)!=""){
      f=f+1
      entrez_id = c(entrez_id,gene_row$V2)
   }else{
      genes_still_missing=c(genes_still_missing,gene_lost[i])
      nf=nf+1
   }
}
genes_still_missing = genes_still_missing[-1]
entrez_id = entrez_id[-1]
length((entrez_id))
#1459
length(unique(entrez_id))
#1442
length(genes_still_missing)
#1474
#write.table(genes_still_missing,file="./cancer_data/genes_still_missing_after_entrezid.txt",sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
#1459+1474=2933
filters <- c("entrezgene_id") 

attributes <- c('chromosome_name','start_position','end_position', 'strand','hgnc_symbol','band','entrezgene_id')
coordinates_lost = getBM(attributes=attributes, filters=filters, values=entrez_id, mart=ensembl) #in values I fetch the info
genes_rescued = subset(coordinates_lost,nchar(coordinates_lost$chromosome_name)<5)
dim(genes_rescued)
head(genes_rescued)
#1212
###replace in genes_rescued in column hgnc_symbol with old names.
for (i in 1:dim(genes_rescued[1])){
  gene_row = subset(acc_CNA,acc_CNA$V2 == genes_rescued$entrezgene_id[i])
  
  genes_rescued$hgnc_symbol[i] = gene_row$V1
  
}
genes_rescued=genes_rescued[,-7]
head(genes_rescued)
genes_rescued=genes_rescued[,c(1,2,3,6,4,5)]
head(genes_rescued)
#write.table(genes_rescued,file="./cancer_data/genes_rescued_by_entrezid.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)

dim(coordinates)
#24332
coordinates = rbind(coordinates,genes_rescued)  # aggiungiamo i geni rescued by entrez id
dim(coordinates)
#25544 

genes_still_missing = read.table(file="./cancer_data/genes_still_missing_after_entrezid.txt",sep="\t",header=F)
head(genes_still_missing)
genes_rescued_1 = read.table(file="./cancer_data/genes_rescued_by_synonyms.txt",sep="\t",header=T)
head(genes_rescued_1)
genes_rescued_int = intersect(genes_still_missing$V2,genes_rescued_1$Gene.name)
length(genes_rescued_int)
#243
genes_rescued_step2 = genes_rescued_1[which(genes_rescued_1$Gene.name %in% genes_rescued_int ),]
dim(genes_rescued_step2)
#267
genes_rescued_step2 = subset(genes_rescued_step2,nchar(genes_rescued_step2$Chromosome)<5)
dim(genes_rescued_step2)
#247
duplicated(genes_rescued_step2$Gene.name)
genes_rescued_step2 = genes_rescued_step2[-which(duplicated(genes_rescued_step2$Gene.name)),]
dim(genes_rescued_step2)
#243
head(coordinates)
head(genes_rescued_step2)
genes_rescued_step2 = genes_rescued_step2[,c(1,2,3,6,4,5)]
colnames(genes_rescued_step2) = colnames(coordinates)
head(genes_rescued_step2)
#write.table(genes_rescued_step2,file="./cancer_data/genes_rescued_by_synonyms_filtered.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)

coordinates = rbind(coordinates,genes_rescued_step2)  # aggiungiamo i geni rescued by synonyms

#write.table(coordinates,file="./cancer_data/coordinates_plusgenesrescuedbyentrez_plusgenesrescuedbysynonyms.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)
coordinates = read.table(file="./coordinates_plusgenesrescuedbyentrez_plusgenesrescuedbysynonyms.txt",sep="\t",header=T)
dim(coordinates)
#[1] 25787     6

################################
################################
x=read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE,quote="")
intersect(gene_lost,x[,5]) # gia' mi perdo questi geni qui sotto 
#setdiff(onco_genelist[,1],x[,5])

ntrials=1000
for (k in 1:length(txtfls)){ # k scorre per tutti i cancri
  #randomizzare le amplificazioni dei geni in ogni paziente lungo tutto il cromosoma e ricalcolare le percentuali
  a=read.table(txtfls[k],row.names = 1,header=TRUE,sep="\t")
  name=strsplit(txtfls[k],"/")
  name=name[[1]][length(name[[1]])]
  print(name)
  a[1:5,1:5]

  dim(a)
  percentordered2=read.table(file=percentages[k],sep="\t",header=F) #qui mi prendo le percentuali gia' calcolate in passato. per fare un confronto dovrei randomizzre le 
  #precentuali all'inteno dei cromosomi e calcolarmele scrivermele e ripescarmele
  # calcolare le percentuali dei geni appartenenti ad ogni cromosoma
  # trasforma i gene symbol in percentordered2$V1 in ENSG
  filters <- c("hgnc_symbol")
  length(percentordered2$V1)
  #24776
  x=NULL
  x = merge(coordinates, percentordered2, by.x="hgnc_symbol", by.y="V1")
  head(x)
  dim(x) 
  meanpos=NULL
  for(l in 1:dim(x)[1]){meanpos[l]=mean(c(x$start_position[l], x$end_position[l]))}
  x = cbind(x,meanpos)
  #for all chromosomes
  x=subset(x,nchar(x$chromosome_name)<5) # elimina i cromosomi patch
  head(x)
  length(x$hgnc_symbol)
  # 22182
  #intse = intersect(gene_int,(x$hgnc_symbol))
  #length(intse)
  # 22176 utilizzero' solo questi geni. 
  length(gene_int)
  # 22176
  chrnames=unique(x$chromosome_name)
  #print(chrnames)
  #calcola qui sotto frequenze osservate per ogni cromosoma
  threshold_list=NULL
  for (i in 1:length(chrnames) ){ #i scorre per i cromosomi
    datax1=NULL
    x1 = subset(x,x$chromosome_name==chrnames[i]) #prendi da x solo i geni nel cromosoma corrente
    print(chrnames[i])
    x1 = x1[with(x1, order(chromosome_name, start_position)), ] #ordina le posizioni
    #create frequency of amplification and chromosome position
    datax1 = cbind(x1$meanpos,x1$V2) #V2 viene da percentordered
    datax1 = as.data.frame(datax1)
    head(datax1)
    #print(max(datax1$V2))
    png(filename=paste("./cancer_data/chromosome_threshold_amplification_2/",name,"_Chr",chrnames[i],"_freq_VS_pos.png",sep=""))
    plot(datax1,type="b",col="blue",xlab=paste("./cancer_data/chromosome_threshold_amplification_2/Chr",chrnames[i],"position",sep="") ,ylab="Amplification frequency",main=name)
    dev.off()
    #calcola qui sotto frequenze randomizzate per ogni cromosoma
    a = a[,-1] #elimina la colonna degli entrez ID
    a=as.matrix(a)
    a[1:5,1:5]
    thre =NULL
    for (t in 1:ntrials){
      a1=NULL
      a1 = a[which(row.names(a) %in% x1$hgnc_symbol),] #prendi da x solo i geni nel cromosoma corrente
      rand <- apply(a1,2,sample)
      amplification_rand = rowSums(rand==2)
      percentAmplification_rand = round(amplification_rand/ (dim(rand)[2])*100,1)
      #hist(percentAmplification, main=paste("\n",name,"\n Amplification (pink) on ",dim(a)[2]," 
      # patients with mean= ",". RANDOM \n Amplification (blue) with mean= ", sep=""), xlab="% of samples in which a 
      #     gene is amplified", ylab="n. of genes", border="black", col="pink", las=1, breaks=10)
      #par(new=TRUE)
      #hist(percentAmplification_rand, main=" ", xlab="% of samples in which a 
      #     gene is amplified", ylab="n. of genes", border="black", col="skyblue", las=1, breaks=10)
      #dev.print(pdf,paste("./Amplification_Plots/Histograms_of_" , name,".pdf", sep=""))
      #dev.off()
      ## USE THE FISHER TEST
      ## fisher.method(pp, na.rm=TRUE) 
      quant = quantile(percentAmplification_rand,  probs = c(0.1,25,50,75,99)/100)
      thre[t] = as.numeric(quant[5]) #threshold calcolata solo per il cromosoma 
    }
    threshold_list[i] = round(mean(thre),1)
    signifgenes = subset(x1, x1$V2 > threshold_list[i]) #prendi i geni strettamente maggiori della threshold
    write.table(signifgenes,file=paste("./cancer_data/chromosome_threshold_amplification_2/",name,"_Chr",chrnames[i],"_thresh_",threshold_list[i] ,"_signifgenes.txt",sep=""),sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
  }
  write.table(threshold_list,file=paste("./cancer_data/chromosome_threshold_amplification_2/",name,"_threshold_list.txt",sep=""),sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
}

#######################
#crea tabella regioni generali da usare per la comparazione con la letteratura
table = c("name",	"chromosome",	"start_amplified_region",	"end_amplified_region",	"genes",	"band",	"frequency_average",	"length","oncogenes")
significant_genes_pearson  <- list.files("./cancer_data/_amplification_2/",pattern="*_amplified_regions.txt",full.names=TRUE)
length(significant_genes_pearson)

#table has to grow
library(qpcR)
for (i in 1:length(significant_genes_pearson)){
  if(!is.null(tryCatch(read.table(file=significant_genes_pearson[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    new_line_to_add = read.table(file=significant_genes_pearson[i],sep="\t",header=TRUE,quote="")
    table = qpcR:::rbind.na(table,new_line_to_add)
  }
} 

dim(table)
write.table(table,file=paste("./cancer_data/amplified_genes/amplified_regions_table.xls",sep=""),quote=F,row.names=F,col.names=T,sep="\t")


#######################
#raccogli tutti i risultati in un'unica tabella
table=NULL
significant_genes_pearson <- list.files("./cancer_data/chromosome_threshold_amplification_2/",pattern="*_signifgenes.txt",full.names=TRUE)
length(significant_genes_pearson)
significant_genes_pearson[1:3]
number_of_genes=NULL
#table has to grow
library(qpcR)
for (i in 1:length(significant_genes_pearson)){
  if(!is.null(tryCatch(read.table(file=significant_genes_pearson[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    new_column_to_add = read.table(file=significant_genes_pearson[i],sep="\t",header=FALSE,quote="")
    name=strsplit(significant_genes_pearson[i],"/")
    name2=name[[1]][length(name[[1]])]
    name=strsplit(name2,"_")
    name=paste(name[[1]][3],sep="_")
    print(name)
    new_column_to_add = (as.matrix(new_column_to_add$V2))
    colnames(new_column_to_add) = name
    new_column_to_add= unique(new_column_to_add)
    number_of_genes[i]=length(new_column_to_add)
    table = qpcR:::cbind.na(table, new_column_to_add)
  }
} 
table=table[,-1]
table[1:3,1:30]
dim(table)
write.table(table,file=paste("./cancer_data/amplified_genes/STEP_1_chromosome_threshold_table_2.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

table=read.table(file="./amplification/amplified_genes/STEP_1_chromosome_threshold_table_2.txt",sep="\t",header=TRUE,quote="")
unionlistofgenes=Reduce(union, table)
length(unique(unionlistofgenes))
# 13864
min(number_of_genes, na.rm=TRUE)
# 1
max(number_of_genes, na.rm=TRUE)
# 1117
median(number_of_genes, na.rm=TRUE)
# 47
x=read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE,quote="")
length(intersect(x[,5], unique(unionlistofgenes)))/length(x[,5])
# 0.9866667 99%
int_genes = intersect(as.character(x[,5]), unique(unionlistofgenes))
length(int_genes)
# 74
setdiff(as.character(x[,5]), unique(unionlistofgenes))
#"IST1" 99%
fisher.test(rbind(c(74,1),c(7835,14266)),alternative="greater")
#p-value < 2.2e-16
secre_genelist <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
dim(secre_genelist)
int_genes = intersect(as.character(secre_genelist[,1]), unique(unionlistofgenes))
length(int_genes)
#301
length(int_genes)/dim(secre_genelist)[1]
#0.6168033
######################################################
####raggruppare tutti i chromosomi in uno stesso cancro

txtfls <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
txtfls
tableallchr=NULL
for (j in 1:length(txtfls)){ # cicla per ogni cancro
  name=strsplit(txtfls[j],"/")
  name2=name[[1]][length(name[[1]])]
  name3=strsplit(name2,"_")
  name=name3[[1]][3]
  print(name) #prendi cromosomi di uno stesso cancro
  tablechr=name
  if(as.character(tablechr)=="coadread"){tablechr="coad"}
  chrlist=list.files("./cancer_data/chromosome_threshold_amplification_2/",pattern=paste(tablechr,".+_signifgenes.txt",sep=""),full.names=TRUE)
  for(k in 1:length(chrlist)){
   if(!is.null(tryCatch(read.table(file=chrlist[k],sep="\t",header=TRUE,quote=""), error=function(e) NULL))){
    tablechrtemp = read.table(file=chrlist[k],sep="\t",header=F,quote="")
    tablechr = append(tablechr,unique(as.character(tablechrtemp$V2)))
   } 
  }
  tableallchr=qpcR:::cbind.na(tableallchr,tablechr)
}
head(tableallchr)
tableallchr = tableallchr[,-1]
dim(tableallchr)
write.table(tableallchr,file=paste("./cancer_data/amplified_genes/STEP_1_compacted_Chromosome_threshold_table_2.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")

table = tableallchr
###REMOVE NAs
table=as.matrix(table)
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
write.table(table,file=paste("./cancer_data/amplified_genes/STEP_1_compacted_Chromosome_threshold_table_2_nonas.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")


#######################
#STEP 2 Calculate correlations (t-test or wilcox)
CNAs <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
CNAs
expressions <- list.files("./cancer_data/expression_median/",pattern="*_expression_median.txt",full.names=TRUE)
expressions 
table=NULL
for (j in 1:length(expressions)){
 expression = read.table(expressions[j],header=TRUE,sep="\t")
 name=strsplit(expressions[j],"/")
 name2=name[[1]][length(name[[1]])]
 name=strsplit(name2,"_")
 CNA = read.table(CNAs[j],row.names = 1,header=TRUE,sep="\t")
 print("PLEASE WAIT!")
 print(name[[1]][1])
 if ((name[[1]][1])=="coadread"){name[[1]][1]="coad"}
 significant_genes <- list.files("./cancer_data/chromosome_threshold_amplification_2/",pattern=paste("data_CNA_",(name[[1]][1]),".+_signifgenes.txt",sep=""),full.names=TRUE)
 for(k in 1:23){ # k runs over chromosomes
 if(!is.null(tryCatch(read.table(significant_genes[k],header=FALSE,row.names=1,sep="\t"), error=function(e) NULL))){
  signifgenes = read.table(significant_genes[k],header=FALSE,row.names=1,sep="\t")
  gene_list=NULL
  for(i in 1:dim(signifgenes)[1]) { #search only among significant genes
    if (dim(subset(expression, as.character(expression$Hugo_Symbol) == as.character(signifgenes$V2[i])))[1] == 1){
      #prendi tutti quei pazienti in cui vale + 2 e fai il test contro quelli in cui vale 0
      CNAgene=subset(CNA, rownames(CNA) == signifgenes$V2[i])
      expressiongene=subset(expression, as.character(expression$Hugo_Symbol) == as.character(signifgenes$V2[i]))
      amplified_patients = colnames(CNAgene[,which(CNAgene==2)]) #pazienti amplificati
      amplified_expressions = expressiongene[,which(colnames(expressiongene) %in% amplified_patients)]
      not_altered_patients = colnames(CNAgene[,which(CNAgene==0)]) #pazienti diploidi
      not_altered_expressions = expressiongene[,which(colnames(expressiongene) %in% not_altered_patients)]
      if((length(not_altered_expressions)>1) & (length(amplified_expressions)>1)){
        #res_ttest = t.test(as.numeric(amplified_expressions),as.numeric(not_altered_expressions)) #performig a t.test
        res_ttest = wilcox.test(as.numeric(amplified_expressions),as.numeric(not_altered_expressions), mu=0, alternative = "greater",paired=F) #performing wilcox test
        if (!is.na(res_ttest$p.value)){
          #if ((res_ttest$p.value<0.05) & (median(as.numeric(amplified_expressions),na.rm = T) > median(as.numeric(not_altered_expressions),na.rm = T))){ #la media degli amplificati superiore a quella dei non alterati
            gene_list = append(gene_list,as.character(signifgenes$V2[i]))
            temp = c((name[[1]][1]), as.character(signifgenes$V2[i]), res_ttest$p.value, (median(as.numeric(amplified_expressions))/ median(as.numeric(not_altered_expressions))))
            table = rbind(table,temp)
          #}
        }
      }
    }
  }
  if(!is.null(gene_list)){write.table(gene_list,file=paste("./cancer_data/amplified_genes/gene_list_Wilcoxon_Chr_2/",name[[1]][1],"_Chr",signifgenes$V3[1],"_genelist_wilcoxtest2.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)}
 }
 }
}
colnames(table) = c( "Cancer","Gene","P-value","Fold Change over control")
head(table)
write.table(table,file="./cancer_data/amplified_genes/STEP2_amplified_summary_total_2.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)

##############
### p value adjusted 
table = read.table(file="./cancer_data/amplified_genes/STEP2_amplified_summary_total_2.txt",sep="\t",header=TRUE)
P.value.adjusted = p.adjust(table$P.value, "BH")
newtable = cbind(table, P.value.adjusted)
write.table(newtable,file="./cancer_data/amplified_genes/STEP2_amplified_summary_total_pvalue_adjusted_2.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)


#######################
#raccogli tutti i risultati in un'unica tabella

newtable = read.table(file="./cancer_data/amplified_genes/STEP2_amplified_summary_total_pvalue_adjusted_2.txt",sep="\t", header=TRUE)
head(newtable)
chrnames =  as.character(unique(newtable$Cancer))
#table has to grow
library(qpcR)
table = NULL
for (i in 1:length(chrnames)){
    print(chrnames[i])
    newtable_cancer = subset(newtable,newtable$Cancer==chrnames[i])
    newtable_cancer_pvaladjusted = subset(newtable_cancer, newtable_cancer$P.value.adjusted<0.05)
    newtable_cancer_pvaladjusted_FC = subset(newtable_cancer_pvaladjusted, !is.na(newtable_cancer_pvaladjusted$Fold.Change.over.control)) #eliminate Fold Change = 0/0
    new_column_to_add = (as.matrix(newtable_cancer_pvaladjusted_FC$Gene))
    colnames(new_column_to_add) = (chrnames[i])
    new_column_to_add= unique(new_column_to_add)
    table = qpcR:::cbind.na(table, new_column_to_add)
} 
table[1:5,1:5]
table=table[,-1]
table[1:5,1:25]
dim(table)
write.table(table,file=paste("./cancer_data/amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

table_adjusted = read.table(file="./cancer_data/amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep="\t",header=TRUE,quote="")
unionlistofgenes = Reduce(union, table_adjusted)
head(unionlistofgenes)
length(unique(unionlistofgenes))
# 7739 wilcoxon

########################################################## Non piu' necessario!!!
#Eliminate genes # genes_cancer - genes_adjusted_cancer
#crea tabella delle differenze cancro per carcro
difftable=NULL
for (i in 1:length(chrnames)){
  print(chrnames[i])
  genes_adjusted_cancer = unique(as.character(table_adjusted[,colnames(table_adjusted)==chrnames[i]]))
  genes_cancer = unique(as.character(table[,colnames(table)==chrnames[i]]))
  print(length(genes_cancer)-length(genes_adjusted_cancer))
  new_column_to_add = as.matrix(unique(setdiff(genes_cancer,genes_adjusted_cancer))) # genes_cancer - genes_adjusted_cancer
  print(length(new_column_to_add))
  colnames(new_column_to_add) = (chrnames[i])
  difftable = qpcR:::cbind.na(difftable, new_column_to_add)
}
difftable=difftable[,-1]
write.table(difftable,file=paste("./cancer_data/amplified_genes/NEW_STEP_2_genes_to_eliminate_table.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")
#######################################################

x = read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE,quote="")
length(intersect(x[,5], unique(unionlistofgenes)))/length(x[,5])
#0.9066667 correlations (wilcox)
int_genes = intersect(as.character(x[,5]), unique(unionlistofgenes))
length(int_genes)
#68
setdiff(as.character(x[,5]), unique(unionlistofgenes))
#  "CKS1B|ENSG00000173207.8" "MAP3K5"                  "SHH"                     "C8orf4"                  "C11orf30"                "IST1"                    "AR"                     
fisher.test(rbind(c(69,6),c(7835,14266)),alternative="greater")
#p-value < 2.2e-16
secre_genelist <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
dim(secre_genelist)
int_genes = intersect(as.character(secre_genelist[,1]), unique(unionlistofgenes))
length(int_genes)
# 241
length(int_genes)/493
# 0.4888438

#####################################
####Other correlations
CNAs <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
CNAs
expressions <- list.files("./cancer_data/expression_median/",pattern="*_expression_median.txt",full.names=TRUE)
expressions 
for (j in 1:){
  expression = read.table(expressions[j],header=TRUE,sep="\t")
  name=strsplit(expressions[j],"/")
  name2=name[[1]][length(name[[1]])]
  name=strsplit(name2,"_")
  linear_CNA = read.table(linear_CNAs[j],row.names = 1,header=TRUE,sep="\t")
  print("PLEASE WAIT!")
  print(name[[1]][1])
  if ((name[[1]][1])=="coadread"){name[[1]][1]="coad"}
  significant_genes <- list.files("./cancer_data/chromosome_threshold/",pattern=paste("data_CNA_",(name[[1]][1]),".+_signifgenes.txt",sep=""),full.names=TRUE)
  for(k in 1:23){ #hai sia i nuovi che i vecchi threshold
    # j=24
    # k=31
    if(!is.null(tryCatch(read.table(significant_genes[k],header=FALSE,row.names=1,sep="\t"), error=function(e) NULL))){
    signifgenes = read.table(significant_genes[k],header=FALSE,row.names=1,sep="\t")
    genelist=NULL
    genecorr=NULL
    s=0
    for(i in 1:dim(signifgenes)[1]) { #search only among significant genes
     gene_expression = subset(expression, expression$Hugo_Symbol == as.character(signifgenes$V2[i]) ) ##seleziona l'espressione del gene corrente
     if(dim(subset(expression, expression$Hugo_Symbol == as.character(signifgenes$V2[i])))[1]>0){
      #plot(1:(dim(gene_expression)[2]-2),as.numeric(gene_expression[,3:dim(gene_expression)[2]]),main=rownames(signifgenes[2,]), type="l",ylab="mRNA expression",xlab="patients")
      CNA = t(linear_CNA[which( row.names(linear_CNA) == as.character(signifgenes$V2[i])),-1])
      expr = t(gene_expression[,3:dim(gene_expression)[2]])
      CNA2=cbind(colnames(linear_CNA)[-1],CNA)
      expr2=cbind(colnames(gene_expression[,3:dim(gene_expression)[2]]),expr)
      colnames(expr2)=c("id","expr values")
      colnames(CNA2)=c("id","linear CNA values")
      tot = merge(CNA2, expr2, by.x = "id", by.y = "id", all=FALSE)
      tot2=tot[,2:3]
      rownames(tot2)=tot[,1]
      tot3=as.matrix(tot2)
      #print(head(tot3))  # controlla la loro espressione e calcola la pearson
      correlation = cor(as.numeric(tot3[,1]),as.numeric(tot3[,2]), method="pearson")
      #plot(as.numeric(tot3[,1]),as.numeric(tot3[,2]),type="p",ylab="mRNA expression",xlab="CNA",main=paste((rownames(signifgenes)[i]),round(correlation,2),sep=" "))
      print(correlation)
      if( (correlation  >= 0.4) & !is.na(correlation) ){
        s=s+1
        genelist[s] = as.character(signifgenes$V2[i])
        genecorr[s] = round(correlation,3)
        #print(genelist)
        #print(round(correlation,3))
      }
     }
    }
  }
  genelist=cbind(genelist,genecorr)
  print(s)
  print(" significant genes found")
  print(genelist)
  write.table(genelist,file=paste("./cancer_data/amplified_genes/gene_list_pearson_Chr/",name[[1]][1],"_Chr",signifgenes$V3[1],"_genelist_with_pearsonleast0.4.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
  }
}  

#raccogli tutti i risultati in un'unica tabella

significant_genes_pearson  <- list.files("./cancer_data/amplified_genes/gene_list_Pearson_Chr/",pattern="*_genelist_with_Pearsonatleast0.4.txt",full.names=TRUE)
length(significant_genes_pearson)
expressions <- list.files("./cancer_data/expression_median/",pattern="*_expression_median.txt",full.names=TRUE)
expressions 
linear_CNAs <- list.files("./cancer_data/data_linear_CNA/",pattern="*_data_linear_CNA.txt",full.names=TRUE)
linear_CNAs
#table has to grow
library(qpcR)
table=NULL
for (i in 1:length(significant_genes_pearson)){
  if(!is.null(tryCatch(read.table(file=significant_genes_pearson[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    new_column_to_add = read.table(file=significant_genes_pearson[i],sep="\t",header=TRUE,quote="")
    name=strsplit(significant_genes_pearson[i],"/")
    name2=name[[1]][length(name[[1]])]
    name=strsplit(name2,"_")
    name=paste(name[[1]][1],name[[1]][2],sep="_")
    print(name)
    new_column_to_add = as.character(new_column_to_add$genelist)
    new_column_to_add = append(new_column_to_add,name,0)
    new_column_to_add = unique(new_column_to_add)
    table = qpcR:::cbind.na(table, new_column_to_add)
  }
} 
table=table[,-1]
table[1:5,1:15]
dim(table)
write.table(table,file=paste("./cancer_data/amplified_genes/chromosome_Pearson_table_threshold_99.xls",sep=""),quote=F,row.names=F,col.names=F,sep="\t")
table=read.table(file="./cancer_data/amplified_genes/chromosome_Pearson_table_threshold_99.xls",sep="\t",header=TRUE,quote="")

unionlistofgenes=Reduce(union, table)
head(unionlistofgenes)
length(unique(unionlistofgenes))
#4861 Pearson with Threshold 99%
#4110 Spearman with Threshold 99%
x=read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE,quote="")
length(intersect(x[,5], unique(unionlistofgenes)))/length(x[,5])
#0.7532468 Pearson with Threshold 99%
#0.6623377 Spearman with Threshold 99%
int_genes = intersect(as.character(x[,5]), unique(unionlistofgenes))
int_genes

####raggruppare tutti i chromosomi in uno stesso cancro

txtfls <- list.files("./cancer_data/data_linear_CNA/",pattern="$",full.names=TRUE)
txtfls
tableallchr=NULL
for (j in 1:length(txtfls)){ # cicla per ogni cancro
  name=strsplit(txtfls[j],"/")
  name2=name[[1]][length(name[[1]])]
  name3=strsplit(name2,"_")
  name=name3[[1]][1]
  print(name) #prendi cromosomi di uno stesso cancro
  chrlist=list.files("./cancer_data/amplified_genes/gene_list_Pearson_Chr/",pattern=paste(name,".+_genelist_with_Pearsonatleast0.4.txt",sep=""),full.names=TRUE)
  tablechr=name
  for(k in 1:length(chrlist)){
    if(!is.null(tryCatch(read.table(file=chrlist[k],sep="\t",header=TRUE,quote=""), error=function(e) NULL))){
      tablechrtemp = read.table(file=chrlist[k],sep="\t",header=T,quote="")
      tablechr = append(tablechr,as.character(tablechrtemp$genelist))
    } 
  }
  print(tablechr)
  tableallchr=qpcR:::cbind.na(tableallchr,tablechr)
  print(head(tableallchr))
  print(tail(tableallchr))
}
head(tableallchr)
tableallchr = tableallchr[,-1]
head(tableallchr)
write.table(tableallchr,file=paste("./cancer_data/amplified_genes/NEW_STEP_2_compacted_chromosome_Pearson_table.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")
#############################################

################ STEP 3
################
###survival on single gene with patients divided by cancer stage in the chromosome based method!

library(TCGAbiolinks)
library(SummarizedExperiment)
library(survival)
library(survminer)
library(ggplot2)
library(gridExtra)
library(survMisc)

pval_fun <- function (data, clusterCol = NULL, legend = "Legend", labels = NULL, 
                      risk.table = TRUE, xlim = NULL, main = "Kaplan-Meier Overall Survival Curves", 
                      ylab = "Probability of survival", xlab = "Time since diagnosis (days)", 
                      filename = "survival.pdf", color = NULL, height = 8, width = 12, 
                      dpi = 300, pvalue = TRUE, conf.int = TRUE, ...) 
{
  .e <- environment()
  if (!all(c("vital_status", "days_to_death", "days_to_last_follow_up") %in% 
           colnames(data))) 
    stop("Columns vital_status, days_to_death and  days_to_last_follow_up should be in data frame")
  if (is.null(color)) {
    color <- rainbow(length(unique(data[, clusterCol])))
  }
  group <- NULL
  if (is.null(clusterCol)) {
    stop("Please provide the clusterCol argument")
  }else if (length(unique(data[, clusterCol])) == 1) {
    stop(paste0("Sorry, but I'm expecting at least two groups\n", 
                "  Only this group found: ", unique(data[, clusterCol])))
  }
  notDead <- is.na(data$days_to_death)
  if (any(notDead == TRUE)) {
    data[notDead, "days_to_death"] <- data[notDead, "days_to_last_follow_up"]
  }
  if (length(data[which((data[, "days_to_death"] < 0) == T), 
                  "sample"]) > 0 & "sample" %in% colnames(data)) {
    message("Incosistencies in the data were found. The following samples have a negative days_to_death value:")
    message(paste(data[which((data[, "days_to_death"] < 0) == 
                               T), "sample"], collapse = ", "))
  }
  if (any(is.na(data[, "days_to_death"])) & "sample" %in% colnames(data)) {
    message("Incosistencies in the data were found. The following samples have a NA days_to_death value:")
    message(paste(data[is.na(data[, "days_to_death"]), "sample"], 
                  collapse = ", "))
  }
  data$s <- grepl("dead|deceased", data$vital_status, ignore.case = TRUE)
  data$type <- as.factor(data[, clusterCol])
  data <- data[, c("days_to_death", "s", "type")]
  f.m <- formula(Surv(as.numeric(data$days_to_death), event = data$s) ~ 
                   data$type)
  result = coxph(f.m, data=data)
  if (is.na(result$coefficients)){return(c(1,0))}else{
    hr = round(coef(summary(result))[,2],3)
    fit <- do.call(survfit, list(formula = f.m, data = data))
    oncoactivity=0
    if( hr < 1 ){oncoactivity = 1}else{oncoactivity = 0} # HERE hr < 1
    return(c(surv_pvalue(fit)$pval,oncoactivity))
  }
  
}

###START the survival on single gene with patients divided by cancer stage in the chromosome based method!

txtfls <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
txtfls
tabl=read.table(file=paste("./cancer_data/amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),header=T,sep="\t")
for(i in 1:dim(tabl)[2]){ 
  #table = read.table(file=reduced_bands_positions[i],sep="\t",header=FALSE,quote="")
  name=colnames(tabl)[i]
  print(name)
  table=tabl[,i]
  table=Reduce(union, table)
  a=read.table(txtfls[i],row.names = 1,header=TRUE,sep="\t",quote="")
  a = a[,-1] #elimina la colonna degli entrez ID
  #download cancer data from web
  clin <- GDCquery_clinic(paste("TCGA-",toupper(name),sep=""), "clinical")
  dim(clin)
  clin[1:15,1:10]
  print("total number of patients")
  print(length(clin$submitter_id))
  clin_early_stage=NULL
  clin_late_stage=NULL
  clin_notreported=NULL
  for(t in 1:dim(clin)[1]){
    clin_early_stage = subset(clin, (clin$tumor_stage =="stage i" |clin$tumor_stage=="stage ii" |
                                      clin$tumor_stage=="stage ia"|clin$tumor_stage=="stage iia"|
                                      clin$tumor_stage=="stage ib"|clin$tumor_stage=="stage iib"|
                                      clin$tumor_stage=="stage ic"|clin$tumor_stage=="stage iic"))
    clin_late_stage =  subset(clin,(clin$tumor_stage=="stage iii"|clin$tumor_stage=="stage iiia"|clin$tumor_stage=="stage iiib"| clin$tumor_stage=="stage iiic"|
                                    clin$tumor_stage== "stage iv"|clin$tumor_stage=="stage iva"|clin$tumor_stage=="stage ivb"|clin$tumor_stage=="stage ivc"))
    clin_notreported = subset(clin,clin$tumor_stage=="stage x"|clin$tumor_stage=="not reported"|is.na(clin$tumor_stage)) # cos'e' stage x e NA?
  }
  print("patients divided in three groups early and late stage:")
  print(dim(clin_early_stage)[1])
  print(dim(clin_late_stage)[1])
  print(dim(clin_notreported)[1])
  
  if(dim(clin_notreported)[1] > 2){
    listgenes_notreported_discarded_not_significant = NULL #crea questa lista e stampala
    listgenes_notreported_discarded_better_prognosis = NULL #crea questa lista e stampala
    listgenes_notreported_discarded_few_patients = NULL #crea questa lista e stampala
    listgenes_notreported = NULL #crea questa lista e stampala
    patients = strsplit(as.character(clin_notreported$submitter_id),"-")
    patientnames=NULL
    # scrivi i nomi col punto . invece che col -
    for (p in 1:length(patients)){
      patientnames[p] = paste("TCGA",patients[[p]][2],patients[[p]][3],"01",sep=".")
    }
    patientnames
    if(is.na(table[length(table)])){table=table[-length(table)]} #elimina il na finale
    for(k in 1:length(table)){ #cicla su tutti i geni
      print(table[k])
      #"SF3B4" dividi i pazienti in 2 gruppi. quelli in cui SF3B4 e' amplificato e quelli in cui non lo sono. cerca in a
      gene_patients = subset(a,as.character(rownames(a))==table[k]) #gene_patients = subset(a,as.character(rownames(a))=="LURAP1L")
      indeces = which(gene_patients==2) # PRENDI INDICI DEI PAZIENTI AMPLIFICATI
      amplif_gene_patiens = colnames(gene_patients)[indeces] # prendi i pazienti in cui il gene corrente e' amplificato
      amplif_gene_patiens = intersect(amplif_gene_patiens,patientnames) #interseca quei pazienti in cui il gene e' amplificato con i pazienti in notreported
      #if (length(amplif_gene_patiens)>4){ # almeno 5 pazienti amplificati per bilanciare il test conto il gruppo di pazienti non amplificati
        indecesamplipatient=NULL
        for (s in 1:length(amplif_gene_patiens)){
          if(length((which(patientnames==amplif_gene_patiens[s])))==1){
            indecesamplipatient[s]=which(patientnames==amplif_gene_patiens[s])
          }   
        }
        indecesamplipatient
        amplified=NULL
        if(!is.null(indecesamplipatient)){
          amplified = rep("NOT AMPLIFIED",dim(clin_notreported)[1])
          amplified[indecesamplipatient]="AMPLIFIED"
          clinic=clin_notreported
          clinic=cbind(clinic,amplified) #unisci la colonna amplified per dividere i 2 gruppi di pazienti
          pvalue = NULL
          if(length(which(clinic$amplified=="AMPLIFIED"))>4 & length(which(clinic$amplified=="NOT AMPLIFIED"))>4){ # controllo utile ma superfluo per le amplifications
             pvalue = pval_fun(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                            main = "Kaplan-Meier Overall Survival Curves",
                            ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                            filename = "survival.pdf",color = c("red","green"),dpi = 300, conf.int = TRUE)
             if(pvalue[1] < 0.05){ # controllo significativita'
                if((pvalue[2]==1)){ # controllo worse prognosis
                    temp1 = cbind(name,table[k],pvalue[1],"worse prognosis","notreported",length(amplif_gene_patiens))
                    listgenes_notreported = rbind(listgenes_notreported,temp1)
                    TCGAanalyze_survival(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                         title = "Kaplan-Meier Overall Survival Curves",
                                         ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                         filename = paste("./cancer_data/survivalplots_chr_wilcox/survival_notreported_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
                }else{
                   print("HR positive! Better prognosis in those patients in which the current gene is amplified.")
                   temp2 = cbind(name,table[k],pvalue[1],"HR positive! Better prognosis","notreported",length(amplif_gene_patiens))
                   listgenes_notreported_discarded_better_prognosis = rbind(listgenes_notreported_discarded_better_prognosis,temp2)
                   TCGAanalyze_survival(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                        title = "Kaplan-Meier Overall Survival Curves",
                                        ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                        filename = paste("./cancer_data/survivalplots_chr_wilcox/survival_notreported_HR_positive_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
                }
             }else{
                  print("pvalue >= 0.5! not significant!")
                  temp3 = cbind(name,table[k],pvalue[1],"not significant","notreported",length(amplif_gene_patiens))
                  listgenes_notreported_discarded_not_significant = rbind(listgenes_notreported_discarded_not_significant,temp3)
             }
          }else{
            print("Few patients!")
            temp4 = cbind(name,table[k],pvalue[1],"few patients","notreported",length(amplif_gene_patiens))
            listgenes_notreported_discarded_few_patients = rbind(listgenes_notreported_discarded_few_patients,temp4)
          }
        }
    } #fine ciclo su tutti i geni
    print(listgenes_notreported)
    write.table(listgenes_notreported,                                  file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_notreported.txt",                                 sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_notreported_discarded_better_prognosis,       file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_notreported_discarded_better_prognosis.txt",      sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_notreported_discarded_not_significant,        file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_notreported_discarded_not_significant.txt",       sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_notreported_discarded_few_patients, file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_notreported_discarded_few_patients.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
  }
  
  if(dim(clin_early_stage)[1]>2){
    listgenes_early_stage_discarded_not_significant = NULL #crea questa lista e stampala
    listgenes_early_stage_discarded_better_prognosis = NULL #crea questa lista e stampala
    listgenes_early_stage_discarded_few_patients = NULL #crea questa lista e stampala
    listgenes_early_stage = NULL #crea questa lista e stampala
    patients = strsplit(as.character(clin_early_stage$submitter_id),"-")
    patientnames=NULL
    # scrivi i nomi col punto . invece che col -
    for (p in 1:length(patients)){
      patientnames[p] = paste("TCGA",patients[[p]][2],patients[[p]][3],"01",sep=".")
    }
    patientnames
    if(is.na(table[length(table)])){table=table[-length(table)]} #elimina il na finale
    for(k in 1:length(table)){ #cicla su tutti i geni
      print(table[k])
      #"SF3B4" dividi i pazienti in 2 gruppi. quelli in cui SF3B4 e' amplificato e quelli in cui non lo sono. cerca in a
      gene_patients = subset(a,as.character(rownames(a))==table[k]) #gene_patients = subset(a,as.character(rownames(a))=="LURAP1L")
      indeces = which(gene_patients==2) # PRENDI INDICI DEI PAZIENTI AMPLIFICATI
      amplif_gene_patiens = colnames(gene_patients)[indeces] # prendi i pazienti in cui il gene corrente e' amplificato
      amplif_gene_patiens = intersect(amplif_gene_patiens,patientnames) #interseca quei pazienti in cui il gene e' amplificato con i pazienti in early_stage
      #if (length(amplif_gene_patiens)>4){ # almeno 5 pazienti amplificati per bilanciare il test conto il gruppo di pazienti non amplificati
      indecesamplipatient=NULL
      for (s in 1:length(amplif_gene_patiens)){
        if(length((which(patientnames==amplif_gene_patiens[s])))==1){
          indecesamplipatient[s]=which(patientnames==amplif_gene_patiens[s])
        }   
      }
      indecesamplipatient
      amplified=NULL
      if(!is.null(indecesamplipatient)){
        amplified = rep("NOT AMPLIFIED",dim(clin_early_stage)[1])
        amplified[indecesamplipatient]="AMPLIFIED"
        clinic=clin_early_stage
        clinic=cbind(clinic,amplified) #unisci la colonna amplified per dividere i 2 gruppi di pazienti
        pvalue = NULL
        if(length(which(clinic$amplified=="AMPLIFIED"))>4 & length(which(clinic$amplified=="NOT AMPLIFIED"))>4){ # controllo utile ma superfluo per le amplifications
          pvalue = pval_fun(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                            main = "Kaplan-Meier Overall Survival Curves",
                            ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                            filename = "survival.pdf",color = c("red","green"),dpi = 300, conf.int = TRUE)
          if(pvalue[1] < 0.05){ # controllo significativita'
            if((pvalue[2]==1)){ # controllo worse prognosis
              temp1 = cbind(name,table[k],pvalue[1],"worse prognosis","early stage",length(amplif_gene_patiens))
              listgenes_early_stage = rbind(listgenes_early_stage,temp1)
              TCGAanalyze_survival(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox/survival_early_stage_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }else{
              print("HR positive! Better prognosis in those patients in which the current gene is amplified.")
              temp2 = cbind(name,table[k],pvalue[1],"HR positive! Better prognosis","early stage",length(amplif_gene_patiens))
              listgenes_early_stage_discarded_better_prognosis = rbind(listgenes_early_stage_discarded_better_prognosis,temp2)
              TCGAanalyze_survival(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox/survival_early_stage_HR_positive_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }
          }else{
            print("pvalue >=0.5! not significant!")
            temp3 = cbind(name,table[k],pvalue[1],"not significant","early stage",length(amplif_gene_patiens))
            listgenes_early_stage_discarded_not_significant = rbind(listgenes_early_stage_discarded_not_significant,temp3)
          }
        }else{
          print("Few amplified patients!")
          temp4 = cbind(name,table[k],pvalue[1],"few patients","early stage",length(amplif_gene_patiens))
          listgenes_early_stage_discarded_few_patients = rbind(listgenes_early_stage_discarded_few_patients,temp4)
        }
      }
    } #fine ciclo su tutti i geni
    print(listgenes_early_stage)
    write.table(listgenes_early_stage,                                  file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_early_stage.txt",                                 sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_early_stage_discarded_better_prognosis,       file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_early_stage_discarded_better_prognosis.txt",      sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_early_stage_discarded_not_significant,        file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_early_stage_discarded_not_significant.txt",       sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_early_stage_discarded_few_patients, file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_early_stage_discarded_few_patients.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
  }
  
  if(dim(clin_late_stage)[1]>2){  
    listgenes_late_stage_discarded_not_significant = NULL #crea questa lista e stampala
    listgenes_late_stage_discarded_better_prognosis = NULL #crea questa lista e stampala
    listgenes_late_stage_discarded_few_patients = NULL #crea questa lista e stampala
    listgenes_late_stage = NULL #crea questa lista e stampala
    patients = strsplit(as.character(clin_late_stage$submitter_id),"-")
    patientnames=NULL
    # scrivi i nomi col punto . invece che col -
    for (p in 1:length(patients)){
      patientnames[p] = paste("TCGA",patients[[p]][2],patients[[p]][3],"01",sep=".")
    }
    patientnames
    if(is.na(table[length(table)])){table=table[-length(table)]} #elimina il na finale
    for(k in 1:length(table)){ #cicla su tutti i geni
      print(table[k])
      #"SF3B4" dividi i pazienti in 2 gruppi. quelli in cui SF3B4 e' amplificato e quelli in cui non lo sono. cerca in a
      gene_patients = subset(a,as.character(rownames(a))==table[k]) #gene_patients = subset(a,as.character(rownames(a))=="LURAP1L")
      indeces = which(gene_patients==2) # PRENDI INDICI DEI PAZIENTI AMPLIFICATI
      amplif_gene_patiens = colnames(gene_patients)[indeces] # prendi i pazienti in cui il gene corrente e' amplificato
      amplif_gene_patiens = intersect(amplif_gene_patiens,patientnames) #interseca quei pazienti in cui il gene e' amplificato con i pazienti in late_stage
      #if (length(amplif_gene_patiens)>4){ # almeno 5 pazienti amplificati per bilanciare il test conto il gruppo di pazienti non amplificati
      indecesamplipatient=NULL
      for (s in 1:length(amplif_gene_patiens)){
        if(length((which(patientnames==amplif_gene_patiens[s])))==1){
          indecesamplipatient[s]=which(patientnames==amplif_gene_patiens[s])
        }   
      }
      indecesamplipatient
      amplified=NULL
      if(!is.null(indecesamplipatient)){
        amplified = rep("NOT AMPLIFIED",dim(clin_late_stage)[1])
        amplified[indecesamplipatient]="AMPLIFIED"
        clinic=clin_late_stage
        clinic=cbind(clinic,amplified) #unisci la colonna amplified per dividere i 2 gruppi di pazienti
        pvalue = NULL
        if(length(which(clinic$amplified=="AMPLIFIED"))>4 & length(which(clinic$amplified=="NOT AMPLIFIED"))>4){ # controllo utile ma superfluo per le amplifications
          pvalue = pval_fun(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                            main = "Kaplan-Meier Overall Survival Curves",
                            ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                            filename = "survival.pdf",color = c("red","green"),dpi = 300, conf.int = TRUE)
          if(pvalue[1] < 0.05){ # controllo significativita'
            if((pvalue[2]==1)){ # controllo worse prognosis
              temp1 = cbind(name,table[k],pvalue[1],"worse prognosis","late stage",length(amplif_gene_patiens))
              listgenes_late_stage = rbind(listgenes_late_stage,temp1)
              TCGAanalyze_survival(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox/survival_late_stage_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }else{
              print("HR positive! Better prognosis in those patients in which the current gene is amplified.")
              temp2 = cbind(name,table[k],pvalue[1],"HR positive! Better prognosis","late stage",length(amplif_gene_patiens))
              listgenes_late_stage_discarded_better_prognosis = rbind(listgenes_late_stage_discarded_better_prognosis,temp2)
              TCGAanalyze_survival(data=clinic,clusterCol ="amplified",height = 10, width=10, pvalue=TRUE,risk.table = TRUE, 
                                   title = "Kaplan-Meier Overall Survival Curves",
                                   ylab = "Probability of survival", xlab = "Time since diagnosis (days)",
                                   filename = paste("./cancer_data/survivalplots_chr_wilcox/survival_late_stage_HR_positive_",name,"_",table[k],".pdf",sep=""),color = c("red","green"),dpi = 300, conf.int = TRUE)
            }
          }else{
            print("pvalue >= 0.5! not significant!")
            temp3 = cbind(name,table[k],pvalue[1],"not significant","late stage",length(amplif_gene_patiens))
            listgenes_late_stage_discarded_not_significant = rbind(listgenes_late_stage_discarded_not_significant,temp3)
          }
        }else{
          print("Few patients!")
          temp4 = cbind(name,table[k],pvalue[1],"few patients","late stage",length(amplif_gene_patiens))
          listgenes_late_stage_discarded_few_patients = rbind(listgenes_late_stage_discarded_few_patients,temp4)
        }
      }
    } #fine ciclo su tutti i geni
    print(listgenes_late_stage)
    write.table(listgenes_late_stage,                                  file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_late_stage.txt",                                 sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_late_stage_discarded_better_prognosis,       file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_late_stage_discarded_better_prognosis.txt",      sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_late_stage_discarded_not_significant,        file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_late_stage_discarded_not_significant.txt",       sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    write.table(listgenes_late_stage_discarded_few_patients, file=paste("./cancer_data/survivalplots_chr_wilcox/",name,"_survival_listgenes_late_stage_discarded_few_patients.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
  }
  
}


################
#######################
#create a compact table

survival_listgenes <- list.files("./cancer_data/survivalplots_chr_wilcox/",pattern=paste("*_survival_listgenes_",sep=""),full.names=TRUE)
survival_listgenes

#table has to grow
table=data.frame(A="Cancer", B="Gene", Pvalue=1, D="Survival_Outcome",	E="Stage", Number_Of_patients_with_CNA=0)
library(qpcR)
for (i in 1:length(survival_listgenes)){
   if(!is.null(tryCatch(read.table(file=survival_listgenes[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
      new_column_to_add = read.table(file=survival_listgenes[i],sep="\t",header=TRUE,quote="")
      if(dim(new_column_to_add)[2]==5){ #se manca la colonna aggiungi p-value not available
         new_column_to_add = cbind(cbind(new_column_to_add[,1:2],rep(NA,dim(new_column_to_add)[1])),new_column_to_add[,3:5]) 
      }
      table = qpcR:::rbind.na(table, new_column_to_add)
   }
}
head(table)
table=table[-1,]
colnames(table) = c("Cancer",	"Gene", "P-value",	"Survival_Outcome",	"Stage",	"Number_Of_patients_with_CNA")
head(table)
dim(table)
write.table(table,file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_3.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

#######################
#create a compact table by cancer name

stage="late_stage"
survival_listgenes <- list.files("./cancer_data/survivalplots_chr_wilcox/",pattern=paste("*_survival_listgenes_",stage,".txt",sep=""),full.names=TRUE)
survival_listgenes
#table has to grow
table=NULL
library(qpcR)
for (i in 1:length(survival_listgenes)){
  if(!is.null(tryCatch(read.table(file=survival_listgenes[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    new_column_to_add = read.table(file=survival_listgenes[i],sep="\t",header=TRUE,quote="")
    newcolumn=c(as.character(new_column_to_add[1,1]),as.character(new_column_to_add[,2]))
    table = qpcR:::cbind.na(table, newcolumn)
  }
}
head(table)
table=table[,-1]
head(table)
dim(table)
write.table(table,file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_",stage,"_onlygenes3.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

##########Remove NAs

stage="notreported"
table = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_",stage,"_onlygenes3.txt",sep=""),header=TRUE,sep="\t",stringsAsFactors=FALSE)
###REMOVE NAs
table=as.matrix(table)
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_",stage,"_onlygenes3.txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")

notreported_unionlistofgenes = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_notreported_onlygenes3.txt",sep=""),header=TRUE,sep="\t")
notreported_unionlistofgenes = Reduce(union, notreported_unionlistofgenes)
length(notreported_unionlistofgenes)-1
#1292

early_unionlistofgenes = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_early_stage_onlygenes3.txt",sep=""),header=TRUE,sep="\t")
early_unionlistofgenes = Reduce(union, early_unionlistofgenes)
length(early_unionlistofgenes)-1
#822

late_unionlistofgenes =  read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_late_stage_onlygenes3.txt",sep=""),header=TRUE,sep="\t")
late_unionlistofgenes = Reduce(union, late_unionlistofgenes )
length(late_unionlistofgenes)-1
#406

unionlistofgenes = unique(union(late_unionlistofgenes, union(notreported_unionlistofgenes, early_unionlistofgenes)))
length(unionlistofgenes)-1
#2128

x=read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE,quote="")
(length(intersect(x[,5], unionlistofgenes))-1)/(length(x[,5])-2)
38/75
#0.506666

genes = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_3.txt",sep=""),header=TRUE,sep="\t")
genes = subset(genes,genes$Survival_Outcome=="worse prognosis")
early_genes = subset(genes,genes$Stage=="early stage")
length(unique(as.character(early_genes$Gene)))
#822
late_genes = subset(genes,genes$Stage=="late stage")
length(unique(as.character(late_genes$Gene)))
#406
genes = read.table(file=paste("./cancer_data/amplified_genes/NEW_STEP_3_amplified_survival_2.txt",sep=""),header=TRUE,sep="\t")
genes = subset(genes,genes$Survival_Outcome=="worse prognosis")
notreported_genes = subset(genes,genes$Stage=="notreported")
length(unique(as.character(notreported_genes$Gene)))
#1292

############################################################################
####barplots

reduced_bands <- list.files("./cancer_data/amplified_genes/",pattern=paste("STEP_2_*",sep=""),full.names=TRUE)
reduced_bands
par(mfrow=c(2,1))
i = 2

  reduced_bands_positions = read.table(file=reduced_bands[i],header=TRUE,sep="\t",quote = "")
  name=strsplit(reduced_bands[i],"/")
  name2=name[[1]][length(name[[1]])]
  name=strsplit(name2,"_")
  stage=strsplit(name2,"_")
  stage=name[[1]][7]
  name=name[[1]][2]
  print(name)
  values = NULL
  for (j in 1:dim(reduced_bands_positions)[2]){
    values[j] = length(unique(reduced_bands_positions[,j]))-1
  }
  
  bp = barplot(values,main=paste("Number of genes after step ",name," in each cancer",sep=""),
  names.arg=colnames(reduced_bands_positions),ylim=c(0,7000), ylab="percentages", border="black", col="yellow", las=2,cex.names=1.2)
  
  dev.print(pdf,paste("./cancer_data/amplified_genes/step_1_2_gene_reduction.pdf",sep=""))
  dev.off()
  
#########################
#Look for which genes are in the Glycogene list
  secre_genelist <- read.table(file="./glycogenes.txt",sep="\t",header=TRUE)
  dim(secre_genelist)
  survival_genes_table <- read.table(file="./cancer_data/amplified_genes/STEP_3_amplified_survival_late_stage_onlygenes3.txt",sep="\t",header=TRUE,quote="",stringsAsFactors=FALSE)
  dim(survival_genes_table)
  head(survival_genes_table)
  colnamessurv = colnames(survival_genes_table)
  colnamessurv
  unionlistofgenes=Reduce(union, survival_genes_table)
  length(unionlistofgenes)
  #head(unionlistofgenes)
  table=NULL
  table = intersect(secre_genelist[[1]],survival_genes_table[,1]) 
  for (k in 2:dim(survival_genes_table)[2]){
    gene_in_intersection2 = intersect(secre_genelist[[1]],survival_genes_table[,k]) # intersection between the reduced coordinates and secre genes only!!!!!!
    print(colnames(survival_genes_table)[k])
    print(length(gene_in_intersection2)/length(survival_genes_table[,k])*100)
    table = qpcR:::cbind.na(table, gene_in_intersection2)
  }  
  colnames(table)=colnamessurv
  table
  
  ###REMOVE NAs
  for(j in 1:dim(table)[2] ){
    for(i in 1:dim(table)[1] ){
      if(is.na(table[i,j])){
        table[i,j] = ""
      }
      if(is.na(as.character(table[i,j]))){
        table[i,j] = ""
      }
    }
  }
  table

  write.table(table,file=paste("./cancer_data/amplified_genes/NEW_glycogenes_amplified_survival_chr_wilcox_late_stage_table.xls",sep=""), quote=FALSE,row.names = FALSE,sep="\t")
  
  notreported_unionlistofgenes = read.table(file=paste("./cancer_data/amplified_genes/NEW_glycogenes_amplified_survival_chr_wilcox_notreported_table.xls",sep=""),header=TRUE,sep="\t")
  notreported_unionlistofgenes = Reduce(union, notreported_unionlistofgenes)
  length(notreported_unionlistofgenes)-2
  early_unionlistofgenes = read.table(file=paste("./cancer_data/amplified_genes/NEW_glycogenes_amplified_survival_chr_wilcox_early_stage_table.xls",sep=""),header=TRUE,sep="\t")
  early_unionlistofgenes = Reduce(union, early_unionlistofgenes)
  length(early_unionlistofgenes)-2
  late_unionlistofgenes = read.table(file=paste("./cancer_data/amplified_genes/NEW_glycogenes_amplified_survival_chr_wilcox_late_stage_table.xls",sep=""),header=TRUE,sep="\t")
  late_unionlistofgenes = Reduce(union, late_unionlistofgenes )
  length(late_unionlistofgenes)-2
  unionlistofgenes = unique(union(late_unionlistofgenes, union(notreported_unionlistofgenes, early_unionlistofgenes)))
  length(unionlistofgenes)-2
  #77 total
  #18 late
  #29 earlystage
  #47 notreported

  
########################################
####    SEGMENTATION AMPLIFICATION
########################################
#Segmentation #Piecewise  Constant  Fits 
#gene alone in the amplicone
##qui vedo l'intersezione dei geni nello step 3  con i geni segmentati prima del primo step in quel cancro e in  quel cromosoma e in quel segmento.
#Quanti geni in un amplicone hanno superato tutti gli step?
library(biomaRt)
setwd("C:/Users/f.russo/Documents/cancer_data/")
#ensembl <- useMart("ensembl")
#ensembl <- useDataset("hsapiens_gene_ensembl", mart=ensembl)
#filters <- c("hgnc_symbol") #cerca tra i nomi dei geni
# select attributes to return
#attributes <- c('chromosome_name','start_position','end_position','band', 'strand','hgnc_symbol')

#####  AMPLIFICATION
percentfiles = list.files("./percentages/",pattern="*",full.names=TRUE)

percentordered2 = read.table(file=percentfiles[1],sep="\t",header=F)
coordinates = read.table(file="./coordinates_plusgenesrescuedbyentrez_plusgenesrescuedbysynonyms.txt",sep="\t",header=T)

dim(coordinates)
#[1] 25787     6
linear_CNAs <- list.files("./data_linear_CNA/",pattern="*_data_linear_CNA.txt",full.names=TRUE)
linear_CNAs
data_CNAs <- list.files("./data_CNA2",pattern="$",full.names=TRUE)
data_CNAs

chrnames=unique((coordinates$chromosome_name)[which(nchar(coordinates$chromosome_name)<5)])
chrnames
library(rpart)
#definizione di plot_tree
plot_tree <- function(tree, x, y,threshold) {
  s <- seq(min(z), max(z), by=100000)
  plot(z, y,cex=1, pch = 16,type="p",col="blue")
  lines(s, predict(tree, data.frame(z=s)),col="red",cex=0.1, pch = 1)
  abline(h=threshold)
}

txtfls = linear_CNAs
calculate_meadian_amplitude <- function(txtfls){ #ONLY ACROSS THOSE PATIENS WITH +2
 for(i in 1:length(txtfls)){ 
  if (i==28) {                                   #PROBLEMA con thca 
     a = read.table(txtfls[i],header=TRUE,sep="\t")
     CNAs = read.table(data_CNAs[i],row.names = 1,header=TRUE,sep="\t")
     name=strsplit(txtfls[i],"/")
     name=name[[1]][length(name[[1]])]
     print(name)
     a[1:5,1:5]
     a = a[,-2] #elimina la colonna degli entrez ID
     a[1:5,1:5]
     dim(a)
     CNAs[1:5,1:5]
     CNAs = CNAs[,-1] #elimina la colonna degli entrez ID
     CNAs[1:5,1:5]
     dim(CNAs)  
     linear_Amplification = NULL
     temp=NULL
     for(j in 1:dim(a)[1]){ #dim(a)[1]
       currentgene = subset(CNAs,rownames(CNAs)==as.character(a$Hugo_Symbol)[j]) #solo qui Hugo_Symbol
       if(dim(currentgene)[1]==1){
         amplified_patients = colnames(CNAs)[which(currentgene==2)] #AMPLIFICATIONS
         amplified_linear_values = a[j,which(colnames(a) %in% amplified_patients)]
         amplified_linear_values = as.numeric(amplified_linear_values)
         linear_Amplification[j] = round(median(amplified_linear_values),3)
         median_amplification = cbind(as.character(a$Hugo_Symbol)[j],linear_Amplification[j])  #solo qui Hugo_Symbol
         temp = rbind(temp,median_amplification)
       }
     }  
     write.table(temp,file=paste("./median_amplification/",name,"_median_amplification.txt",sep=""),sep="\t",quote=FALSE,row.names = T,col.names = F)
  }else{
    a = read.table(txtfls[i],row.names = 1,header=TRUE,sep="\t")
    CNAs = read.table(data_CNAs[i],row.names = 1,header=TRUE,sep="\t")
    name=strsplit(txtfls[i],"/")
    name=name[[1]][length(name[[1]])]
    print(name)
    a[1:5,1:5]
    a = a[,-1] #elimina la colonna degli entrez ID
    a[1:5,1:5]
    dim(a)
    a=as.matrix(a)
    CNAs[1:5,1:5]
    CNAs = CNAs[,-1] #elimina la colonna degli entrez ID
    CNAs[1:5,1:5]
    dim(CNAs) 
    linear_Amplification = NULL
    for(j in 1:dim(a)[1]){
        currentgene = subset(CNAs,rownames(CNAs)==rownames(a)[j]) # qui e' rownames(a)
        amplified_patients = colnames(CNAs)[which(currentgene==2)] #AMPLIFICATIONS
        amplified_linear_values = a[j,which(colnames(a) %in% amplified_patients)] # qui e' rownames(a)
        amplified_linear_values = as.numeric(amplified_linear_values)
        linear_Amplification[j] = round(median(amplified_linear_values),3)
    }  
    median_amplification =  cbind(row.names(a),linear_Amplification)
    head(median_amplification)
    write.table(median_amplification,file=paste("./median_amplification/",name,"_median_amplification.txt",sep=""),sep="\t",quote=FALSE,row.names = TRUE,col.names = FALSE)
  }
 }
}
calculate_meadian_amplitude(txtfls)

####crea tabella amplificazioni
ampl_table = NULL
median_amplifications <- list.files("./median_amplification/",pattern="*_median_amplification.txt",full.names=TRUE)
for (i in 1:length(median_amplifications)){
  a = read.table(median_amplifications[i],header=FALSE,sep="\t")
  a=a[,-1]
  dim(a)
  head(a)
  name=strsplit(median_amplifications[i],"/")
  name=name[[1]][length(name[[1]])]
  name=strsplit(name,"_")
  name=name[[1]][1]
  print(name)
  colnames(a)=c(name,"amplification")
  ampl_table = qpcR:::cbind.na(ampl_table,a)
}  
ampl_table = ampl_table[,-1]
head(ampl_table)
write.table(ampl_table,file=paste("./amplification_linear_values_table.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names = TRUE)


      
      ##########################
      ####### SEGMENTAZIONE
###############################
############ fare una segmentazione solo per i geni in step1
setwd("C:/Users/f.russo/Documents/")
median_amplifications <- list.files("./cancer_data/median_amplification/",pattern="*_median_amplification.txt",full.names=TRUE)
percentfiles = list.files("./cancer_data/percentages/",pattern="*",full.names=TRUE)
length(median_amplifications)
length(percentfiles)
for (k in 1:length(percentfiles)){ #con k selezioni il cancro
  #prendi la lista delle threshold per quel cancro
  median_amplific = read.table(median_amplifications[k],sep="\t",header=F,row.names = 1)
  name = strsplit(percentfiles[k],"_")[[1]][4]
  name2 = strsplit(median_amplifications[k],"/")[[1]][4]
  print(name)
  print(name2)
  thresholdfiles = list.files("./cancer_data/chromosome_threshold_amplification_2/",pattern=paste("data_CNA_",name,".+_thresh_.+_signifgenes.txt",sep=""),full.names=TRUE)
  ###  con i selezioni il cromosoma
  for (i in 1:length(chrnames)){
   if(!is.null(tryCatch(read.table(file=thresholdfiles[i],sep="\t",header=F), error=function(e) NULL))){
    percentordered2 = read.table(file=thresholdfiles[i],sep="\t",header=F)  # prendi solo i geni nello step1
    x1=NULL
    head(coordinates)
    head(percentordered2)
    x1 = merge(coordinates, percentordered2, by.x="hgnc_symbol", by.y="V2") #la funzione merge raddoppia i geni
    x1=subset(x1,nchar(x1$chromosome_name)<5) # elimina i cromosomi patch
    x1=x1[,c(1,2,3,4,5,6,13)]
    head(x1)
    # prima del merge fare la mediana dei valori di linear amplitude
    x=NULL
    x = merge(x1, median_amplific , by.x="hgnc_symbol", by.y="V2")
    colnames(x)=c("hgnc_symbol","chromosome_name","start_position","end_position","band","strand","percentage","median_amplification")
    head(x) 
    if(dim(x)[1]>0){
      cancerfile=strsplit(thresholdfiles[i],"/")[[1]][4]
      arraynames=strsplit(cancerfile,"_")[[1]]
      indexy=which(arraynames=="thresh")
      threshold=arraynames[indexy+1] #cONTROLLA QUI COME CARICA LA TRESHOLD
      print(threshold)
      x1 = subset(x,x$chromosome_name==chrnames[i]) #prendi da x solo i geni 
      dim(x1)
      x1 = x1[with(x1, order(chromosome_name, start_position)), ] #ordina le posizioni
    #create frequency of amplification and chromosome position
    meanpos=NULL
    for(l in 1:dim(x1)[1]){meanpos[l]=mean(c(x1$start_position[l], x1$end_position[l]))} #calcola la posizione media del gene sul cromosoma
    length(meanpos)
    length(x1$percentage)
    datax1 = cbind(meanpos,x1$percentage)
    #qui ho bisogno dei dati di tutto il chromosoma per poter partizionare.
    dim(datax1)
    head(datax1)
    z = datax1[,1]
    y = datax1[,2]
    df <- data.frame(z=z, y=y)
    tree <- rpart(y ~ z, data=df, control=rpart.control(minsplit=15, cp=.001))
    png(filename=paste("./cancer_data/amplified_genes/segmentation_only_step1/",name,"_Chr",chrnames[i],"_freq_VS_pos_segmentation.png",sep=""))
    plot_tree(tree, z, y,threshold) #segmenta
    dev.off()
    fitteddataframe = cbind(x1, tree$where, predict(tree)) #devo sapere anche il valore medio calcolato dalla piecewise contant fit function contenuta in predict(tree)
    highlyfitteddataframe = subset(fitteddataframe,fitteddataframe$`predict(tree)` > as.numeric(threshold))# CONTROLLARE LE THRESHOLD!!!PESCA MALE
    write.table(fitteddataframe, file=paste("./cancer_data/amplified_genes/segmentation_only_step1/",name,"_Chr",chrnames[i],"_freq_VS_pos_segmentation.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    #write.table(highlyfitteddataframe, file=paste("./cancer_data/segmentation_only_step1/",name,"_Chr",chrnames[i],"_highly_freq_VS_pos_segmentation.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    }
   }
  }
}

#controllare i segmenti creati ecorreggerli. Risolve i problemi come quelli riscontrati negli tgct chr1 e in blca chr3, pcpg chr2, stad chr4
segmentation_file = list.files("./cancer_data/amplified_genes/segmentation_only_step1/",pattern=paste("*_freq_VS_pos_segmentation.txt",sep=""),full.names=TRUE)
length(segmentation_file)
#597
#601
for (i in 1:length(segmentation_file)){
  #i=414
  #i=2
  if(dim(read.table(file = segmentation_file[i], header=TRUE, sep="\t"))[1] > 0){
    current_segmentation_table = read.table(file = segmentation_file[i], header=TRUE, sep="\t")
    cancer_name = strsplit((strsplit(segmentation_file[i],"/")[[1]][5]),"_")[[1]][1]
    chromosome_name = strsplit((strsplit(segmentation_file[i],"/")[[1]][5]),"_")[[1]][2]
    segments = unique(current_segmentation_table$tree.where) #segmenti trovati con frequenze alte
    print(cancer_name)
    k=1
    new_current_segmentation_table=NULL
    if (dim(current_segmentation_table)[1]>1){
      for(j in 1:length(segments)){ #seleziona segmento
          newcurrentsegment=NULL
          #j=3
          current_segment = subset(current_segmentation_table,current_segmentation_table$tree.where==segments[j])
          nclust=2 #il numero di clusters sono tipicamente 2
          if(((max(current_segment$end_position) - min(current_segment$start_position))> 50000000) && (dim(current_segment)[1]==3)){nclust=3}
          if(((max(current_segment$end_position) - min(current_segment$start_position))> 50000000) && (dim(current_segment)[1]>3)){nclust=4}
          #controllare posizioni medie del primo gene contro il resto
          hc = hclust(dist(cbind(current_segment$start_position,current_segment$percentage)))
          #cut the tree into 2 clusters
          memb = cutree(hc, k = nclust)
          cent <- vector("list")
          for(s in 1:nclust){
            k=k+1
            cent[[s]] <- current_segment[memb == s, , drop = FALSE]
            cent[[s]]$tree.where = max(current_segmentation_table$tree.where)+k
            newcurrentsegment= rbind(cent[[s]], newcurrentsegment)
          }
          new_current_segmentation_table = rbind(new_current_segmentation_table, newcurrentsegment)
      }
      write.table(new_current_segmentation_table, file=paste("./cancer_data/amplified_genes/segmentation_only_step1_corrected/",cancer_name,"_",chromosome_name ,"_freq_VS_pos_segmentation.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    }else{    
      write.table(current_segmentation_table, file=paste("./cancer_data/amplified_genes/segmentation_only_step1_corrected/",cancer_name,"_",chromosome_name ,"_freq_VS_pos_segmentation.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE)
    } 
  }
}


########creare un'unica segment table
# caricare tutti i file in segmentation
#listare tutti i segmenti
# prendere gli HIGLY segmenti contenenti i glicogeni e selezionare quei glicogeni senza oncogeni noti
segmentation_file = list.files("./cancer_data/amplified_genes/segmentation_only_step1_corrected/",pattern=paste("*_freq_VS_pos_segmentation.txt",sep=""),full.names=TRUE)
length(segmentation_file)
glycogenes <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
known_oncogenes = read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE,quote="")
known_oncogenes = known_oncogenes[,5]

segment_table = c("cancer","chromosome_name","start_segment","end_segment","segment_length","bands","segment_tag","percentage_mean","median_of_amplifications_medians","genes")
glyco_segment_table = c(segment_table,"glycogenes","known_oncogenes")
k=0
for (i in 1:length(segmentation_file)){
  #i=4
  if(dim(read.table(file = segmentation_file[i], header=TRUE, sep="\t"))[1] > 0){
     current_segmentation_table = read.table(file = segmentation_file[i], header=TRUE, sep="\t")
     cancer_name = strsplit((strsplit(segmentation_file[i],"/")[[1]][5]),"_")[[1]][1]
     chromosome_name = strsplit((strsplit(segmentation_file[i],"/")[[1]][5]),"_")[[1]][2]
     segments = unique(current_segmentation_table$tree.where) #segmenti trovati con frequenze alte
     print(cancer_name)
     for(j in 1:length(segments)){ #seleziona segmento
          #j=1
          current_segment = subset(current_segmentation_table,current_segmentation_table$tree.where==segments[j])
          start_segment = min(current_segment$start_position)
          end_segment = max(current_segment$end_position)
          segment_length = end_segment - start_segment + 1
          bands = paste(unique(current_segment$band), collapse=", ")
          median_of_median_amplifications = median(current_segment$median_amplification)
          genes = paste(current_segment$hgnc_symbol, collapse=", ")
          segment_tag = unique(current_segment$tree.where)
          percentage_mean = round(unique(current_segment$predict.tree.),2)
          current_segment_line = cbind(cancer_name,chromosome_name,start_segment,end_segment,segment_length,bands,segment_tag,percentage_mean,median_of_median_amplifications,genes)
          segment_table = qpcR:::rbind.na(segment_table,current_segment_line)
          if(length(intersect(as.character(current_segment$hgnc_symbol), as.character(glycogenes$gene)))>0){ #se sono presenti dei glycogeni
                  glyco_segment_table = qpcR:::rbind.na(glyco_segment_table,current_segment_line) # aggiungi
                  k=k+1
                  glycogenes_present_in_the_segment = intersect(as.character(current_segment$hgnc_symbol), as.character(glycogenes$gene))
                  glyco_segment_table[k+1,11] = paste(glycogenes_present_in_the_segment, collapse=", ") #perche' k+1 ???
                  if(length(intersect(as.character(current_segment$hgnc_symbol), as.character(known_oncogenes)))>0){
                     known_oncogenes_present_in_the_segment = intersect(as.character(current_segment$hgnc_symbol), as.character(known_oncogenes))
                     glyco_segment_table[k+1,12] = paste(known_oncogenes_present_in_the_segment, collapse=", ") #perche' k+1 ???
                  }  
          }

     }
  }
}
dim(segment_table)
segment_table[1:3,1:6]
write.table(segment_table,file=paste("./cancer_data/amplified_genes/segment_table6.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names=FALSE)


##COLLAPSE
#############################################################################################################
##### Se i segmenti sono in comune con almeno 50% dei pazienti se si collassali devono essere meno di 85Mb
### inizio definizione funzioni da utilizzare

# segment1 = segments[j,]
intersect_within_a_segment <- function(segment1){
  segmentsgenes1 = segment1$genes
  genes1 = strsplit(as.character(segmentsgenes1),", ")[[1]]  ###CONTROLLLARE QUI
  if(grepl("\"", genes1[1])){  ##problema con questo carattere all'inizio e alla fine di genes1
    genes1[1] <- strsplit(genes1,"\"")[[1]][2]
  }
  if(grepl("\"", genes1[length(genes1)])){
    genes1[length(genes1)] <- strsplit(genes1,"\"")[[length(genes1)]]
  }
  CNAgene1 = CNA[ which(rownames(CNA) %in% genes1) ,]
  amplified_patients1=vector("list")
  for(k in 1:dim(CNAgene1)[1]){ #cicla su tutti i geni
     col_index = which(CNAgene1[k,]==2)
     amplified_patients1[[k]] = colnames(CNAgene1[col_index])
  }
  #trova pazienti in comune a tutti i geni nel segmento 1
  final_intersection1 = amplified_patients1[[1]]
  if(length(amplified_patients1)>1){
    for(p in 2:length(amplified_patients1)){
      final_intersection1 = intersect(amplified_patients1[[p]],final_intersection1)
    }
  }
  return(final_intersection1)
}

# segment1 = segments[j,]
union_within_a_segment <- function(segment1){
  segmentsgenes1 = segment1$genes
  genes1 = strsplit(as.character(segmentsgenes1),", ")[[1]]
  if(grepl("\"", genes1[1])){  ##problema con questo carattere all'inizio e alla fine di genes1
    genes1[1] <- strsplit(genes1,"\"")[[1]][2]
  }
  if(grepl("\"", genes1[length(genes1)])){
    genes1[length(genes1)] <- strsplit(genes1,"\"")[[length(genes1)]]
  }
  CNAgene1 = CNA[ which(rownames(CNA) %in% genes1) ,]
  amplified_patients1=vector("list")
  for(k in 1:dim(CNAgene1)[1]){ #cicla su tutti i geni
    col_index = which(CNAgene1[k,]==2)
    amplified_patients1[[k]] = colnames(CNAgene1[col_index])
  }
  #trova pazienti in comune a tutti i geni nel segmento 1
  final_union1 = amplified_patients1[[1]]
  if(length(amplified_patients1)>1){
    for(p in 2:length(amplified_patients1)){
      final_union1 = union(amplified_patients1[[p]],final_union1)
    }
  }
  return(final_union1)
}

union_across_two_segments <- function(final_union1,final_union2){
  union = union(final_union1,final_union2)
  return(union)
}

intersect_across_two_segments <- function(final_intersection1,final_intersection2){
  intersection = intersect(final_intersection1,final_intersection2)
  return(intersection)
}

collapse_two_segments <- function(segment1,segment2){
  new_segment = segment1
  new_segment$start_segment = min(segment1$start_segment, segment2$start_segment)
  new_segment$end_segment   = max(segment1$end_segment, segment2$end_segment)
  new_segment$segment_length = new_segment$end_segment - new_segment$start_segment + 1
  new_segment$bands =  paste(segment1$bands, segment2$bands, sep=", ")
  new_segment$segment_tag = paste(segment1$segment_tag, segment2$segment_tag, sep=", ")
  new_segment$percentage_mean = paste(segment1$percentage_mean,segment2$percentage_mean, sep=", ")
  new_segment$median_of_amplifications_medians = paste(segment1$median_of_amplifications_medians,segment2$median_of_amplifications_medians, sep=", ")
  new_segment$genes = paste(segment1$genes, segment2$genes, sep=", ")
  #new_segment$glycogenes = paste(segment1$glycogenes, segment2$glycogenes, sep=", ")
  #new_segment$known_oncogenes = paste(segment1$known_oncogenes, segment2$known_oncogenes, sep=", ")
  return(new_segment)
}

###fine definizione funzioni da utilizzare

setwd("C:/Users/f.russo/Documents/")
CNAs <- list.files("./cancer_data/data_CNA2",pattern="$",full.names=TRUE)
CNAs
allsegments = read.table(file="./cancer_data/amplified_genes/segment_table6.txt",sep="\t",header=TRUE)
allsegments[1:6,1:6]

cancer_table_segments = NULL
for(k in 1:length(CNAs)){ #selecting cancer
   #k=22
   CNA = read.table(CNAs[k],row.names = 1,header=TRUE,sep="\t")
   cancer_name = strsplit(strsplit(CNAs[k],"/")[[1]][4],"_")[[1]][3]
   print(cancer_name)
   chromosome_table_segments = NULL
   cancersegments = subset(allsegments, as.character(allsegments$cancer) == as.character(cancer_name) )
   cancersegments[,1:7]
   chrnames = unique(cancersegments$chromosome_name)
   for(i in 1:length(chrnames)){ #collassa all'interno di ogni cromosoma
     #i=1
      segments = subset(cancersegments, as.character(cancersegments$chromosome_name) == as.character(chrnames[i]) )
      #ordinare start position
      segments = segments[with(segments, order(start_segment)), ] #ordina le posizioni
      new_table_segments = segments[1,]
      if(dim(segments)[1] > 1){
         segments[1:4,1:5]
         patients_in_intersection1 = intersect_within_a_segment(segments[1,])
         patients_in_union1 = union_within_a_segment(segments[1,])
         patients_in_intersection1 
         newsegment = segments[1,]
         newsegment[1,1:9]
         for(j in 2:(dim(segments)[1])){
            #print(j)
            patients_in_intersection2 = intersect_within_a_segment(segments[j,])
            patients_in_union2 = union_within_a_segment(segments[j,])
            same_patients_in_two_segments = intersect_across_two_segments(patients_in_intersection1,patients_in_intersection2)
            union_of_the_patients_in_two_segments = union_across_two_segments(patients_in_union1,patients_in_union2)
            patient_ratio = length(same_patients_in_two_segments)/length(union_of_the_patients_in_two_segments)
            #se il rapporto e' maggiore di 0.5 e i due segmenti appartengono allo stesso segmento collassali
            #print(patient_ratio)
            if( patient_ratio>=0.5 && (!is.na(patient_ratio))){    
                #print("collapse")
                newsegment = collapse_two_segments(newsegment ,segments[j,])
                new_table_segments = qpcR:::rbind.na(new_table_segments ,newsegment)
                #print(new_table_segments[,1:7])
                #print("elimino:")
                #print(new_table_segments[(dim(new_table_segments)[1]-1),1:7])
                new_table_segments = new_table_segments[-(dim(new_table_segments)[1]-1),]
                #print(new_table_segments[,1:7])
                patients_in_intersection1 = intersect_within_a_segment(newsegment)
            }else{
                #print("add")
                new_table_segments = qpcR:::rbind.na(new_table_segments ,segments[j,])
                #new_table_segments = new_table_segments[-(j-1),]
                #print(new_table_segments[,1:7])
                #fornisci il nuovo segmento1 su cui lavorare
                newsegment = segments[j,]
                patients_in_intersection1 = intersect_within_a_segment(newsegment)
                patients_in_union1        = union_within_a_segment(newsegment) ###Qui c'era il bug dovevo aggiungere anche union
            }
         }
      }
      chromosome_table_segments = qpcR:::rbind.na(chromosome_table_segments,new_table_segments)
   }
   cancer_table_segments = qpcR:::rbind.na(cancer_table_segments,chromosome_table_segments)
}

dim(cancer_table_segments)
cancer_table_segments[1:5,1:7]
cancer_table_segments=cancer_table_segments[-c(1,2),]
write.table(cancer_table_segments,file="./cancer_data/amplified_genes/collapsed_segments_1_9_2020.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names=TRUE)

####### UNIQUE of GENES
setwd("C:/Users/f.russo/Documents/")
seg_table = read.table(file="./cancer_data/amplified_genes/collapsed_segments_1_9_2020.txt",header=TRUE,sep="\t")
seg_table[1:5,]
newsegtable = NULL
for(i in 1:dim(seg_table)[1]){
  temp = unique(unlist(strsplit(as.character(seg_table$genes[i]),", ")))
  temp = paste(temp, collapse=", ") 
  newsegtable_temp = cbind(seg_table[i,],temp)
  newsegtable = rbind(newsegtable, newsegtable_temp)
}
newsegtable[1:5,]
newsegtable = newsegtable[,-10]
colnames(newsegtable)[10] = "genes"
newsegtable[1:5,]
write.table(newsegtable,file="./cancer_data/amplified_genes/collapsed_segments_1_9_2020.txt",sep="\t",quote=FALSE,row.names = FALSE,col.names=TRUE)

###################

seg_table = read.table(file="./cancer_data/amplified_genes/collapsed_segments_1_9_2020.txt",header=TRUE,sep="\t")
head(seg_table)
dim(seg_table)
seg_table$segment_length[1]
colnames(seg_table)
hist(seg_table$segment_length, main=paste("Amplified lengths in bp",sep=""),xlab=" ", 
     ylab="n. of deletions", border="black", col="yellow", las=2, breaks=20)
dev.print(pdf,paste("./cancer_data/amplified_genes/amplified_frequency.pdf",sep=""))
dev.off()
hist(seg_table$segment_length, main=paste("Amplified lengths in bp",sep=""),xlab=" ", 
     ylab="n. of deletions", border="black", col="yellow", las=2, breaks=20,ylim=c(0,100))
dev.print(pdf,paste("./cancer_data/amplified_genes/amplified_frequency_zoom.pdf",sep=""))
dev.off()
min(seg_table$segment_length, na.rm=TRUE)
# 2374
max(seg_table$segment_length, na.rm=TRUE)
# 65847355
median(seg_table$segment_length, na.rm=TRUE)
# 1417260



#################################################################

###########################################################
##########################################################

##############################################################
################# ALONE IN THE AMPLICONE ####################

setwd("C:/Users/f.russo/Documents/")
unionlistofgenes = read.table(file=paste("./cancer_data/amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),header=TRUE,sep="\t")
dim(unionlistofgenes)
seg_table = read.table(file="./cancer_data/amplified_genes/collapsed_segments_1_9_2020.txt",header=TRUE,sep="\t")
seg_table[1:3,1:7]
new_table = NULL
genelist = NULL
cancers = unique(as.character(seg_table$cancer))
for (i in 1:length(cancers)){
  cancer_name = cancers[i]
  genelist = cancer_name
  cancer_step3_genes = as.character(unique(unionlistofgenes[,which(colnames(unionlistofgenes)==cancer_name)]))
  if (length(cancer_step3_genes)>0){
      cancer_segtable = subset(seg_table,seg_table$cancer==cancer_name) #prendi segmenti del cancro corrente
      for (j in 1:dim(cancer_segtable)[1]){ #per tutti gli ampliconi da me definiti in quel cancro
        #prendi geni
        amplicon_genes = unlist(strsplit(as.character(cancer_segtable[j,]$genes),", "))
        #qui vedo l'intersezione dei geni nello step 3 "cancer_genes" con i geni segmentati prima del secondo step in quel cancro, in quel cromosoma e in quel segmento
        if(length(intersect(amplicon_genes,as.character(cancer_step3_genes)) )==1){ # se e' solo inseriscilo
          print("inserted!")
          print(i)
          print(j)
          genelist = qpcR:::rbind.na(genelist,intersect(amplicon_genes,as.character(cancer_step3_genes)))
        }
      }
      if(length(genelist)>1){
        new_table = qpcR:::cbind.na(new_table,genelist)
      }
  }
}
# "SEC22B"  "RGS9BP"  "ASNSD1"  "BRAT1"   "LAPTM4A" "FBXL18"                      #early
# "ZFAT"     "SLC35B3"  "B4GALT5"  "SLC39A11" "SLITRK3"  "KDM2A"    "GOLPH3L"     #late
# "DEPTOR"  "TMEM63B" "ATG4C"   "DCTN2"   "PUM2"    "VPS13B"                      #notreported
new_table
gene_table  = new_table[,-1]  
gene_table = as.data.frame(gene_table)
table = gene_table

write.table(table,file=paste("./cancer_data/amplified_genes/alone_in_fitted_frequency_amplified_regions_and_oncogene_tables/genes_aloneintheamplicon3.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names=F)
table = read.table(file=paste("./cancer_data/amplified_genes/alone_in_fitted_frequency_amplified_regions_and_oncogene_tables/genes_aloneintheamplicon3.txt",sep=""),header=TRUE,sep="\t",stringsAsFactors=FALSE)
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,file=paste("./cancer_data/amplified_genes/alone_in_fitted_frequency_amplified_regions_and_oncogene_tables/genes_aloneintheamplicon3.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names=T)

#######################
#estrai solo i glicogeni
table = read.table(file=paste("./cancer_data/amplified_genes/alone_in_fitted_frequency_amplified_regions_and_oncogene_tables/genes_aloneintheamplicon3.txt",sep=""),sep="\t",header=TRUE)
table[1:3,1:7]
glycogenes <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
new_table = NULL
for (i in 1:dim(table)[2]){
   cancer_name= colnames(table)[i]
   intersectiongenes = intersect(as.character(glycogenes[,1]), as.character(unique(table[,i])))
   intersectiongenes = c(cancer_name,intersectiongenes)
   if(length(intersectiongenes )>1){
     new_table = qpcR:::cbind.na(new_table,intersectiongenes)
   }
}
gene_table  = new_table[,-1]  
gene_table = as.data.frame(gene_table)
gene_table
write.table(gene_table,file=paste("./cancer_data/amplified_genes/alone_in_fitted_frequency_amplified_regions_and_oncogene_tables/glycogenes_aloneintheamplicon3.txt",sep=""),sep="\t",quote=FALSE,row.names = FALSE,col.names=FALSE)

################

#Depmap Iorio
setwd("C:/Users/f.russo/Documents/cancer_data")
#depmap = read.table(file="./cancer_data/04_binaryDepScores.tsv",sep="\t",header=TRUE,quote="")
#dim(depmap)
#depmap[1:5,1:5]
#sum(depmap[which(depmap$Gene=="PELP1"),]==1)

depmap = read.table(file="./CCLE_gene_cn.csv",sep=",",header=TRUE,quote="") #COPY NUMBER
dim(depmap)
#[1]  1660 27640
depmap=t(depmap)
depmap[1:20,1:5]
gene.names = strsplit(rownames(depmap),"[.]")
genes=lapply(gene.names, `[[`, 1)
mygenes=(unlist(genes))
length(mygenes)
#[1] 27640
rownames(depmap) = mygenes
depmap[1:20,1:5]


#achilles = read.table(file="./Achilles_gene_effect.csv",sep=",",header=TRUE,quote="")
achilles = read.csv(file="./Achilles_gene_effect.csv", sep = ",", header = T)
dim(achilles)
achilles[1:20,1:5]
achilles=t(achilles)
achilles[1:20,1:5]
gene.names = strsplit(rownames(achilles),"[.]")
genes=lapply(gene.names, `[[`, 1)
mygenes=(unlist(genes))
length(mygenes)
rownames(achilles) = mygenes
achilles[1:20,1:5]
dim(achilles)
#[1] 18334   625 solo 625 linee cellulari
achilles[1,1:100]
info_achille = read.table(file="./sample_info.csv",sep=",",header=TRUE,row.names = 1,quote="")
info_achille[1:4,]

res=vector("list")

glycogenes_table = read.table(file=paste("./amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),sep="\t",header=TRUE,quote="")
#glycogenes_table = glycogenes_table[-c(1,2,3),-1]
head(glycogenes_table)

final_tab= NULL
for(j in 1:dim(glycogenes_table)[2]){
  #first read the cancer type
  cancer_type2 = colnames(glycogenes_table)[j]
  cancer_type = NULL
  if(cancer_type2 =="acc"){cancer_type="Adrenal Cancer"}
  if(cancer_type2 =="blca"){cancer_type="Bladder Cancer"}
  if(cancer_type2 =="brca"){cancer_type="Breast Cancer"}
  if(cancer_type2 =="cesc"){cancer_type="Cervical Cancer"}
  if(cancer_type2 =="chol"){cancer_type="Bile Duct Cancer"}
  if(cancer_type2 =="coad"){cancer_type="Colon/Colorectal Cancer"}
  if(cancer_type2 =="dlbc"){cancer_type="Lymphoma"}
  if(cancer_type2 =="esca"){cancer_type="Esophageal Cancer"}
  if(cancer_type2 =="gbm"){cancer_type="Brain Cancer"}
  if(cancer_type2 =="hnsc"){cancer_type="Head and Neck Cancer"}
  if(cancer_type2 =="kich"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="kirc"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="kirp"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="lalm"){cancer_type="Leukemia"}
  if(cancer_type2 =="lgg"){cancer_type="Brain Cancer"}
  if(cancer_type2 =="lihc"){cancer_type="Liver Cancer"}
  if(cancer_type2 =="luad"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="lusc"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="meso"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="ov"){cancer_type="Ovarian Cancer"}
  if(cancer_type2 =="paad"){cancer_type="Pancreatic Cancer"}
  if(cancer_type2 =="pcpg"){cancer_type=""}
  if(cancer_type2 =="prad"){cancer_type="Prostate Cancer"}
  if(cancer_type2 =="sarc"){cancer_type="Sarcoma"}
  if(cancer_type2 =="skcm"){cancer_type="Skin Cancer"}
  if(cancer_type2 =="stad"){cancer_type="Gastric Cancer"}
  if(cancer_type2 =="tgct"){cancer_type=""}
  if(cancer_type2 =="thca"){cancer_type="Thyroid Cancer"}
  if(cancer_type2 =="thym"){cancer_type=""}
  if(cancer_type2 =="ucec"){cancer_type="Endometrial/Uterine Cancer"}
  if(cancer_type2 =="ucs"){cancer_type="Endometrial/Uterine Cancer"}
  if(cancer_type2 =="uvm"){cancer_type="Eye Cancer"}
  glycogenes = glycogenes_table[,j]
  glycogenes = unique(glycogenes)
  if (is.na(as.character(glycogenes[length(glycogenes)]))){glycogenes = glycogenes[1:length(glycogenes)-1]}
  length(glycogenes)
  glycogenes_new = NULL
  temp=NULL
  for(i in 1:length(glycogenes)){
     sub_table = subset(depmap,rownames(depmap)==as.character(glycogenes[i]))
     if (dim(sub_table)[1]>0){
        sub_table = sub_table[1,]
        temp = rbind(temp,sub_table)
        glycogenes_new = c(glycogenes_new,as.character(glycogenes[i])) #in achilles non c'e' SEC22B 
     }
  }
 if(!is.null(glycogenes_new)){
  glycogenes = glycogenes_new
  length(glycogenes)
  temp[,1:5]
  dim(temp)
  colnames(temp)=depmap[1,]
  rownames(temp)=as.character(glycogenes)
  cancer_cells_table = subset(info_achille,info_achille[,2]==cancer_type) # seleziona terza colonna con 2
  temp = as.data.frame(temp)
  temp
  if(dim(cancer_cells_table)[1]>0){
    cancer_cells = rownames(cancer_cells_table)
    indexes = which(colnames(temp) %in% cancer_cells)
    if (dim(temp)[1]==1){
      temp2 = t(as.data.frame(as.numeric(temp[,indexes])))
    }else{
      temp2 = temp[,indexes]
    } # solo se ho una dataframe con una sola riga
    #temp2[1:5]
    temp2 = as.data.frame(temp2)
    dim(temp2)
    colnames(temp2) = colnames(temp)[indexes]
    #which(cancer_cells=="ACH-002176")
    #249
    cell_list_more = vector("list")
    cell_list_less = vector("list")
    final_table_less = NULL
    final_table_more = NULL
    for (k in 1:length(as.character(glycogenes))){
      cell_list_less[[k]] = colnames(temp2)[which(as.matrix(temp2[k,]) < 2)]  # LESS THAN 2 = log2(4) Copy Number log2(relative to ploidy + 1)
      cell_list_more[[k]] = colnames(temp2)[which(as.matrix(temp2[k,]) > 2)]  # MORE THAN 2 = log2(4)
      final_table_more = qpcR:::rbind.na(final_table_more,cell_list_more[[k]])
      final_table_less = qpcR:::rbind.na(final_table_less,cell_list_less[[k]])
    }
    
    if(dim( final_table_more)[1]>1 && dim( final_table_less)[1]>1){
      final_table_more = cbind(c("NA",as.character(glycogenes)),final_table_more)
      final_table_less = cbind(c("NA",as.character(glycogenes)),final_table_less)
      #final_table_more = final_table_more[-1,]
      #final_table_less = final_table_less[-1,]
      #write.table(final_table_more,file=paste("./amplified_genes/achilles/",stage,"_CCLE_table_more_",j,".txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")
      #write.table(final_table_less,file=paste("./amplified_genes/achilles/",stage,"_CCLE_table_less_",j,".txt",sep=""),quote=F,row.names=F,col.names=F,sep="\t")
      #now we analyze achilles file
      temp2 = NULL
      for(p in 1:length(glycogenes)){ #in achilles non c'e' SEC22B 
        temp2 = rbind(temp2, subset(achilles,rownames(achilles)==glycogenes[p]))
      }
      #temp[,1:10]
      colnames(temp2)=achilles[1,]
      #temp[,1:10]
      dim(temp2)
      achilles_reduced = temp2
      achilles_reduced[,1:2]
      #write.table(achilles_reduced, file=paste("./amplified_genes/",stage,"Achilles_reduced_",j,".txt",sep=""),quote=F,row.names=T,col.names=T,sep="\t")
      #achilles_reduced = read.table(file=paste("./amplified_genes/",stage,"Achilles_reduced_",j,".txt",sep=""),sep="\t",header=TRUE,row.names=1,quote="")
      #cerca le cell di final_table in achilles reduced
      final_table_more_achilles = NULL
      final_table_less_achilles = NULL
      for(s in 1:dim(achilles_reduced)[1]){
        table_onlycellgreater = achilles_reduced[s,which(colnames(achilles_reduced) %in% (unique(final_table_more[s+1,])))]
        final_table_more_achilles  = qpcR:::rbind.na(final_table_more_achilles,table_onlycellgreater)
        table_onlycellgreater = achilles_reduced[s,which(colnames(achilles_reduced) %in% (unique(final_table_less[s+1,])))]
        final_table_less_achilles  = qpcR:::rbind.na(final_table_less_achilles,table_onlycellgreater)
      }
      if(dim(final_table_more_achilles)[2]>1 && dim(final_table_less_achilles)[2]>1){
        rownames(final_table_more_achilles) = c("NA",as.character(rownames(achilles_reduced)))
        #write.table(final_table_more_achilles,file=paste("./amplified_genes/achilles/",stage,"_final_table_more_",j,".txt",sep=""),quote=F,row.names=T,col.names=F,sep="\t")
        rownames(final_table_less_achilles) = c("NA",as.character(rownames(achilles_reduced)))
        #write.table(final_table_less_achilles,file=paste("./amplified_genes/achilles/",stage,"_final_table_less_",j,".txt",sep=""),quote=F,row.names=T,col.names=F,sep="\t") 
        less = final_table_less_achilles
        more = final_table_more_achilles
        median_values_more = NULL
        for(t in 2:dim(more)[1]){
          median_values_more[t] = round(median(as.numeric(more[t,]),na.rm=TRUE),3)
        }
        median_values_more
        median_values_less =NULL
        for(y in 2:dim(less)[1]){
          median_values_less[y] = round(median(as.numeric(less[y,]),na.rm=TRUE),3)
        }
        median_values_less
        pvalue_tab = NULL
        for(w in 1:dim(more)[1]){
          if(!is.na(more[w,]) && !is.na(less[w,])){ #look for amplified less than not amplified 
            res[[w]] = wilcox.test(as.numeric(more[w,]),as.numeric(less[w,]), mu=0, alternative = "less",paired=F)  ###CONTROLLARE QUI DIREZIONE DEL TEST! 
            pvalue_tab_temp = c(rownames(more)[w],round(res[[w]][3]$p.value,5))
            pvalue_tab  = qpcR:::rbind.na(pvalue_tab,pvalue_tab_temp) 
          }
        }
        if(!is.null(pvalue_tab)){
          colnames(pvalue_tab)= c(cancer_type2,"pvalue")
          pvalue_tab = subset(pvalue_tab, as.numeric(pvalue_tab[,2]) < 0.05)
          if (dim(pvalue_tab)[1] > 0){
             print(pvalue_tab)
             final_tab  = qpcR:::cbind.na(final_tab, pvalue_tab) 
          }
        }
      }
    }
  }
 }
}
final_tab = final_tab[,-1]
write.table(final_tab,file=paste("./amplified_genes/achilles_ceres_down_regulation_reduces_growth/amplified_ceres_pvalue_tab2.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t") 


################################################

#intersect with COSMIC census data https://cancer.sanger.ac.uk/census
census = read.table(file="./cancer_data/Census.tsv",sep="\t",header=TRUE,quote="")
dim(census)
census[1:5,1:5]
table_late = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_chr_wilcox_late_stage_table.xls",sep=""),header=TRUE,sep="\t")
table_early = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_chr_wilcox_early_stage_table.xls",sep=""),header=TRUE,sep="\t")
table_notreported = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_chr_wilcox_notreported_table.xls",sep=""),header=TRUE,sep="\t")
notreported_unionlistofgenes = Reduce(union, table_notreported)
early_unionlistofgenes = Reduce(union, table_early)
late_unionlistofgenes = Reduce(union, table_late)
intersect(census$Gene.Symbol,late_unionlistofgenes)
intersect(census$Gene.Symbol,early_unionlistofgenes)
intersect(census$Gene.Symbol,notreported_unionlistofgenes)
length(intersect(census$Gene.Symbol,late_unionlistofgenes))
#"BCL6"     "CD274"    "CDH17"    "CDK12"    "CHD4"     "COX6C"    "DROSHA"   "EGFR"     "EIF4A2"   "ERBB2"    "ERC1"     "ERCC5"    "ETNK1"    "ETV5"     "ETV6"    
#"GMPS"     "GPC5"     "IGF2BP2"  "JAK2"     "KDM5A"    "KRAS"     "LASP1"    "LPP"      "MB21D2"   "MLLT6"    "NFE2L2"   "NFIB"     "PDCD1LG2" "PIK3CA"   "PMS1"    
#"PPFIBP1"  "PSIP1"    "RARA"     "RUNX1T1"  "SDHA"     "TFRC"     "UBR5"     "ZNF384"  
length(intersect(census$Gene.Symbol,early_unionlistofgenes))
#"ARNT"     "BIRC3"    "CASP8"    "CCND1"    "CCND3"    "CEP89"    "CHIC2"    "CLTC"     "COX6C"    "CSMD3"    "DDX5"     "EGFR"     "EIF3E"    "EIF4A2"   "ERBB2"   
#"ERCC4"    "ETNK1"    "EXT1"     "FGFR1"    "FIP1L1"   "FUS"      "GMPS"     "HOOK3"    "HSP90AB1" "IGF2BP2"  "KDM5A"    "KLF6"     "LARP4B"   "LASP1"    "LPP"     
#"LSM14A"   "MB21D2"   "MLF1"     "MLLT6"    "MYC"      "NBN"      "NTHL1"    "PABPC1"   "PALB2"    "PDE4DIP"  "PICALM"   "PIK3CA"   "RAD21"    "RMI2"     "SETDB1"  
#"SOX2"     "TBL1XR1"  "TFEB"     "TFRC"     "TRAF7"    "TSC2"     "WHSC1L1"  "WIF1"     "WWTR1"   
length(intersect(census$Gene.Symbol,notreported_unionlistofgenes))
#"ABL2"     "ARAF"     "ARNT"     "ASXL1"    "BCL6"     "BCL9"     "BMP5"     "BRIP1"    "CALR"     "CCND1"    "CCND2"    "CCND3"    "CCNE1"    "CD274"    "CDK12"   
#"CDK4"     "CDKN1B"   "CEBPA"    "CEP89"    "CHD4"     "CHIC2"    "COX6C"    "CUX1"     "EED"      "EGFR"     "EIF3E"    "EIF4A2"   "ELF3"     "ELK4"     "ERBB2"   
#"ERBB3"    "ETNK1"    "ETV5"     "EXT1"     "FANCG"    "FGFR1"    "FIP1L1"   "FOXA1"    "GATA1"    "GMPS"     "GOPC"     "HSP90AA1" "IGF2BP2"  "JAK2"     "JUN"     
#"KAT6A"    "KLF6"     "LSM14A"   "MALAT1"   "MAML2"    "MDM2"     "MDM4"     "MECOM"    "MLF1"     "MLLT11"   "MYC"      "NBN"      "NOTCH2"   "NUMA1"    "PABPC1"  
#"PAX8"     "PDCD1LG2" "PDE4DIP"  "PDGFRA"   "PICALM"   "PIK3CA"   "POU5F1"   "PRCC"     "PTPN6"    "PTPRD"    "RAD21"    "RBM10"    "RECQL4"   "S100A7"   "SDHA"    
#"SETDB1"   "SLC45A3"  "SOX2"     "SS18"     "SSX1"     "SSX4"     "TERT"     "TFEB"     "TPM3"     "UBR5"     "WHSC1L1"  "YWHAE"    "ZNF384"  
 




#######################
#########################
#Look for those genes that are glycogenes
secre_genelist <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
dim(secre_genelist)
stage="late_stage"
survival_genes_table <- read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_",stage,"_onlygenes3.txt",sep=""),sep="\t",header=TRUE,quote="")
dim(survival_genes_table)
head(survival_genes_table)
colnamessurv = colnames(survival_genes_table)
colnamessurv
unionlistofgenes=Reduce(union, survival_genes_table)
length(unionlistofgenes)
#head(unionlistofgenes)
table=NULL
#table = intersect(secre_genelist[[1]],survival_genes_table[,1]) 
percentages_out_of_survival_genes = NULL
percentages_out_of_glycogenes = NULL
f.testval = NULL
for (k in 1:dim(survival_genes_table)[2]){
  gene_in_intersection2 = intersect(secre_genelist[[1]],survival_genes_table[,k]) # intersection between the reduced coordinates and secre genes only!!!!!!
  percentages_out_of_survival_genes[k] = round((length(gene_in_intersection2)/length(survival_genes_table[,k])*100),1)
  percentages_out_of_glycogenes[k] = round(((length(gene_in_intersection2)/dim(secre_genelist)[1])*100),1)  
  f.test = fisher.test(rbind(c(length(gene_in_intersection2),dim(secre_genelist)[1]-length(gene_in_intersection2)),
                    c(length(survival_genes_table[,k])-length(gene_in_intersection2),21683-(length(survival_genes_table[,k])-length(gene_in_intersection2)))),alternative="greater")
  f.testval[k] = round(f.test$p.value,2)
  table = qpcR:::cbind.na(table, gene_in_intersection2)
}
percentages_out_of_survival_genes 
percentages_out_of_glycogenes 
f.testval
table = table[,-1]
table = qpcR:::rbind.na(percentages_out_of_glycogenes,table)
table = qpcR:::rbind.na(percentages_out_of_survival_genes,table)
table = qpcR:::rbind.na(f.testval,table)
colnames(table)=colnamessurv
table
###REMOVE NAs
table=as.matrix(table)
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,file=paste("./cancer_data/amplified_genes/glycogenes_STEP_3_amplified_survival_",stage,"_table3.txt",sep=""), quote=FALSE,row.names = TRUE,sep="\t")

#####calculate numbers
table_notreported = read.table(file=paste("./cancer_data/amplified_genes/glycogenes_NEW_STEP_3_amplified_survival_notreported_table.txt",sep=""),header=TRUE,sep="\t")
table_early = read.table(file=paste("./cancer_data/amplified_genes/glycogenes_NEW_STEP_3_amplified_survival_early_stage_table.txt",sep=""),header=TRUE,sep="\t")
table_late = read.table(file=paste("./cancer_data/amplified_genes/glycogenes_NEW_STEP_3_amplified_survival_late_stage_table.txt",sep=""),header=TRUE,sep="\t")
table_notreported = table_notreported[-c(1,2,3),-1]
table_early = table_early[-c(1,2,3),-1]
table_late = table_late[-c(1,2,3),-1] 
notreported_unionlistofgenes = Reduce(union, table_notreported)
early_unionlistofgenes = Reduce(union, table_early)
late_unionlistofgenes = Reduce(union, table_late)
length(unique(notreported_unionlistofgenes))-1
#46 not reported
length(unique(early_unionlistofgenes))-1
#28 early stage
length(unique(late_unionlistofgenes))-1
#18 late stage
length(unique(union(late_unionlistofgenes, union(notreported_unionlistofgenes, early_unionlistofgenes))))-1
#75

final_glycogenes = (unique(union(late_unionlistofgenes, union(notreported_unionlistofgenes, early_unionlistofgenes))))[-4]

##############

#crea tabella regioni 
amplified_survival_genes <- read.table(file=paste("./cancer_data/amplified_genes/glycogenes_amplified_survival_chr_wilcox_notreported_table.xls",sep=""),header=TRUE,sep="\t")
column_band_temp = NULL
for (i in 1:dim(amplified_survival_genes)[2] ){
  column = amplified_survival_genes[i]
  listgene = unique((column[,1]))
  band = NULL
  for(j in 1:length(listgene) ){
    x = subset(coordinates,coordinates$hgnc_symbol==listgene[j])
    if(length(subset(x,nchar(x$chromosome_name)<5)$band)==1){
      band[j] = subset(x,nchar(x$chromosome_name)<5)$band
    }else{
      band[j] = ""
    }
  }
  column_band = cbind(as.character(listgene),band)
  colnames(column_band) = c(colnames(amplified_survival_genes[i]),"band")
  column_band_temp = qpcR:::cbind.na(column_band_temp,column_band)
}
column_band_temp = column_band_temp[,-1]
column_band_temp[is.na(column_band_temp)] <- ""
dim(column_band_temp)
write.table(column_band_temp,file=paste("./cancer_data/amplified_genes/glycogenes_amplified_survival_chr_wilcox_notreported_table_bands.xls",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

########

####controlla pazienti
k=17 #LUAD
a=read.table(txtfls[k],row.names = 1,header=TRUE,sep="\t")
name=strsplit(txtfls[k],"/")
name=name[[1]][length(name[[1]])]
print(name)
a[1:5,1:5]
asel = subset(a,rownames(a)=="ALG3")
a1 = asel[which(asel==2)]
asel = subset(a,rownames(a)=="B3GALNT1")
a2 = asel[which(asel==2)]
asel = subset(a,rownames(a)=="B3GNT5")
a3 = asel[which(asel==2)]
asel = subset(a,rownames(a)=="SLC33A1")
a4 =asel[which(asel==2)]
asel = subset(a,rownames(a)=="GOLIM4")
a5 = asel[which(asel==2)]
intersect(intersect(intersect(intersect(colnames(a1),colnames(a2)),colnames(a3)),colnames(a4)),colnames(a5))


#########################################################################
####interseca coi pathways di REACTOME

#For each cancer type and for each patient in that cancer, take all the genes mutated in that patient (for Amplification it should be "missense mutation").  
#submut_missense = subset(submut,submut$Variant_Classification == "Missense_Mutation")
#all the pathways in Reactome. (from https://reactome.org/downloa-data file named "Reactome Pathways Gene Set")

library(DOSE)
library(clusterProfiler)
library(ReactomePA)

setwd("C:/Users/f.russo/Documents/cancer_data/")

#https://reactome.org/downloa-data "Reactome Pathways Gene Set"   https://reactome.org/download/current/ReactomePathways.txt
reactomepathways <- read.table("reactomepathwaysnew.txt",header=FALSE,sep="\t") ###attenzione agli apostrofi nel file  ( ' ) . Eliminarli
dim(reactomepathways)
reactomepathways = data.frame(lapply(reactomepathways, as.character), stringsAsFactors=FALSE)
as.character(reactomepathways[1:3,1:6])

STEP_2_genes <-  read.table(paste("./amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni
head(STEP_2_genes)

table_temp = NULL
for(i in 1:dim(STEP_2_genes)[2]){ #for each cancer type
    cancername = colnames(STEP_2_genes)[i]
    amplified_genes = unique(as.character(STEP_2_genes[,i]))
    print(cancername)
    temp = cancername
    mut = read.table(paste("./data_mutation/",cancername,"_data_mutations_extended.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni di quel cancro
    submut_missense = subset(mut,mut$Variant_Classification == "Missense_Mutation") #select only those patients with that mutation
    mutated_genes = unique(as.character(submut_missense$Hugo_Symbol))
    #Intersect each reactome pathway separately with the set of mutated genes (significance test?)
    for (j in 1:dim(reactomepathways)[1]){#for all the 2339 Reactome pathways
           genes_in_the_pathway = unique(as.character(reactomepathways[j,]))
           genes_in_intersection = intersect(mutated_genes, genes_in_the_pathway)
           res= fisher.test(rbind(c(length(genes_in_intersection)                      , length(genes_in_the_pathway)-length(genes_in_intersection)),
                                c(length(mutated_genes)-length(genes_in_intersection), 22000-length(genes_in_the_pathway)-length(mutated_genes)-length(genes_in_intersection))), 
                                alternative = "two.sided") ###perche' two sided qui????
           if(res$p.value < 0.05){
               only_amplified_genes_in_intersection = intersect(genes_in_the_pathway, amplified_genes) # all the STEP2 genes present in that reactome pathway will gain one point.
               if(length(only_amplified_genes_in_intersection)>0){
                  if(!is.na(only_amplified_genes_in_intersection)){
                     write.table(only_amplified_genes_in_intersection,file=paste("./amplified_genes/Reactome_PATHWAY_analysis/pathway_",cancername,"_",j,".txt",sep=""),quote=F,row.names=F,sep="\t")
                     temp = c(temp,unique(only_amplified_genes_in_intersection))
                  }
               }
           }
    }
    if(length(unique(temp))>1){table_temp = qpcR:::cbind.na(table_temp,unique(temp))}
}
#table_temp = table_temp[,-1]
head(table_temp)
write.table(table_temp,file=paste("./amplified_genes/Reactome_PATHWAY_analysis/morethanonemember_amplified_mutated_in_pathways.txt",sep=""),quote=F,row.names=F,col.names = F,sep="\t")

############################
####OMIM
setwd("C:/Users/f.russo/Documents/cancer_data/")
omim_hpo <- read.table(file="omim_hpo.txt",sep="\t",header=FALSE)
head(omim_hpo)
dim(omim_hpo)
tail(omim_hpo)
STEP_2_genes <-  read.table(paste("./amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni

total = NULL
genes_found = vector("list")
for(i in 1:dim(STEP_2_genes)[2]){
    name = colnames(STEP_2_genes)[i]
    print(name)
    cancer_name = NULL
    if(name=="acc") {cancer_name = "Adrenocortical carcinoma"}
    if(name=="blca"){cancer_name = "Bladder carcinoma"}
    if(name=="brca"){cancer_name = "Breast carcinoma"}
    if(name=="chol"){cancer_name = "Cholangiocarcinoma"}
    if(name=="coad"){cancer_name = "Hereditary nonpolyposis colorectal carcinoma"}
    if(name=="dlbc"){cancer_name = "B-cell lymphoma"}
    if(name=="esca"){cancer_name = "Esophageal carcinoma"}
    if(name=="gbm") {cancer_name = "Glioblastoma multiforme"}
    if(name=="hnsc"){cancer_name = "Neoplasm of head and neck"}
    if(name=="kich"){cancer_name = "Renal neoplasm"}
    if(name=="kirc"){cancer_name = "Renal cell carcinoma"}
    if(name=="kirp"){cancer_name = "Papillary renal cell carcinoma"}
    if(name=="lalm"){cancer_name = "Acute myeloid leukemia"}
    if(name=="lgg") {cancer_name = "Glioma"}
    if(name=="lihc"){cancer_name = "Neoplasm of the liver"}
    if(name=="luad"){cancer_name = "Lung adenocarcinoma"}
    if(name=="lusc"){cancer_name = "Neoplasm of the lung"}
    if(name=="meso"){cancer_name = "Malignant mesothelioma"}
    if(name=="paad"){cancer_name = "Pancreatic adenocarcinoma"}
    if(name=="pcpg"){cancer_name = "Paraganglioma"}
    if(name=="prad"){cancer_name = "Prostate Cancer"}
    if(name=="stad"){cancer_name = "Stomach cancer"}
    if(name=="ov")  {cancer_name = "Ovarian carcinoma"}
    if(name=="sarc"){cancer_name = "Sarcoma"}
    if(name=="skcm"){cancer_name = "Neoplasm of the skin"}
    if(name=="stad"){cancer_name = "Stomach Cancer"}
    if(name=="tgct"){cancer_name = "Testicular neoplasm"}
    if(name=="thca"){cancer_name = "Thyroid carcinoma"}
    if(name=="thym"){cancer_name = "Thymoma"}
    if(name=="uvm") {cancer_name = "Uveal melanoma"}
    print(cancer_name)
    if(!is.null(cancer_name)){
      genelist = as.character(subset(omim_hpo, cancer_name==omim_hpo$V3)[,2])
      print(genelist)
      genes_found[[i]] = c(name,intersect(genelist,unique(as.character((STEP_2_genes)[,i]))))
      total = qpcR:::cbind.na(total, genes_found[[i]]) 
    }
}
total = total[,-1]
table = total
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,file=paste("./amplified_genes/OMIM_results/omim_results.txt",sep=""),quote=F,sep="\t",row.names = F,col.names = F)

######################################################################
######STRING ANALYSIS Interattori DIRETTI trovati tramite i dati scaricati da STRING
library(DOSE)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
library(biomaRt)
library(igraph)
library(STRINGdb)
setwd("C:/Users/f.russo/Documents/cancer_data/")
census = read.table(file="./Census.tsv",sep="\t",header=TRUE,quote="")
dim(census)
census[1:5,1:5]

protein_info = read.table(file="./9606.protein.info.v11.0.txt",sep="\t",header=TRUE,quote="")
head(protein_info)
dim(protein_info)
protein_links <- read.csv("./9606.protein.links.detailed.v11.0.txt",stringsAsFactors=FALSE, header=T, nrows=11759455, sep=" ")  
tail(protein_links)
dim(protein_links)

table=NULL
table = data.frame(protein_external_id="NA", preferred_name="NA")
genes_not_found = "NA"

for(k in 1:dim(census)[1]){
  temp_table = subset(protein_info,protein_info$preferred_name==as.character(census$Gene.Symbol[k]))[,1:2]
  if(dim(temp_table)[1]==0){
     print("non trovato")
     genes_not_found = c(genes_not_found,as.character(census$Gene.Symbol[k]))
  }else{table = rbind(table, temp_table)}
}

map_table = table[-1,] #me ne perdo 12
dim(map_table)
# 711   2
head(map_table)
genes_not_found
#[1] "NA"       "HMGN2P46" "IGH"      "IGK"      "IGL"      "MALAT1"   "RUNDC2A"  "TRA"      "TRB"      "TRD"      "U2AF1"    "ZNF198"   "ZNF278" 
write.table(file="./tablemap.txt",map_table,quote=F,sep="\t") ##qui ci sono i geni in CENSUS

STEP_2_genes <-  read.table(paste("./amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni
interaction_threshold = 400
total_table=NULL
for(i in 1:dim(STEP_2_genes)[2]){ 
    name = colnames(STEP_2_genes)[i]
    print(name)
    currentcancerlist = name
    survival_results_cancertype = unique(as.character(STEP_2_genes[,i]))
    for(j in 1:length(survival_results_cancertype)[1]){ #per ogni gene
      currentgenelist = NULL
      currentgene = as.character(survival_results_cancertype[j])
      id_currentgene = subset(protein_info,protein_info$preferred_name==currentgene)$protein_external_id # estrai il gene id da protein info
      currentgene_subtable = subset(protein_links,protein_links$protein1==id_currentgene)
      current_subtableabovethre = subset(currentgene_subtable, currentgene_subtable$experimental > interaction_threshold) #Perche' solo experimental????
      #######################################################################
      ### Vedi se tra questi interattori ci sono degli oncogeni di CENSUS ###
      #######################################################################
      genes_in_intersection = intersect(current_subtableabovethre$protein2,as.character(map_table$protein_external_id))
      if(length(genes_in_intersection)>0){ #se li trovi ritraduci i nomi dei geni
        gene_interactors=NULL
        for(s in 1:length(genes_in_intersection)){ 
          gene_interactors[s] = as.character(subset(map_table,as.character(map_table$protein_external_id)==genes_in_intersection[s])[,2]) 
        }
        #currentgenelist = qpcR:::cbind.na(currentgene,gene_interactors) 
         currentgenelist = qpcR:::cbind.na(currentgene,paste(gene_interactors, collapse=", "))
      }
      if(length(currentgenelist)>0){
        currentcancerlist = qpcR:::rbind.na(currentcancerlist,currentgenelist) 
      }
    }
    if(length(currentcancerlist)>1){
      total_table = qpcR:::cbind.na(total_table,currentcancerlist) 
    }
}
total_table = total_table[,-1]
write.table(file=paste("./amplified_genes/STRING_interactors/interactors_table_new.txt",sep=""),total_table,row.names=F,col.names=F,quote=F,sep="\t")


#######################
### enrich Pathway Analysis
reduced_bands <- list.files("./cancer_data/survivalplots_chr_wilcox/",pattern=paste("*_survival_listgenes_",stage,".txt",sep=""),full.names=TRUE)
reduced_bands 
for(i in 1:length(reduced_bands)){
  if(!is.null(tryCatch(read.table(file=reduced_bands[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    reduced_bands_positions = read.table(file=reduced_bands[i],header=TRUE,sep="\t",quote = "")
    name=strsplit(reduced_bands[i],"/")
    name2=name[[1]][length(name[[1]])]
    name=strsplit(name2,"_")
    name=name[[1]][1]
    print(name)
    temp = name
    example1_mapped <- string_db$map( reduced_bands_positions, "x", removeUnmappedRows = TRUE )
    hits <- example1_mapped$STRING_id 
    hits_neig = string_db$get_neighbors( hits ) #To get more interactions 
    hits_neig_inter = string_db$get_interactions(hits_neig)
    dim(hits_neig_inter)
    hits_neig_high_score = subset(hits_neig_inter,hits_neig_inter$combined_score>990)
    dim(hits_neig_high_score)
    new_hits = unique(hits_neig_high_score$from)
    new_hits2 = unique(hits_neig_high_score$to)
    new_hits = intersect(new_hits,new_hits2)
    length(new_hits)
    # hits = new_hits
    string_db$plot_network(hits) 
    dev.print(pdf,paste("./cancer_data/amplified_genes/STRING_analysis/network_", name,"_",stage,".pdf",sep=""))
    dev.off()
    string_db$get_interactions(hits)
    clustersList <- string_db$get_clusters(hits)
    #interseca i geni nel clusters
    #cluterlength = NULL
    if(is.list(clustersList)){
      for (s in 1:length(clustersList)){
       if (length(clustersList[[s]])>4){ # se ci sono almeno 5 elementi nel cluster
           genes = NULL
           for (k in 1:length(clustersList[[s]])){
               genes[k] = subset(example1_mapped, example1_mapped$STRING_id == clustersList[[s]][k])$x
           }
           gene_names = genes
           id=NULL
           for(j in 1:length(gene_names)){
             if ( is.element(gene_names[j], results[,1])) {
               sub_results = subset( results, results[,1] == gene_names[j] )
               if (!is.na(sub_results$entrezgene[1])){
                 id[j] = sub_results[1,2]
               }else{ id[j] = as.character(gene_names[j]) }
             }else{id[j] = as.character(gene_names[j])}
           }
           id = as.character(id)
           kk = NULL
           print("Calculating Reactome PATHWAY. PLEASE WAIT!")
           #kk = enrichDO(gene = id)
           #kk <- enrichKEGG(gene = id)
           kk<- enrichPathway(gene=id, readable=T)
           #kk <-enricher(gene=id)
           if(dim(data.frame(kk))[1] != 0){
             print(head(data.frame(kk)))
             write.table(data.frame(kk),file=paste("./cancer_data/amplified_genes/STRING_analysis/pathway_", name,"_of_cluster_",s,"_",stage,".txt",sep=""),quote=F,row.names=F,sep="\t")
           }
           genes_in_intersection = intersect(as.character(census$Gene.Symbol),as.character(genes))
           if (length(genes_in_intersection) > 0){ #trovato almeno un oncogene noto nel cluster
                print(paste("Found at least one oncogene in the cluster ",s," ",genes_in_intersection, sep=""))
                string_db$plot_network(clustersList[[s]])
                dev.print(pdf,paste("./cancer_data/amplified_genes/STRING_analysis/subnetwork_", name,"_of_cluster_",s,"_",stage,".pdf",sep=""))
                dev.off()
                write.table(as.character(genes),file=paste("./cancer_data/amplified_genes/STRING_analysis/genes_in_the_cluster_pathway_", name,"_of_cluster_",s,"_",stage,".txt",sep=""),quote=F,row.names=F,sep="\t")
           }
       } 
      }
    }
  }
}

stage="notreported"
reduced_bands <- list.files("./cancer_data/amplified_genes/STRING_analysis/",pattern=paste("*genes_in_the_cluster_pathway_.+",stage,".txt",sep=""),full.names=TRUE)
reduced_bands 

table_temp = NULL
for(i in 1:length(reduced_bands)){
  if(!is.null(tryCatch(read.table(file=reduced_bands[i],sep="\t",header=FALSE,quote=""), error=function(e) NULL))){
    reduced_bands_positions = read.table(file=reduced_bands[i],header=TRUE,sep="\t",quote = "")
    name=strsplit(reduced_bands[i],"/")
    name2=name[[1]][length(name[[1]])]
    name=strsplit(name2,"_")
    name=name[[1]][6]
    print(name)
    gene_names = c(name,as.character(reduced_bands_positions$x))
    gene_names = unique(as.character(gene_names))
    table_temp = qpcR:::cbind.na(table_temp,gene_names)
  }
}
table_temp = table_temp[-1,-1]
"vedi quanti enzimi del golgi ci sono"
unionlistofgenes = Reduce(union, table_temp)
length(intersect(unionlistofgenes,secre_genelist[,1]))
intersect(unionlistofgenes,secre_genelist[,1])
# early 19
#[1] "EXT1"     "AP4S1"    "XYLT1"    "GNPTG"    "RAB21"    "YIPF3"    "SLC35B2"  "CLTC"     "PIGX"     "PIGZ"     "ST6GAL1"  "B4GALNT3" "B3GNT5"   "B3GALNT1" "DPY19L3"  "SLC33A1"  "ALG3"     "PGAP3"    "ORMDL3"  
# late 14
#[1] "ALG3"     "B3GNT5"   "B3GALNT1" "SLC33A1"  "ST8SIA1"  "PIP4K2B"  "PGAP3"    "ORMDL3"   "PIGX"     "PIGZ"     "XXYLT1"   "GOLIM4"   "B4GALNT3" "SLC35B3" 
# 40 not reported
#[1] "FUT4"     "POFUT1"   "PGAP3"    "B3GNT5"   "B3GALNT1" "SLC33A1"  "ALG3"     "AP1S1"    "AP4M1"    "YIF1A"    "EXT1"     "GALT"     "PITPNM1"  "SCYL1"    "GOLPH3L"  "RAB1B"    "PIGO"     "TRAPPC9"  "VPS51"   
#[20] "CHSY1"    "GALNT8"   "B4GALNT1" "PIP4K2C"  "BLZF1"    "GPR89A"   "GOLT1B"   "B4GALT6"  "ST8SIA1"  "CERS2"    "PI4KB"    "GOLGA2"   "GOPC"     "GOLPH3"   "ORMDL3"   "GOLGA7"   "AGPAT2"   "AP3M2"    "RAB6A"   
#[39] "DPY19L3"  "RAB34"  

#######################################################################
###Organelle Comparison
secre_genelist <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
int_genes = intersect(as.character(secre_genelist[,1]), unique(genes_in_golgi))
length(int_genes)
#330

#da qui:  https://compartments.jensenlab.org/Downloads   prendo il file qui sotto
compartments = read.table(file="human_compartment_integrated_full.tsv",header=FALSE,sep="\t",quote = "")
head(compartments)
dim(compartments)
# 1123471       5
unique_comp = unique(compartments$V4)
length(unique_comp)
# 3051
compartments = subset(compartments,compartments$V5>=4.0)
dim(compartments)
# 319269      5

lysosome = subset(compartments,compartments$V4=="Lysosome")
dim(lysosome)
genes_in_lysosome = unique(lysosome$V2)
length(genes_in_lysosome)
#465
nucleus = subset(compartments,compartments$V4=="Nucleus")
genes_in_nucleus = unique(nucleus$V2)
length(genes_in_nucleus)
#6204
golgi = subset(compartments,compartments$V4=="Golgi apparatus")
genes_in_golgi = unique(golgi$V2)
length(genes_in_golgi)
#1180
#length(intersect(secre_genelist[,1],genes_in_golgi))
#write.table(genes_in_golgi,file=paste("./cancer_data/amplified_genes/Golgi_uniprot_gene_list.txt",sep=""),quote=FALSE,row.names = FALSE,sep="\t")
genes_in_golgi = read.table(file=paste("./cancer_data/amplified_genes/Golgi_uniprot_gene_list.txt",sep=""),sep="\t")


Mitochondrion = subset(compartments,compartments$V4=="Mitochondrion")
genes_in_Mitochondrion = unique(Mitochondrion$V2)
length(genes_in_Mitochondrion)
#1225
Cytosol = subset(compartments,compartments$V4=="Cytosol")
genes_in_Cytosol = unique(Cytosol$V2)
length(genes_in_Cytosol)
# 4694
Cytoskeleton = subset(compartments,compartments$V4=="Cytoskeleton")
genes_in_Cytoskeleton = unique(Cytoskeleton$V2)
length(genes_in_Cytoskeleton)

extracellular = subset(compartments,compartments$V4=="Extracellular space")
genes_in_extracellular = unique(extracellular$V2)
length(genes_in_extracellular)

plasmamembrane = subset(compartments,compartments$V4=="Plasma membrane")
genes_in_plasmamembrane = unique(plasmamembrane$V2)
length(genes_in_plasmamembrane)

Chromatin = subset(compartments,compartments$V4=="Chromatin")
genes_in_Chromatin = unique(Chromatin$V2)
length(genes_in_Chromatin)

ER = subset(compartments,compartments$V4=="Endoplasmic reticulum")
genes_in_ER = unique(ER$V2)
length(genes_in_ER)
#1402
Peroxisome = subset(compartments,compartments$V4=="Peroxisome")
genes_in_Peroxisome = unique(Peroxisome$V2)
length(genes_in_Peroxisome)

Nuclearmembrane = subset(compartments,compartments$V4=="Nuclear membrane")
genes_in_Nuclearmembrane = unique(Nuclearmembrane$V2)
length(genes_in_Nuclearmembrane)

Receptor = subset(compartments,compartments$V4=="Receptor complex")
genes_in_Receptor = unique(Receptor$V2)
length(genes_in_Receptor)

Surface = subset(compartments,compartments$V4=="Cell surface")
genes_in_Surface = unique(Surface$V2)
length(genes_in_Surface)
 
Tethering = subset(compartments,compartments$V4=="Tethering complex")
genes_in_Tethering = unique(Tethering$V2)
length(genes_in_Tethering)

COPII = subset(compartments,compartments$V4=="COPII-coated ER to Golgi transport vesicle")
genes_in_COPII = unique(COPII$V2)
length(genes_in_COPII)

COPI = subset(compartments,compartments$V4=="COPI-coated vesicle")
genes_in_COPI = unique(COPI$V2)
length(genes_in_COPI)

Ion = subset(compartments,compartments$V4=="Ion channel complex")
genes_in_Ion = unique(Ion$V2)
length(genes_in_Ion)

Calcium = subset(compartments,compartments$V4=="Calcium channel complex")
genes_in_Calcium = unique(Calcium$V2)
length(genes_in_Calcium)

Endosome = subset(compartments,compartments$V4=="Endosome")
genes_in_Endosome = unique(Endosome$V2)
length(genes_in_Endosome)

Earlyendosome = subset(compartments,compartments$V4=="Early endosome")
genes_in_Earlyendosome = unique(Earlyendosome$V2)
length(genes_in_Earlyendosome)

Lateendosome = subset(compartments,compartments$V4=="Late endosome")
genes_in_Lateendosome = unique(Lateendosome$V2)
length(genes_in_Lateendosome)

###################
points <- read.table(file=paste("./amplified_genes/points_29_9_2020.txt",sep=""),sep="\t",header=TRUE,quote="")
head(points)
dim(points)
pointsclassmorethanIV <- subset(points,points$Class!="IV")
dim(pointsclassmorethanIV)
head((pointsclassmorethanIV))
genesclassmorethanIV = unique(pointsclassmorethanIV$Gene)
length(genesclassmorethanIV)
#Lateendosome_class_III_or_II_genes  = intersect(genesclassmorethanIV,genes_in_Lateendosome)
#Earlyendosome_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_Earlyendosome)
#Endosome_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_Endosome)
#Earlyendosome_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_Chromatin)

Golgi_uniprot_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_golgi)
ER_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_ER)
Cytosol_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_Cytosol)
lysosome_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_lysosome)
Mitochondrion_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_Mitochondrion)
nucleus_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_nucleus)
Cytoskeleton_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_Cytoskeleton)
plasmamembrane_class_III_or_II_genes = intersect(genesclassmorethanIV,genes_in_plasmamembrane)

write.table(Golgi_uniprot_class_III_or_II_genes,file=paste("./amplified_genes/Golgi_uniprot_class_III_or_II_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(ER_class_III_or_II_genes,file=paste("./amplified_genes/ER_class_III_or_II_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(Cytosol_class_III_or_II_genes,file=paste("./amplified_genes/Cytosol_class_III_or_II_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(lysosome_class_III_or_II_genes,file=paste("./amplified_genes/lysosome_class_III_or_II_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(Mitochondrion_class_III_or_II_genes,file=paste("./amplified_genes/Mitochondrion_class_III_or_II_geness.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(nucleus_class_III_or_II_genes,file=paste("./amplified_genes/nucleus_class_III_or_II_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(Cytoskeleton_class_III_or_II_genes,file=paste("./amplified_genes/Cytoskeleton_class_III_or_II_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(plasmamembrane_class_III_or_II_genes,file=paste("./amplified_genes/plasmamembrane_class_III_or_II_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")

write.table(genes_in_golgi,file=paste("./amplified_genes/Golgi_uniprot_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(genes_in_ER,file=paste("./amplified_genes/ER_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(genes_in_Cytosol,file=paste("./amplified_genes/Cytosol_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(genes_in_lysosome,file=paste("./amplified_genes/lysosome_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(genes_in_Mitochondrion,file=paste("./amplified_genes/Mitochondrion_geness.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(genes_in_nucleus,file=paste("./amplified_genes/nucleus_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(genes_in_Cytoskeleton,file=paste("./amplified_genes/Cytoskeleton_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")
write.table(genes_in_plasmamembrane,file=paste("./amplified_genes/plasmamembrane_genes.txt",sep=""), quote=FALSE,row.names = TRUE,col.names = TRUE,sep="\t")

#########################
#Look for which genes are pasma membrane etc..

genes_in_organelle = genes_in_golgi[,1]
organelle_name = "Golgi" #here change the name for each organelle above!
stage = "late_stage"

survival_genes_table <- read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_chr_wilcox_",stage,"_table.xls",sep=""),sep="\t",header=TRUE,quote="")
dim(survival_genes_table)
#head(survival_genes_table)
colnamessurv = colnames(survival_genes_table)
unionlistofgenes=Reduce(union, survival_genes_table)
length(unionlistofgenes)
#head(unionlistofgenes)
table=NULL
percentages_out_of_survival_genes = NULL
percentages_out_of_genes_in_organelle = NULL
f.testval = NULL
for (k in 1:dim(survival_genes_table)[2]){
  gene_in_intersection2 = intersect(genes_in_organelle,survival_genes_table[,k]) # intersection between the reduced coordinates and secre genes only!!!!!!
  percentages_out_of_survival_genes[k] = round((length(gene_in_intersection2)/length(survival_genes_table[,k])*100),1)
  percentages_out_of_genes_in_organelle[k] = round(((length(gene_in_intersection2)/length(genes_in_organelle))*100),1)  
  f.test = fisher.test(rbind(c(length(gene_in_intersection2),length(genes_in_organelle)-length(gene_in_intersection2)),
                             c(length(survival_genes_table[,k])-length(gene_in_intersection2),21683-(length(survival_genes_table[,k])-length(gene_in_intersection2)))),alternative="greater")
  f.testval[k] = round(f.test$p.value,2)
  table = qpcR:::cbind.na(table, gene_in_intersection2)
}
percentages_out_of_survival_genes 
percentages_out_of_genes_in_organelle  
f.testval
table = table[,-1]
table = qpcR:::rbind.na(percentages_out_of_genes_in_organelle,table)
table = qpcR:::rbind.na(percentages_out_of_survival_genes,table)
table = qpcR:::rbind.na(f.testval,table)
colnames(table)=colnamessurv
table

write.table(table,file=paste("./cancer_data/amplified_genes/",organelle_name,"_amplified_survival_chr_wilcox_",stage,"_table.xls",sep=""), quote=FALSE,row.names = TRUE,sep="\t")


organelle_name = "Golgi"
table_notreported = read.table(file=paste("./cancer_data/amplified_genes/",organelle_name,"_amplified_survival_chr_wilcox_notreported_table.xls",sep=""),header=TRUE,sep="\t")
table_early       = read.table(file=paste("./cancer_data/amplified_genes/",organelle_name,"_amplified_survival_chr_wilcox_early_stage_table.xls",sep=""),header=TRUE,sep="\t")
table_late        = read.table(file=paste("./cancer_data/amplified_genes/",organelle_name,"_amplified_survival_chr_wilcox_late_stage_table.xls",sep=""),header=TRUE,sep="\t")
table_notreported = table_notreported[-c(1,2,3),-1]
table_early = table_early[-c(1,2,3),-1]
table_late = table_late[-c(1,2,3),-1] 
notreported_unionlistofgenes = Reduce(union, table_notreported)
early_unionlistofgenes = Reduce(union, table_early)
late_unionlistofgenes = Reduce(union, table_late)
length(unique(notreported_unionlistofgenes))-1
# not reported
length(unique(early_unionlistofgenes))-1
# early stage
length(unique(late_unionlistofgenes))-1
# late stage
length(unique(union(late_unionlistofgenes, union(notreported_unionlistofgenes, early_unionlistofgenes))))-1
#

final_glycogenes = (unique(union(late_unionlistofgenes, union(notreported_unionlistofgenes, early_unionlistofgenes))))[-4]

####barplots

reduced_bands <- list.files("./cancer_data/amplified_genes/",pattern=paste("*_amplified_survival_chr_wilcox_.+_table.txt",sep=""),full.names=TRUE)
reduced_bands 
for(i in 1:length(reduced_bands)){
    reduced_bands_positions = read.table(file=reduced_bands[i],header=TRUE,sep="\t",quote = "")
    name=strsplit(reduced_bands[i],"/")
    name2=name[[1]][length(name[[1]])]
    name=strsplit(name2,"_")
    stage=strsplit(name2,"_")
    name=name[[1]][1]
    print(name)
    stage=stage[[1]][6]
    values = reduced_bands_positions[2,2:length(reduced_bands_positions)]
    values = as.numeric(as.character.Date(values))
    fisher.test = reduced_bands_positions[1,2:length(reduced_bands_positions)]
    fisher.test = as.numeric(as.character.Date(fisher.test))
    if (i%%3 == 1){par(mfrow=c(3,1))}
    bp = barplot(values,main=paste(name," in ",stage," cancers",sep=""),sub=paste("Fraction of genes belonging to ",name," out of the total n. of genes found in each cancer (within bars Fisher test values are shown).",sep=""),
            names.arg=colnames(reduced_bands_positions)[2:length(reduced_bands_positions)],ylim=c(0,max(values)), ylab="percentages", border="black", col="yellow", las=2,cex.names=1.2)
    text(bp, values/2, labels = fisher.test , cex=1)  
    if (i%%3 == 0){
        dev.print(pdf,paste("./cancer_data/amplified_genes/plot_of_fraction_of_genes_", name,".pdf",sep=""))
        dev.off()
    }
}

#########################################################################
##Enrichment GO KEGG
stage="early_stage"

reduced_bands <- list.files("./cancer_data/survivalplots_chr_wilcox/",pattern=paste("*_survival_listgenes_",stage,".txt",sep=""),full.names=TRUE)
reduced_bands 
for(i in 1:length(reduced_bands)){
  id=NULL
  reduced_bands_positions = read.table(file=reduced_bands[i],header=TRUE,sep="\t",quote = "")
  name=strsplit(reduced_bands[i],"/")
  name2=name[[1]][length(name[[1]])]
  name=strsplit(name2,"_")
  name=name[[1]][1]
  print(name)
  gene_names = reduced_bands_positions$x
  gene_names = unique(gene_names)
  length(gene_names)
  for(j in 1:length(gene_names)){
    if ( is.element(gene_names[j], results[,1])==TRUE ) {
      sub_results = subset( results, results[,1] == gene_names[j] )
      if (!is.na(sub_results$entrezgene)){
        id[j] = sub_results[,2]
      }else{ id[j] = as.character(gene_names[j]) }
    }else{
      id[j] = as.character(gene_names[j])
    }
  }
  id = as.character(id)
  #print(id)
  length(id)
  kk = NULL
  print("Calculating KEGG PATHWAY. PLEASE WAIT!")
  #kk <- enrichKEGG(gene = id, OrgDb='org.Hs.eg.db', ont = "BP",qvalueCutoff=0.05,readable = TRUE)
  kk  <- enrichPathway(gene=id,pvalueCutoff=0.05, readable=T)
  if(dim(data.frame(kk))[1] != 0){
    print(head(data.frame(kk)))
    write.table(data.frame(kk),file=paste("./cancer_data/amplified_genes/Reatcome_PATHWAY_analysis/pathway_", name, "_late_stage.xls",sep=""),quote=F,row.names=F,sep="\t")
  }
  ego=NULL
  print("Calculating GO. PLEASE WAIT!")
  ego <- enrichGO(gene = id, OrgDb='org.Hs.eg.db', ont = "BP",qvalueCutoff=0.05,readable = TRUE)
  if(dim(data.frame(ego))[1] != 0){
    print(head(data.frame(ego)))
    write.table(data.frame(ego),file=paste("./cancer_data/amplified_genes/Kegg_GO_analysis/go_", name, "_late_stage.xls",sep=""),quote=F,row.names=F,sep="\t")
  }
}

#########Fraction of genes heatmap out of path cancers
library(qpcR)
library(gplots)
stage = "late_stage"

cancer_gene_list <- list.files("./cancer_data/survivalplots_chr_wilcox/",pattern="*_survival_listgenes_",stage,".txt",full.names=TRUE)
cancer_gene_list
pathway_gene_list <- list.files("./cancer_data/pathways/",pattern="$",full.names=TRUE)
pathway_gene_list
value=matrix(0,length(pathway_gene_list),length(cancer_gene_list))
value2=matrix(0,length(pathway_gene_list),length(cancer_gene_list))
mtable=matrix(0,length(pathway_gene_list),length(cancer_gene_list))

name_cancer=NULL
name_path=NULL

#table has to grow

for (i in 1:length(cancer_gene_list)){
  name=strsplit(cancer_gene_list[i],"/")
  name2=name[[1]][length(name[[1]])]
  name=strsplit(name2,"_")
  name_cancer[i]=name[[1]][1]
  if(!is.null(tryCatch(read.table(file=cancer_gene_list[i],sep="\t",header=TRUE,quote=""), error=function(e) NULL))){
    cancer_gene = read.table(file=cancer_gene_list[i],sep="\t",header=TRUE,quote="")
    print(name_cancer[i])
    for (j in 1:length(pathway_gene_list)){
      pathway_gene = read.table(file=pathway_gene_list[j],sep="\t",header=TRUE,quote="")
      name=strsplit(pathway_gene_list[j],"/")
      name2=name[[1]][length(name[[1]])]
      name=strsplit(name2,"_")
      name = name[[1]][2]
      name_path[j] = strsplit(name,".txt")[[1]]
      gene_in_intersection = intersect(cancer_gene[,1],pathway_gene[,1])
      mtable[j,i] = length(gene_in_intersection)
      value[j,i]=round((length(gene_in_intersection)/length(cancer_gene[,1])*100),1)
      value2[j,i]=round((length(gene_in_intersection)/length(pathway_gene[,1])*100),1)
    }
  }
}

rownames(value)=name_path
colnames(value)=name_cancer
rownames(value2)=name_path
colnames(value2)=name_cancer
rownames(mtable)=name_path
colnames(mtable)=name_cancer
name=strsplit(cancer_gene_list[1],"/")
name2=name[[1]][length(name[[1]])]
name=strsplit(name2,"_")
name = name[[1]][4]
name = strsplit(name,".txt")[[1]]
heatmap.2(value,main=paste(name," stage cancer \n genes in intersection \n out of cancer genes",sep=""), Colv=T, scale='none',cexRow = 0.9, cexCol = 1.5,keysize = 1.3,trace="none",
          margins=c(7,9), col=colorRampPalette(c('darkblue', 'white'))(50),dendrogram = 'none')
write.table(value,file=paste("./cancer_data/amplified_genes/heatmap_of_",name,"stage cancer \n genes in intersection \n out of cancer genes",sep=""),quote=F,row.names=F,sep="\t")

heatmap.2(mtable,main=paste(name," genes in intersection",sep=""), Colv=T, scale='none',cexRow = 0.9, cexCol = 1.5,keysize = 1.3,trace="none",
          margins=c(7,9), col=colorRampPalette(c('darkblue', 'white'))(50),dendrogram = 'none')

heatmap.2(value2,main=paste(name," stage cancer \n  genes in intersection \n out of pathway genes",sep=""), Colv=T, scale='none',cexRow = 0.9, cexCol = 1.5,keysize = 1.3,trace="none",
          margins=c(7,9), col=colorRampPalette(c('darkblue', 'white'))(50),dendrogram = 'none')


########################
#Elimination of known oncogenes
##IL problema e' che qui elimino l'intera banda invece dei geni che cadono nell'intervallo +-1.8Mbasi!!!!

library("biomaRt")

# Select appropriate database
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "http://uswest.ensembl.org")
ensembl <- useDataset("hsapiens_gene_ensembl", mart=ensembl)

# set up any filters and their appropriate values
filters <- c("hgnc_symbol") #cerca tra i nomi dei geni
#filters = 'ensembl_gene_id'

cancers <- list.files("./cancer_data/expression_median/",pattern="*_expression_median.txt",full.names=TRUE)
cancers

for (j in 1:){
  name=strsplit(cancers[j],"/")
  name2=name[[1]][length(name[[1]])]
  name3=strsplit(name2,"_")
  name=name3[[1]][1]
  print(name)
  significant_genes <- list.files("./cancer_data/amplified_genes/gene_list_Pearson_Chr/",pattern=paste(name,"_Chr*",sep=""),full.names=TRUE)
  for(s in 1:length(significant_genes)){
    if(!is.null(tryCatch(read.table(significant_genes[s],header=FALSE,row.names=1,sep="\t"), error=function(e) NULL))){
      name4=strsplit(significant_genes[s],"/")
      name5=name4[[1]][length(name4[[1]])]
      name6=strsplit(name5,"_")
      chrname=name6[[1]][2]
      signifgenes = read.table(significant_genes[s],header=TRUE,row.names=1,sep="\t")
      genes = rownames(signifgenes)
      # select attributes to return
      attributes <- c('chromosome_name', 'start_position', 'end_position', 
                      'strand','hgnc_symbol', 'band', 'description')
      # perform biomart query
      coordinates = getBM(attributes=attributes, filters=filters, values=genes, mart=ensembl) #in values I fetch the info
      coordinates = coordinates[with(coordinates, order(chromosome_name, start_position)), ]
      head(coordinates)
      tail(coordinates)
      dim(coordinates)
      lost_genes=setdiff(genes,unique(coordinates$hgnc_symbol)) # geni che mi perdo quando faccio la getBM query
      if(length(lost_genes)>0){write.table(lost_genes, paste("./cancer_data/amplified_genes/gene_positions_pearson_chr/",name,"_",chrname,"_lost_genes.txt",sep=""), quote=FALSE,row.names = FALSE,sep="\t")}
      write.table(coordinates, paste("./cancer_data/amplified_genes/gene_positions_pearson_chr/",name,"_",chrname,"_bands_genepositions.txt",sep=""), quote=FALSE,row.names = FALSE,sep="\t")
      #raggruppa tutti i geni prima per cromosoma poi per band
      chromosomefound = unique(coordinates$chromosome_name)
      chr = vector("list")
      for ( i in 1: length(chromosomefound) ){
        if (nchar(chromosomefound[i]) < 3){#prima controlla doppioni. escludi cromosom name maggiori di 2
          chr[[i]] = subset(coordinates,coordinates$chromosome_name == chromosomefound[i])
        }
      }
      chr
      band = vector("list")
      k=0
      for ( i in 1: length(chr)){
        if( !is.null(chr[[i]]) ){
          bandfound = unique(chr[[i]]$band)
          for ( h in 1: length(bandfound) ){
            k=k+1
            band[[k]] = subset(chr[[i]],chr[[i]]$band == bandfound[h])
          }
        }
      }
      #NOW look for already known cancer driver genes
      # perform biomart query
      reduced_coordinates=coordinates
      for(i in 1:length(band)){ # see among those BANDS which one has to be eliminated
        pos_start = min(band[[i]]$start_position)-1800000
        pos_end = max(band[[i]]$end_position)+1800000
        genesfound = getBM(attributes=attributes, filters = c("chromosome_name", "start", "end","strand"), 
                           values = list(band[[i]]$chromosome_name[1], pos_start, pos_end, band[[i]]$strand[1]) , mart=ensembl) #in values I fetch the info
        genesfound = unique(genesfound$hgnc_symbol)
        genesfound
        onco_genelist <- read.table(file="./cancer_data/known_oncogene_list.txt",sep="\t",header=TRUE)
        gene_in_intersection = NULL
        gene_in_intersection = intersect(onco_genelist[[1]],genesfound)
        #print(paste("Found those genes in this region ", pos_start, " - ", pos_end," strand ",  band[[i]]$strand[1]), sep=" ")
        #print(genesfound)
        if(length(gene_in_intersection)==0){
          print("No oncogenes found in your list!")
        }else{
          print(as.character(band[[i]]$band[1]))
          print("Those genes are also oncogenes: ")
          print(gene_in_intersection)
          #elimina dalla lista questa banda!!!! ###NON LA BANDA tutti i geni che si trovano a + o =- 1.8 MB basi ANZI solo la regione amplificata
          current_band = band[[i]]$band[1]
          reduced_coordinates=subset(reduced_coordinates,reduced_coordinates$band!=current_band) #eliminate that band
          write.table(gene_in_intersection, paste("./cancer_data/amplified_genes/gene_positions_pearson_chr/",name,"_",chrname,"_",(as.character(band[[i]]$band[1])),"_genes_in_intersection_band_to_be_discarded.txt",sep=""), quote=FALSE,row.names = FALSE,sep="\t")
        }
      }
      write.table(reduced_coordinates, paste("./cancer_data/amplified_genes/gene_positions_pearson_chr/bands_of_interest/",name,"_",chrname,"_reduced_bands_positions.txt",sep=""), quote=FALSE,row.names = FALSE,sep="\t")
    }else{print("no genes found!")}
  }
}
#######################

table=NULL
reduced_bands_positions <- list.files("./cancer_data/amplified_genes/gene_positions_pearson_chr/bands_of_interest/",pattern="*_reduced_bands_positions.txt",full.names=TRUE)
significant_genes_pearson = reduced_bands_positions
length(significant_genes_pearson)
table = read.table(file=significant_genes_pearson[1],sep="\t",header=FALSE)
name=strsplit(significant_genes_pearson[1],"/")
name2=name[[1]][length(name[[1]])]
name3=strsplit(name2,"_")
name=name3[[1]][1]
chrname=name3[[1]][2]
print(name)
print(chrname)
gene_name = c(paste(name,"_",chrname,"_genes",sep=""))
table = as.matrix(table)
table[1,5] = gene_name
table = table[,5]
head(table)
table=unique(table)
#table has to grow
library(qpcR)
for (i in 2:length(significant_genes_pearson)){
  new_column_to_add = read.table(file=significant_genes_pearson[i],sep="\t",header=FALSE,quote="")
  name=strsplit(significant_genes_pearson[i],"/")
  name2=name[[1]][length(name[[1]])]
  name3=strsplit(name2,"_")
  name=name3[[1]][1]
  chrname=name3[[1]][2]
  print(name)
  print(chrname)
  gene_name = c(paste(name,"_",chrname,"_genes",sep=""))
  new_column_to_add = (as.matrix(new_column_to_add))
  new_column_to_add[1,5] = gene_name
  new_column_to_add= unique(new_column_to_add)
  table = qpcR:::cbind.na(table, new_column_to_add[,5])
}
table[1:2,1:40]
dim(table)
write.table(table,file=paste("./cancer_data/amplified_genes/amplified_Chr_pearson_reduced_bands_positions_table.xls",sep=""),quote=F,row.names=F,col.names=F,sep="\t")
table=read.table("./cancer_data/amplified_genes/amplified_Chr_pearson_reduced_bands_positions_table.xls",header=T,sep="\t")

unionlistofgenes=Reduce(union, table)
head(unionlistofgenes)
length(unique(unionlistofgenes))
#6624 with wilcox chromosome based
#4130 reduced genes in all cancers OLD method
#4273 reduced genes in all cancers NEW method
x=read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE)
length(intersect(x[,5], unique(unionlistofgenes)))/length(x[,5])
#0.3896104
int_genes = intersect(x[,5], unique(unionlistofgenes))


######################################################
#### COMPARE YOUR RESULTS WITH LITERATURE
### compare the genes we found in PRAD with literature #https://www.cell.com/cell/fulltext/S0092-8674(15)01339-2  Cancer Genome Atlas Research Network  The molecular taxonomy of primary prostate cancer. Cell. 2015; 163: 1011-1025
literature_regions_prad = read.table(file=paste("./cancer_data/literature_regions_prad.txt",sep=""),header=F,sep="")

amplified_regions = read.table(file=paste("./cancer_data/amplified_genes/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
dim(amplified_regions)
prad_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_prad_Prostate_Adenocarcinoma.txt")
dim(prad_amplified_regions)
prad_amplified_regions[2,]
#confronta i geni
literature_regions_prad$V4
literature_gene_list = unique(strsplit(paste(literature_regions_prad$V4,collapse=","),",")[[1]])
length(literature_gene_list)  
#[1] 40
prad_amplified_genes = strsplit(paste(prad_amplified_regions$genes,collapse=","),",")
length(prad_amplified_genes[[1]])
#1083
(length(intersect(paste("",literature_gene_list), prad_amplified_genes[[1]]))+length(intersect(literature_gene_list, prad_amplified_genes[[1]])))/length(literature_gene_list)   
#[1] 0.65
setdiff(paste("",literature_gene_list), prad_amplified_genes[[1]])
# " LOC727677"    " MIR1204"    " ZNF639"   " FLJ42969"     " LOC100130987"     " ADRBK1"       " ZNF703"       " FGFR1"        " WHSC1L1"      " LETM2"        " TOX"         
# " ORAOV1"  " LOC100128164"    " LOC90246"     " MIR1280"
# tolti i LOCs, MIR1204, FLJ42969
#   " ADRBK1"     " ZNF703"      " FGFR1"  " WHSC1L1"   " LETM2"  " TOX"   " MIR1280" " ZNF639" 
#27/35*100=77.14%
fisher.test(rbind(c(26,9),c(1846,22895)),alternative="greater")
#p-value < 2.2e-16

######################################################
### compare the genes we found in LGG with literature https://www.nejm.org/doi/full/10.1056/NEJMoa1402121 Brat DJ, Verhaak RGW, Aldape KD, Yung WKA, Salama SR, Cooper LAD, et al. Comprehensive, integrative genomic analysis of diffuse lower-grade gliomas. N Engl J Med. 2015;372:2481-98.
literature_regions_lgg = read.table(file=paste("./cancer_data/literature_regions_lgg.txt",sep=""),header=TRUE,sep="\t")
dim(literature_regions_lgg)
head(literature_regions_lgg)
amplified_regions = read.table(file=paste("./cancer_data/amplified_genes/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
dim(amplified_regions)
lgg_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_lgg_Brain_Lower_Grade_Glioma.txt")
dim(lgg_amplified_regions)
head(lgg_amplified_regions)
#confronta i geni
literature_gene_list = unique(unlist(rep(literature_regions_lgg[,1:16]),use.names = FALSE))
length(literature_gene_list)
#1073-45-34=994
lgg_amplified_genes = strsplit(paste(lgg_amplified_regions$genes,collapse=","),",")
length(lgg_amplified_genes[[1]])
#2555
genes_not_found=setdiff(paste("",literature_gene_list), lgg_amplified_genes[[1]])
length(which(substring(genes_not_found,1,4)==" LOC"))
#45
length(which(substring(genes_not_found,1,9)==" hsa-mir-"))
#34
(length(intersect(paste("",literature_gene_list), lgg_amplified_genes[[1]]))+length(intersect(literature_gene_list, lgg_amplified_genes[[1]])))/(length(literature_gene_list)-34-45)
#527 found 467 not found
#0.5301
fisher.test(rbind(c(527,467),c(2372,21410)),alternative="greater")
#p-value < 2.2e-16


######################################################
### compare the genes we found in HEAD&NECK with literature https://www.nature.com/articles/nature14129 Lawrence, M., Sougnez, C., Lichtenstein, L. et al. Comprehensive genomic characterization of head and neck squamous cell carcinomas. Nature 517, 576-582 (2015) doi:10.1038/nature14129
literature_regions_headneck = read.table(file=paste("./cancer_data/literature_regions_head&neck.txt",sep=""),header=TRUE,sep="\t")
dim(literature_regions_headneck)
head(literature_regions_headneck)
amplified_regions = read.table(file=paste("./cancer_data/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
dim(amplified_regions)
headneck_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_hnsc_Head_and_Neck_Squamous_Cell_Carcinoma.txt")
dim(headneck_amplified_regions)
head(headneck_amplified_regions)
#confronta i geni
literature_gene_list = unique(unlist(rep(literature_regions_headneck),use.names = FALSE))
length(literature_gene_list)
#5193-236-140=4817
headneck_amplified_genes = strsplit(paste(headneck_amplified_regions$genes,collapse=","),",")
length(headneck_amplified_genes[[1]])
#2592
#3042
#3042/24776*100 = 12.27%
genes_not_found=setdiff(paste("",literature_gene_list), headneck_amplified_genes[[1]])
length(which(substring(genes_not_found,1,4)==" LOC"))
#236
length(which(substring(genes_not_found,1,9)==" hsa-mir-"))
#140
(length(intersect(paste("",literature_gene_list), headneck_amplified_genes[[1]]))+length(intersect(literature_gene_list, headneck_amplified_genes[[1]])))/4817
#208
#303 found 3739 not found
# 0.06290222
fisher.test(rbind(c(303,4514),c(2739,17238)),alternative="greater")
#p-value = 1 FAILURE!!!
fisher.test(rbind(c(623,4194),c(2419,17558)),alternative="greater")
#p-value = 0.06226

######################################################
### compare the genes we found in Eshophageal carcinoma with literature https://www.nature.com/articles/nature20805  Kim, J., Bowlby, R., Mungall, A. et al. Integrated genomic characterization of oesophageal carcinoma. Nature 541, 169-175 (2017) doi:10.1038/nature20805
literature_regions_esca = read.table(file=paste("./cancer_data/literature_regions_esca.txt",sep=""),header=TRUE,sep="\t")
dim(literature_regions_esca)
head(literature_regions_esca)
amplified_regions = read.table(file=paste("./cancer_data/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
dim(amplified_regions)
esca_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_esca_Esophageal_Carcinoma.txt")
dim(esca_amplified_regions)
head(esca_amplified_regions)
#confronta i geni
literature_gene_list = unique(unlist(rep(literature_regions_esca),use.names = FALSE))
length(literature_gene_list)
#273-16-10=247
esca_amplified_genes = strsplit(paste(esca_amplified_regions$genes,collapse=","),",")
length(esca_amplified_genes[[1]])
#1979
#2358
#2358/24776*100 = 9,51%
genes_not_found=setdiff(paste("",literature_gene_list), esca_amplified_genes[[1]])
length(which(substring(genes_not_found,1,4)==" LOC"))
#16
length(which(substring(genes_not_found,1,9)==" hsa-mir-"))
#10
(length(intersect(paste("",literature_gene_list), esca_amplified_genes[[1]]))+length(intersect(literature_gene_list, esca_amplified_genes[[1]])))/247
#103
#105 found 142 not found
#0.417004
#0.4251012
fisher.test(rbind(c(103,144),c(2245,22274)),alternative="greater")
#p-value < 2.2e-16

######################################################
### compare the genes we found in Cervical cancer with literature https://www.nature.com/articles/nature21386  Burk, R., Chen, Z., Saller, C. et al. Integrated genomic and molecular characterization of cervical cancer. Nature 543, 378-384 (2017) doi:10.1038/nature21386
literature_regions_cesc = read.table(file=paste("./cancer_data/literature_regions_cesc.txt",sep=""),header=TRUE,sep="\t")
dim(literature_regions_cesc)
head(literature_regions_cesc)
amplified_regions = read.table(file=paste("./cancer_data/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
dim(amplified_regions)
cesc_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_cesc_Cervical_Squamous_Cell_Carcinoma_and_Endocervical_Adenocarcinoma.txt")
dim(cesc_amplified_regions)
head(cesc_amplified_regions)
#confronta i geni
literature_gene_list = unique(unlist(rep(literature_regions_cesc),use.names = FALSE))
length(literature_gene_list)
#2555
cesc_amplified_genes = strsplit(paste(cesc_amplified_regions$genes,collapse=","),",")
length(cesc_amplified_genes[[1]])
#2032
#2680
#2680/24776*100 = 10.81%
genes_not_found=setdiff(paste("",literature_gene_list), cesc_amplified_genes[[1]])
length(which(substring(genes_not_found,1,4)==" LOC"))
#0
length(which(substring(genes_not_found,1,9)==" hsa-mir-"))
#0
(length(intersect(paste("",literature_gene_list), cesc_amplified_genes[[1]]))+length(intersect(literature_gene_list, cesc_amplified_genes[[1]])))/length(literature_gene_list)
#832 found
#967 found 1579 not found
#0.3784736
#0.325636
fisher.test(rbind(c(967,1588),c(1713,20516)),alternative="greater")
#p-value < 2.2e-16

######################################################
### compare the genes we found in Lung Adeno with literature https://www.nature.com/articles/nature13385 Collisson, E., Campbell, J., Brooks, A. et al. Comprehensive molecular profiling of lung adenocarcinoma. Nature 511, 543-550 (2014) doi:10.1038/nature13385
literature_regions_luad = read.table(file=paste("./cancer_data/literature_regions_luad.txt",sep=""),header=F,sep="\t")
literature_regions_luad[,1]
amplified_regions = read.table(file=paste("./cancer_data/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
luad_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_luad_Lung_Adenocarcinoma.txt")
dim(luad_amplified_regions)
luad_amplified_genes = strsplit(paste(luad_amplified_regions$genes,collapse=","),",")
length(luad_amplified_genes[[1]])
#3904
#3904/24776*100=15.75%
#confronta i geni
literature_gene_list=unique(unlist(rep(literature_regions_luad),use.names = FALSE))
length(literature_gene_list)
#2176-130-72= 1974
genes_not_found=setdiff(paste("",literature_gene_list), luad_amplified_genes[[1]])
length(which(substring(genes_not_found,1,4)==" LOC"))
#130
length(which(substring(genes_not_found,1,9)==" hsa-mir-"))
#72
(length(intersect(paste("",literature_gene_list), luad_amplified_genes[[1]]))+length(intersect(literature_gene_list, luad_amplified_genes[[1]])))/1974 
#0.6697062
#1322 genes found 652 not found
setdiff(paste("",literature_gene_list), luad_amplified_genes[[1]])
fisher.test(rbind(c(1322,652),c(2582,20220)),alternative="greater")
#p-value < 2.2e-16

######################################################
### compare the genes we found in Uveal Melanoma with literature https://www.cell.com/cancer-cell/fulltext/S1535-6108(17)30295-7#secsectitle0470 A. Gordon Robertson, Juliann Shih, Christina Yau, Integrative Analysis Identifies Four Molecular and Clinical Subsets in Uveal Melanoma. Cell, ISSN: 1878-3686, Vol: 32, Issue: 2, Page: 204-220.e15, 2017, DOI:https://doi.org/10.1016/j.ccell.2017.07.003
literature_regions_uv = read.table(file=paste("./cancer_data/literature_regions_uveal.txt",sep=""),header=T,sep="\t")
literature_regions_uv[1:10,1]
amplified_regions = read.table(file=paste("./cancer_data/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
uv_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_uvm_Uveal_Melanoma.txt")
dim(uv_amplified_regions)
uv_amplified_genes = strsplit(paste(uv_amplified_regions$genes,collapse=","),",")
length(uv_amplified_genes[[1]])
#520
#520/24776*100=2%
#confronta i geni
literature_gene_list=unique(literature_regions_uv[,1])
length(literature_gene_list)
#2627-30=2597
genes_not_found=setdiff(paste("",literature_gene_list), uv_amplified_genes[[1]])
length(which(substring(genes_not_found,1,4)==" LOC"))
#30
length(which(substring(genes_not_found,1,9)==" hsa-mir-"))
#0
(length(intersect(paste("",literature_gene_list), uv_amplified_genes[[1]]))+length(intersect(literature_gene_list, uv_amplified_genes[[1]])))/2597
#0.0716211
#186 genes found 2411 not found
setdiff(paste("",literature_gene_list), uv_amplified_genes[[1]])
fisher.test(rbind(c(186,2411),c(334,21845)),alternative="greater")
#p-value < 2.2e-16
fisher.test(rbind(c(86,2511),c(434,21745)),alternative="greater")
#p-value = 1.314e-05
fisher.test(rbind(c(76,2521),c(444,21735)),alternative="greater")
#p-value = 0.00181
fisher.test(rbind(c(66,2531),c(454,21725)),alternative="greater")
#p-value = 0.05871
fisher.test(rbind(c(56,2541),c(464,21715)),alternative="greater")
#p-value = 0.4358
fisher.test(rbind(c(46,2551),c(474,21705)),alternative="greater")
#p-value = 0.9062

######################################################
### compare the genes we found in Lung Squamous with literature https://www.nature.com/articles/nature11404 2012 Hammerman, P., Lawrence, M., Voet, D. et al. Comprehensive genomic characterization of squamous cell lung cancers. Nature 489, 519-525 (2012) doi:10.1038/nature11404
literature_regions_lusc = read.table(file=paste("./cancer_data/literature_regions_lusc.txt",sep=""),header=F,sep="\t")
literature_regions_lusc[1:3,1:3]
amplified_regions = read.table(file=paste("./cancer_data/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
lusc_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_lusc_Lung_Squamous_Cell_Carcinoma.txt")
dim(lusc_amplified_regions)
lusc_amplified_genes = strsplit(paste(lusc_amplified_regions$genes,collapse=","),",")
length(lusc_amplified_genes[[1]])
#4105
#4105/24776*100=16.56%
#confronta i geni
literature_gene_list=unique(unlist(rep(literature_regions_lusc),use.names = FALSE))
length(literature_gene_list)
#1145-27-95=1023
genes_not_found=setdiff(paste("",literature_gene_list), lusc_amplified_genes[[1]])
length(which(substring(genes_not_found,1,4)==" LOC"))
#27
length(which(substring(genes_not_found,1,9)==" hsa-mir-"))
#95
(length(intersect(paste("",literature_gene_list), lusc_amplified_genes[[1]]))+length(intersect(literature_gene_list, lusc_amplified_genes[[1]])))/1023
#0.8132942
#832 genes found 191 not found
setdiff(paste("",literature_gene_list), lusc_amplified_genes[[1]])
fisher.test(rbind(c(832,191),c(3273,20480)),alternative="greater")
#p-value < 2.2e-16

######################################################
### compare the genes we found in BREAST with literature https://www.nature.com/articles/nature11412 2012 Koboldt Comprehensive molecular portraits of human breast tumours
literature_regions_brca = read.table(file=paste("./cancer_data/literature_regions_breast.txt",sep=""),header=F,sep="\t")
literature_regions_brca
amplified_regions = read.table(file=paste("./cancer_data/amplified_genes/amplified_regions_table.xls",sep=""),header=TRUE,sep="\t")
brca_amplified_regions = subset(amplified_regions,as.character(amplified_regions$name)=="data_CNA_brca_Breast_Invasive_Carcinoma.txt")
dim(brca_amplified_regions)
brca_amplified_genes = strsplit(paste(brca_amplified_regions$genes,collapse=","),",")
length(brca_amplified_genes[[1]])
#4780
literature_gene_list=unique(unlist(rep(literature_regions_brca),use.names = FALSE))
length(literature_gene_list)
#410-17-9=374
genes_not_found=setdiff(paste("",literature_gene_list), brca_amplified_genes[[1]])
length(which(substring(genes_not_found,1,4)==" LOC"))
#17
length(which(substring(genes_not_found,1,9)==" hsa-mir-"))
#9
(length(intersect(paste("",literature_gene_list), brca_amplified_genes[[1]]))+length(intersect(literature_gene_list, brca_amplified_genes[[1]])))/374
#0.818181818
#319 genes found 55 not found

setdiff(paste("",literature_gene_list), brca_amplified_genes[[1]])
fisher.test(rbind(c(832,191),c(3273,20480)),alternative="greater")
#p-value < 2.2e-16

##########################
############ ANIMAL STUDIES (Candidate Cancer Gene Database (CCGD)) 
## Since we are studying Amplifications
## Therefore, I will look for "Gain" in the "Effect" column.
setwd("C:/Users/f.russo/Documents/cancer_data/")

res=vector("list")
gene_table = read.table(file=paste("./amplified_genes/NEW_STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted.txt",sep=""),sep="\t",header=TRUE,quote="")
head(gene_table)
mapccgd = read.table(file="ccgd_export_2020-05-11.txt",sep="\t",header=TRUE)
dim(mapccgd)
head(mapccgd)

new_table = NULL
for(j in 1:dim(gene_table)[2]){
  #first read the cancer type
  #j=10
  cancer_type2 = colnames(gene_table)[j]
  cancer_type = NULL
  if(cancer_type2 =="acc"){cancer_type="none"}
  if(cancer_type2 =="blca"){cancer_type="Bladder Cancer"}
  if(cancer_type2 =="brca"){cancer_type="Breast Cancer"}
  if(cancer_type2 =="cesc"){cancer_type="Cervical Cancer"}
  if(cancer_type2 =="chol"){cancer_type=""}
  if(cancer_type2 =="coad"){cancer_type="Colorectal Cancer"}
  if(cancer_type2 =="dlbc"){cancer_type="Blood Cancer"}
  if(cancer_type2 =="esca"){cancer_type="Esophageal Cancer"}
  if(cancer_type2 =="gbm"){cancer_type="Nervous System Cancer"}
  if(cancer_type2 =="hnsc"){cancer_type="Head and Neck Cancer"}
  if(cancer_type2 =="kich"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="kirc"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="kirp"){cancer_type="Kidney Cancer"}
  if(cancer_type2 =="lalm"){cancer_type="Blood Cancer"}
  if(cancer_type2 =="lgg"){cancer_type="Nervous System Cancer"}
  if(cancer_type2 =="lihc"){cancer_type="Liver Cancer"}
  if(cancer_type2 =="luad"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="lusc"){cancer_type="Lung Cancer"}
  if(cancer_type2 =="meso"){cancer_type=""}
  if(cancer_type2 =="ov"){cancer_type="Ovarian Cancer"}
  if(cancer_type2 =="paad"){cancer_type="Pancreatic Cancer"}
  if(cancer_type2 =="pcpg"){cancer_type=""}
  if(cancer_type2 =="prad"){cancer_type="Prostate Cancer"}
  if(cancer_type2 =="sarc"){cancer_type="Sarcoma"}
  if(cancer_type2 =="skcm"){cancer_type="Skin Cancer"}
  if(cancer_type2 =="stad"){cancer_type="Gastric Cancer"}
  if(cancer_type2 =="tctg"){cancer_type=""}
  if(cancer_type2 =="thca"){cancer_type="Thyroid Cancer"}
  if(cancer_type2 =="thym"){cancer_type=""}
  if(cancer_type2 =="ucec"){cancer_type="Endometrial/Uterine Cancer"}
  if(cancer_type2 =="ucs"){cancer_type="Endometrial/Uterine Cancer"}
  if(cancer_type2 =="uvm"){cancer_type="Eye Cancer"}
  genes = gene_table[,j]
  genes = unique(genes)
  if (is.na(as.character(genes[length(genes)]))){genes = genes[1:length(genes)-1]}
  temp = cancer_type2
  sub_mapccgd = subset(mapccgd,as.character(mapccgd$Cancer)==cancer_type)
  for(i in 1:length(genes)){
    sub_table = subset(sub_mapccgd,as.character(sub_mapccgd$HumanName)==as.character(genes[i]))
    if ((dim(sub_table)[1]>0) && (as.character(sub_table$Effect)=="Gain")){ # Equal to Gain
      print("HI")
      temp = c(temp,as.character(genes[i]))
    }
  }
  if(length(temp)>1){new_table = qpcR:::cbind.na(new_table,temp)}
}  
new_table = new_table[,-1]
new_table
write.table(file=paste("./amplified_genes/ANIMAL_STUDIES/animal_studies_table.txt",sep=""),new_table,row.names=FALSE,col.names=FALSE,quote=FALSE,sep="\t")


#########################################
##### MUTATION AND AMPLIFICATION ARE MUTUALLY EXCLUSIVE
setwd("C:/Users/f.russo/Documents/cancer_data/")
#adesso prendo tutti i geni dello step 2 cosi' gia' so che sono stati selezionati come significativi. 
#poi li cerco nel file mut per vedere in quali pazienti sono mutati. Seleziono il gruppo di pazienti. 
#poi cerco il gene nel file CNA per vedere in quali pazienti e' amplificato. poi interseco
#i due gruppi di pazienti cosi' trovati per vedere se ci sono dei pazienti in comune. Per quei
#geni per cui l'intersezione e' nulla li scrivo in un file.

step2genes = read.table(paste("./amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),header=TRUE,sep="\t")
step2genes[1,]
total_tab = NULL
library(qpcR)
for (i in 1:dim(step2genes)[2]){
  cancername = colnames(step2genes)[i] #seleziona il cancro
  print(cancername)
  cna = read.table(paste("./cbioportaldataset/",cancername,"/tcga/data_CNA_",cancername,".txt",sep=""),header=TRUE,sep="\t") #carica il file delle amplificazioni per quel cancro
  mut = read.table(paste("./data_mutation/",cancername,"_data_mutations_extended.txt",sep=""),header=TRUE,sep="\t") #carica il file delle mutazioni
  currentgenelist = unique(as.character(step2genes[,i])) #carica la lista univoca dei geni per quel cancro
  k=1 #per ogni cancro inizializza il cotatore dei geni trovati
  list_of_mutually_esclusive_genes = NULL #inizializza lista dei geni
  for (j in 1:length(currentgenelist)){
    submut = subset(mut,as.character(mut$Hugo_Symbol)==(currentgenelist[j])) #cerca il gene corrente nel file mut
    if(dim(submut)[1]>0){
      ### VEDERE IL TIPO DI MUTAZIONE
      submut_missense = subset(submut,submut$Variant_Classification == "Missense_Mutation")
      if(dim(submut_missense)[1]>0){
        mutatedpatients = as.character(submut_missense$Tumor_Sample_Barcode)# prendi i pazienti mutati per quel gene
        mutatedpatients = strsplit(mutatedpatients ,"-")
        patientnames=NULL
        # scrivi i nomi col punto . invece che col -
        for (p in 1:length(mutatedpatients)){
          patientnames[p] = paste("TCGA",mutatedpatients[[p]][2],mutatedpatients[[p]][3],"01",sep=".")
        }
        mutatedpatients = patientnames
        if(length(mutatedpatients)>0){ #se non e' vuoto cerca in CNA per quel gene se ci sono dei pazienti amplificati
          subcna = subset(cna,as.character(cna$Hugo_Symbol)==(currentgenelist[j])) 
          if(dim(subcna)[1]>0){ #penso sia un coltrollo superfluo
            amplifpatients = colnames(subcna[which(subcna==2)]) #questi pazienti hanno il . invece del -
            if(length(amplifpatients)>0){  #vedo se hanno pazienti in comune #controllo superfluo
              patientinamplifiedandmutated = intersect(amplifpatients,mutatedpatients)
              if(length(patientinamplifiedandmutated)==0){ 
                # se il gene e' amplificato ma non mutato (intersezione nulla)
                #i.e.: mutation and amplification are mutually exclusive
                list_of_mutually_esclusive_genes[k] = (currentgenelist[j])
                k = k+1
              }
            }
          }
        }
      }
    }
  }
  list_of_mutually_esclusive_genes = c(cancername,list_of_mutually_esclusive_genes)
  total_tab =  qpcR:::cbind.na(total_tab,list_of_mutually_esclusive_genes) #quando hai finito per un cancro, costruisci qui la tabella finale
}
head(total_tab)
total_tab = total_tab[,-1]
table = total_tab 
###REMOVE NAs
for(j in 1:dim(table)[2] ){
  for(i in 1:dim(table)[1] ){
    if(is.na(table[i,j])){
      table[i,j] = ""
    }
    if(is.na(as.character(table[i,j]))){
      table[i,j] = ""
    }
  }
}
table
write.table(table,paste("./amplified_genes/mutually_exclusive/amplification_mutation_mutually_exclusive.txt",sep=""),col.names = FALSE,row.names = FALSE,quote=FALSE,sep="\t")

##### summary analysis

step1_homo_del = read.table("STEP_1_compacted_Chromosome_threshold_table.xls",header=TRUE,sep="\t")
head(step1_homo_del)
arrayoflength = NULL
totalgenelist = NULL
for(j in 1:dim(step1_homo_del)[2]){
  arrayoflength[j] = length(unique(as.character(step1_homo_del[,j])))-1
  genes = (unique(as.character(step1_homo_del[,j])))
  totalgenelist = c(totalgenelist, genes)
}
totalgenelist = unique(totalgenelist)
length(totalgenelist)
arrayoflength
min(arrayoflength)
max(arrayoflength)
# i duplicati nel caso blca
genes=as.character(step1_homo_del[,2])
unique(genes[duplicated(genes)])
# 444 2059 2491 1730  376 1295  667 1182  913 2029  322 1027  571  453 2242 1290 2132 1348  301 2310  375  391 3194 1423 1440 2918  414  198  290 1085  427  488
write.table(arrayoflength,"arrayoflenngth.xls",col.names = FALSE,row.names = FALSE)
write.table(totalgenelist,"totalgenelist.txt",col.names = FALSE,row.names = FALSE,quote=FALSE)
#############

### STEP_3 corrected tables
setwd("C:/Users/f.russo/Documents/")
STEP_2_genes_to_eliminate = read.table(file=paste("./cancer_data/amplified_genes/NEW_STEP_2_genes_to_eliminate_table.txt",sep=""),header=TRUE,sep="\t")
table_late =  read.table(file=paste("./cancer_data/amplified_genes/NEW_STEP_3_amplified_survival_late_stage_onlygenes.txt",sep=""),header=TRUE,sep="\t")
table_early = read.table(file=paste("./cancer_data/amplified_genes/NEW_STEP_3_amplified_survival_early_stage_onlygenes.txt",sep=""),header=TRUE,sep="\t")
table_notreported = read.table(file=paste("./cancer_data/amplified_genes/NEW_STEP_3_amplified_survival_notreported_onlygenes.txt",sep=""),header=TRUE,sep="\t")
newtable = NULL
table = table_notreported
for (i in 1:dim(STEP_2_genes_to_eliminate)[2]){
  ind = which(colnames(table)==colnames(STEP_2_genes_to_eliminate)[i])  #cerca lo stesso cancro in step_3
  if(length(ind)>0){
     temp = setdiff( unique(as.character(table[,ind])), unique(as.character(STEP_2_genes_to_eliminate[,i])) ) #sottrai i geni corretti per BH
     temp = c(colnames(STEP_2_genes_to_eliminate)[i],temp)
     newtable = qpcR:::cbind.na(newtable,temp)
  }
}
newtable 
newtable=newtable[,-1]
write.table(newtable,"./cancer_data/amplified_genes/NEW_STEP_3_amplified_survival_notreported_onlygenes2.txt",col.names = FALSE,row.names = FALSE,quote=FALSE,sep="\t")

###################################
##create FINAL table
setwd("C:/Users/f.russo/Documents/")
table = read.table(file=paste("./cancer_data/amplified_genes/collapsed_segments_1_9_2020.txt",sep=""),header=TRUE,sep="\t")
table_late =  read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_late_stage_onlygenes3.txt",sep=""),header=TRUE,sep="\t")
table_early = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_early_stage_onlygenes3.txt",sep=""),header=TRUE,sep="\t")
table_notreported = read.table(file=paste("./cancer_data/amplified_genes/STEP_3_amplified_survival_notreported_onlygenes3.txt",sep=""),header=TRUE,sep="\t")
STEP_2_genes = read.table(file=paste("./cancer_data/amplified_genes/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),header=TRUE,sep="\t")
alone_table = read.table(file=paste("./cancer_data/amplified_genes/alone_in_fitted_frequency_amplified_regions_and_oncogene_tables/genes_aloneintheamplicon3.txt",sep=""),header=TRUE,sep="\t")
ampl_mut_mutually_exclusive = read.table(file=paste("./cancer_data/amplified_genes/mutually_exclusive/amplification_mutation_mutually_exclusive.txt",sep=""),header=TRUE,sep="\t")
omim_results = read.table(file=paste("./cancer_data/amplified_genes/OMIM_results/omim_results.txt",sep=""),header=TRUE,sep="\t")
m_or_amplif_in_same_path  = read.table(file=paste("./cancer_data/amplified_genes/Reactome_PATHWAY_analysis/morethanonemember_amplified_mutated_in_pathways.txt", sep=""),header=TRUE,sep="\t")
interaction_with_cancer_census_genes  = read.table(file="./cancer_data/amplified_genes/STRING_interactors/interactors_table_new.txt",header=TRUE,sep="\t")
#animal_studies = read.table(file="./cancer_data/amplified_genes/ANIMAL_STUDIES/animal_studies_table.txt",header=TRUE,sep="\t")
census = read.table(file="./cancer_data/Census.tsv",sep="\t",header=TRUE,quote="")
census_list = as.character(census$Gene.Symbol)
x = read.table(file="./cancer_data/known_oncogenes_and_TSGs2.txt",sep="\t",header=TRUE)
x = c(as.character(x[,5]),census_list)
oe = read.table(file="./cancer_data/OEPROMOTEGROWTH.txt",sep="\t",header=TRUE,quote="")
achilles = read.table(file="./cancer_data/amplified_genes/achilles_ceres_down_regulation_reduces_growth/amplified_ceres_pvalue_tab2.txt",sep="\t",header=TRUE)
glyco_genes <- read.table(file="./cancer_data/glycogenes.txt",sep="\t",header=TRUE)
glycogenes = as.character(glyco_genes[,1])
ampl_table <- read.table(file="./cancer_data/amplification_linear_values_table.txt",sep="\t",header=TRUE)

dim(table)
table[12,]
final_tab = NULL
#
for(j in 1:dim(table)[1]){ #scorri tutte le righe di collapsed_segments_7_7_2020.txt
  
  genes_in_amplicon = strsplit(as.character(table[j,]$genes),", ")[[1]]
  n_genes_in_amplicon = length(genes_in_amplicon)
  #select the segment cancer
  cancer_name = as.character(table[j,]$cancer)
  
  ampl_table_cancer = ampl_table[,c(which(colnames(ampl_table) == cancer_name),which(colnames(ampl_table) == cancer_name)+1)]
  genes_in_intersection = intersect(genes_in_amplicon, as.character(ampl_table_cancer[,1]))
  median_of_linear_amplifications_in_the_amplicon = median(ampl_table_cancer[which(as.character(ampl_table_cancer[,1]) %in% genes_in_intersection),2],na.rm = T)
  
  step_2_genes_cancer = as.character(unique(STEP_2_genes[,which(colnames(STEP_2_genes) == cancer_name)]))
  genes_wtest = intersect(genes_in_amplicon,step_2_genes_cancer) #interseca con la lista totale dei geni
  n_genes_wtest = length(genes_wtest)
  
  #survival
  table_early_cancer = as.character(unique(table_early[,which(colnames(table_early) == cancer_name)]))
  genes_early_stage = intersect(genes_in_amplicon, table_early_cancer) #interseca con la lista totale dei geni
  n_early_stage = length(genes_early_stage)
  
  table_late_cancer = as.character(unique(table_late[,which(colnames(table_late) == cancer_name)]))
  genes_late_stage = intersect(genes_in_amplicon, table_late_cancer) #interseca con la lista totale dei geni
  n_late_stage = length(genes_late_stage)
  
  table_notreported_cancer = as.character(unique(table_notreported[,which(colnames(table_notreported) == cancer_name)]))
  genes_notreported = intersect(genes_in_amplicon, table_notreported_cancer) #interseca con la lista totale dei geni
  n_notreported = length(genes_notreported)
  
  #alone_in_amplicon
  table_alone_cancer = as.character(unique(alone_table[,which(colnames(alone_table) == cancer_name)]))
  genes_alone = intersect(genes_in_amplicon, table_alone_cancer) #interseca con la lista totale dei geni
  n_alone = length(genes_alone)
  
  #amplification muitation are mutually exclusive
  ampl_mut_mutually_exclusive_cancer  = as.character(unique(ampl_mut_mutually_exclusive [,which(colnames(ampl_mut_mutually_exclusive ) == cancer_name)]))
  ampl_mut_mutually_exclusive_genes  = intersect(genes_in_amplicon, ampl_mut_mutually_exclusive_cancer) #interseca con la lista totale dei geni
  n_ampl_mut_mutually_exclusive_genes = length(ampl_mut_mutually_exclusive_genes)
  
  #omim
  table_omim_cancer = as.character(unique(omim_results[,which(colnames(omim_results) == cancer_name)]))
  genes_omim = intersect(genes_in_amplicon, table_omim_cancer) #interseca con la lista totale dei geni
  n_omim = length(genes_omim)
  
  #m_or_amplif_in_same_path
  table_m_or_amplif_in_same_path_cancer = as.character(unique(m_or_amplif_in_same_path[,which(colnames(m_or_amplif_in_same_path) == cancer_name)]))
  genes_m_or_amplif_in_same_path = intersect(genes_in_amplicon, table_m_or_amplif_in_same_path_cancer) #interseca con la lista totale dei geni
  n_m_or_amplif_in_same_path = length(genes_m_or_amplif_in_same_path )
  
  #census #inserire anche i geni di census che interagiscono. riscrivere il software che produce early_stage_interactors_table.txt FATTO!
  interaction_with_cancer_census_genes_new = interaction_with_cancer_census_genes[,seq(1,dim(interaction_with_cancer_census_genes)[2],2)]
  interaction_with_cancer_census_genes_cancer = as.character(unique(interaction_with_cancer_census_genes_new[,which(colnames(interaction_with_cancer_census_genes_new) == cancer_name)]))
  genes_interaction_with_cancer_census_genes = intersect(genes_in_amplicon, interaction_with_cancer_census_genes_cancer) #interseca con la lista totale dei geni
  n_genes_that_interact_with_cancer_census_genes = length(genes_interaction_with_cancer_census_genes)
  
  cosmic_census_interactors_table_cancer = interaction_with_cancer_census_genes[,c(which(colnames(interaction_with_cancer_census_genes) == cancer_name),which(colnames(interaction_with_cancer_census_genes) == cancer_name)+1)]
  cosmic_census_interactors_list = vector("character",n_genes_that_interact_with_cancer_census_genes)
  if(dim(cosmic_census_interactors_table_cancer)[2] > 0){
    for (k in 1: n_genes_that_interact_with_cancer_census_genes ){  
      cosmic_census_interactors_list[k]= as.character(cosmic_census_interactors_table_cancer[which(
        as.character(cosmic_census_interactors_table_cancer[,1])==genes_interaction_with_cancer_census_genes[k]),2])
    }
  }
  cosmic_census_interactors_list = unique(cosmic_census_interactors_list)
  cosmic_census_interactors_list 
  
  #animal_studies
  #animal_studies_cancer = as.character(unique(animal_studies[,which(colnames(animal_studies) == cancer_name)]))
  #animal_studies_genes = intersect(genes_in_amplicon, animal_studies_cancer) #interseca con la lista totale dei geni
  #n_animal_studies = length(animal_studies_genes)
  
  #known_oncogenes_in_the_amplicon
  known_oncogenes_in_the_amplicon = intersect(genes_in_amplicon,x)
  glycogenes_in_the_amplicon = intersect(genes_in_amplicon,glycogenes)  
  #print(glycogenes_in_the_amplicon)
  
  #Achilles CERES
  achilles_new = achilles[,seq(1,dim(achilles)[2],2)]
  achilles_cancer = as.character(unique(achilles_new[,which(colnames(achilles_new) == cancer_name)]))
  genes_achilles = intersect(genes_in_amplicon, achilles_cancer) #interseca con la lista totale dei geni
  n_achilles = length(genes_achilles)
  
  #OE
  oe_genes = intersect(genes_in_amplicon, oe$genes )
  n_oe_genes = length(oe_genes)
  
  genes_wtest = paste(genes_wtest, collapse=", ")
  genes_early_stage = paste(genes_early_stage, collapse=", ")
  genes_late_stage = paste(genes_late_stage, collapse=", ")
  genes_notreported = paste(genes_notreported, collapse=", ")
  genes_alone = paste(genes_alone, collapse=", ")
  ampl_mut_mutually_exclusive_genes = paste(ampl_mut_mutually_exclusive_genes, collapse=", ")
  genes_omim = paste(genes_omim, collapse=", ")
  genes_m_or_amplif_in_same_path = paste(genes_m_or_amplif_in_same_path, collapse=", ")
  genes_that_interact_with_cancer_census_genes = paste(genes_interaction_with_cancer_census_genes, collapse=", ")
  cosmic_census_interactors_list = paste(cosmic_census_interactors_list,collapse=", ")
  #animal_studies_genes = paste(animal_studies_genes,collapse=", ")
  known_oncogenes_in_the_amplicon = paste(known_oncogenes_in_the_amplicon, collapse=", ")
  glycogenes_in_the_amplicon = paste(glycogenes_in_the_amplicon, collapse=", ")
  genes_achilles = paste(genes_achilles, collapse=", ")
  oe_genes = paste(oe_genes, collapse=", ")
  percentage_mean_over_segments = round(mean(as.numeric((strsplit(table[j,]$percentage_mean,", "))[[1]]), na.rm=TRUE),2)
  
  new_table = qpcR:::cbind.na(table[j,],percentage_mean_over_segments,n_genes_in_amplicon,
                              genes_wtest,n_genes_wtest,
                              genes_early_stage,n_early_stage,
                              genes_late_stage,n_late_stage,
                              genes_notreported,n_notreported,
                              genes_alone,n_alone,
                              ampl_mut_mutually_exclusive_genes,n_ampl_mut_mutually_exclusive_genes,
                              genes_omim,n_omim,
                              genes_m_or_amplif_in_same_path,n_m_or_amplif_in_same_path,
                              genes_that_interact_with_cancer_census_genes,n_genes_that_interact_with_cancer_census_genes,
                              cosmic_census_interactors_list,
                              #animal_studies_genes,n_animal_studies,
                              known_oncogenes_in_the_amplicon,
                              glycogenes_in_the_amplicon,
                              genes_achilles,n_achilles,
                              oe_genes,n_oe_genes)
  
  final_tab = qpcR:::rbind.na(final_tab, new_table)
  
}

dim(final_tab)
final_tab=final_tab[-1,]
final_tab=final_tab[,-9]
final_tab=final_tab[,-8]

write.table(final_tab,file=paste("./cancer_data/amplified_genes/final_table_29_9_2020.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

#######Histograms
seg_table = read.table(file="./cancer_data/amplified_genes/final_table_29_9_2020.txt",header=TRUE,sep="\t")
head(seg_table)
dim(seg_table)
colnames(seg_table)
hist(seg_table$segment_length, main=paste("Amplicon lengths in bp",sep=""),xlab=" ", 
     ylab="n. of amplicons", border="black", col="yellow", las=2, breaks=20)
dev.print(pdf,paste("./cancer_data/amplified_genes/amplicon_frequency.pdf",sep=""))
dev.off()
hist(seg_table$segment_length, main=paste("Amplicon lengths in bp",sep=""),xlab=" ", 
     ylab="n. of amplicons", border="black", col="yellow", las=2, breaks=20,ylim=c(0,100))
dev.print(pdf,paste("./cancer_data/amplified_genes/amplicon_frequency_zoom.pdf",sep=""))
dev.off()
hist(seg_table$n_genes_in_amplicon, main=paste("n_genes_in_amplicon",sep=""),xlab=" ", 
     ylab="n. of amplicons", border="black", col="yellow", las=1, breaks=400,xlim=c(0,20))
dev.print(pdf,paste("./cancer_data/amplified_genes/n_genes_in_amplicon_frequency.pdf",sep=""))
dev.off()
hist(seg_table$n_genes_in_amplicon, main=paste("n_genes_in_amplicon",sep=""),xlab=" ", 
     ylab="n. of amplicons", border="black", col="yellow", las=2, breaks=100)
dev.print(pdf,paste("./cancer_data/amplified_genes/n_genes_in_amplicon_frequency_zoom.pdf",sep=""))
dev.off()
hist(seg_table$n_genes_wtest, main=paste("n_genes_W_test",sep=""),xlab=" ", 
     ylab="n. of amplicons", border="black", col="yellow", las=1, breaks=400,xlim=c(0,20))
dev.print(pdf,paste("./cancer_data/amplified_genes/n_genes_W_test_in_amplicon_frequency.pdf",sep=""))
dev.off()
hist(seg_table$n_genes_wtest, main=paste("n_genes_W_test",sep=""),xlab=" ", 
     ylab="n. of amplicons", border="black", col="yellow", las=2, breaks=100)
dev.print(pdf,paste("./cancer_data/amplified_genes/n_genes_W_test_in_amplicon_frequency_zoom.pdf",sep=""))
dev.off()
hist(seg_table$n_genes_wtest, main=paste("n_genes_W_test",sep=""),xlab=" ", 
     ylab="n. of amplicons", border="black", col="yellow", las=1, breaks=400,xlim=c(0,20))
dev.print(pdf,paste("./cancer_data/amplified_genes/n_genes_W_test_in_amplicon_frequency.pdf",sep=""))
dev.off()
hist(seg_table$n_genes_wtest, main=paste("n_genes_W_test",sep=""),xlab=" ", 
     ylab="n. of amplicons", border="black", col="yellow", las=2, breaks=100)
dev.print(pdf,paste("./cancer_data/amplified_genes/n_genes_W_test_in_amplicon_frequency_zoom.pdf",sep=""))
dev.off()
min(seg_table$segment_length, na.rm=TRUE)
# 44
max(seg_table$segment_length, na.rm=TRUE)
#140816160
median(seg_table$segment_length, na.rm=TRUE)
#727202.5



#############################
### Points
#############################

txtfls <- list.files("./Data/cancer_studies",pattern="$",full.names=TRUE)
txtfls
a = read.table("C:/Users/lulic/Desktop/a.txt",header=TRUE,sep="\t")
final_tab = read.table(file="./amplification/final_table_29_9_2020.txt",sep="\t",header=TRUE)
dim(final_tab)
final_tab[1:11,1:5]
total_table=NULL
for(i in 1:32){
  #select the segment cancer
  name = strsplit(as.character(a[i,1]),"_")
  cancer_name = name[[1]][1]
  if(cancer_name=="coadread"){cancer_name="coad"}
  if(cancer_name=="lalm"){cancer_name="laml"}
  print(cancer_name)
  final_tab_cancer = final_tab[which(as.character(final_tab$cancer) == cancer_name),] 
  dim(final_tab_cancer)
  final_tab_cancer[1:5,1:5]
  for(j in 1: dim(final_tab_cancer)[1]){ #scorri ampliconi j=8
    chromosomal_locations = strsplit(as.character(final_tab_cancer$bands[j]),", ")[[1]]
    Chromosomal_location_of_the_amplicon_start = chromosomal_locations[1]
    Chromosomal_location_of_the_amplicon_end = chromosomal_locations[length(chromosomal_locations)]
    chromosome  = substr(as.character(final_tab_cancer$chromosome_name[j]),4,4+length(as.character(final_tab_cancer$chromosome_name[j])))
    Chromosomal_location_of_the_amplicon = paste(paste(chromosome,Chromosomal_location_of_the_amplicon_start,sep=""),
                                                 paste(chromosome,Chromosomal_location_of_the_amplicon_end,sep=""),sep=" - ")
    #print(Chromosomal_location_of_the_amplicon)
    
    #Percentage_median_of_patients_with_CNA = median(as.numeric(strsplit(as.character(final_tab_cancer$percentage_mean[j]),", ")[[1]]) )
    
    Median_amplitude_of_CNA = final_tab_cancer$median_of_linear_amplifications_in_the_amplicon[j]
    
    genes = final_tab_cancer$genes[j]
    gene_list = strsplit(as.character(genes),", ")
    
    Cancer_early_stage_clinically_relevant = strsplit(as.character(final_tab_cancer$genes_early_stage[j]),", ")[[1]]
    Cancer_late_stage_clinically_relevant  = strsplit(as.character(final_tab_cancer$genes_late_stage[j]),", ")[[1]]
    Cancer_notreported_clinically_relevant = strsplit(as.character(final_tab_cancer$genes_notreported[j]),", ")[[1]]
    for(k in 1:length(gene_list[[1]])){ #scorri i geni
      current_gene = gene_list[[1]][k]
      Cancer_stage_where_the_gene_is_clinically_relevant1=""
      Cancer_stage_where_the_gene_is_clinically_relevant2=""
      Cancer_stage_where_the_gene_is_clinically_relevant3=""
      Cancer_stage_where_the_gene_is_clinically_relevant=""
      if(is.element(current_gene, Cancer_early_stage_clinically_relevant)){Cancer_stage_where_the_gene_is_clinically_relevant1 = "early"}
      if(is.element(current_gene, Cancer_late_stage_clinically_relevant)) {Cancer_stage_where_the_gene_is_clinically_relevant2 = " late"}
      if(is.element(current_gene, Cancer_notreported_clinically_relevant)){Cancer_stage_where_the_gene_is_clinically_relevant3 = " notreported"}
      
      Cancer_stage_where_the_gene_is_clinically_relevant = paste( Cancer_stage_where_the_gene_is_clinically_relevant1, 
                                                                  Cancer_stage_where_the_gene_is_clinically_relevant2, Cancer_stage_where_the_gene_is_clinically_relevant3,sep="")
      
      Clinical_relevance = 0
      if( nchar(Cancer_stage_where_the_gene_is_clinically_relevant) > 2 ){Clinical_relevance = 1}
      
      Only_gene_in_the_amplicon = 0 
      Only_gene_in_the_amplicon_logic = (as.character(final_tab_cancer$genes_alone[j])==current_gene)
      if( Only_gene_in_the_amplicon_logic  ){ Only_gene_in_the_amplicon = 1}
      
      mutated_or_amplified_genes_in_same_pathway = 0
      mutated_or_amplified_genes_in_same_pathway_logic = as.character(final_tab_cancer$genes_m_or_amplif_in_same_path[j])==current_gene
        if(mutated_or_amplified_genes_in_same_pathway_logic ){
          mutated_or_amplified_genes_in_same_pathway = 1
      }
      
      KD_blocks_growth_logic = (as.character(final_tab_cancer$genes_achilles[j])==current_gene)
      KD_blocks_growth = 0
      if( KD_blocks_growth_logic ){ KD_blocks_growth = 1}
      
      ampl_mut_mutually_exclusive_logic = (as.character(final_tab_cancer$ampl_mut_mutually_exclusive_genes[j])==current_gene)
      ampl_mut_mutually_exclusive = 0
      if( ampl_mut_mutually_exclusive_logic ){ ampl_mut_mutually_exclusive = 1}
      
      oe_genes_logic = as.character(final_tab_cancer$oe_genes[j])==current_gene
      oe_genes = 0
      if( oe_genes_logic ){ oe_genes = 1}
      
      genes_omim_logic = as.character(final_tab_cancer$genes_omim[j])==current_gene
      genes_omim = 0
      if( genes_omim_logic ){ genes_omim = 1}
      
      #animal_studies_genes_logic = as.character(final_tab_cancer$animal_studies_genes[j])==current_gene
      #animal_studies_genes = 0
      #if(animal_studies_genes_logic ){animal_studies_genes = 1}
      
      genes_that_interact_with_cancer_census_genes_logic = as.character(final_tab_cancer$genes_that_interact_with_cancer_census_genes[j])==current_gene
      genes_that_interact_with_cancer_census_genes = 0
      if(genes_that_interact_with_cancer_census_genes_logic ){genes_that_interact_with_cancer_census_genes = 1}
      
      Total_points = Clinical_relevance + Only_gene_in_the_amplicon + mutated_or_amplified_genes_in_same_pathway + KD_blocks_growth + ampl_mut_mutually_exclusive + oe_genes +
        genes_omim + genes_that_interact_with_cancer_census_genes
      Class = "IV"
      if(Total_points > 0){Class = "III"}
      if(Total_points > 2){Class = "II"}
      Gene = current_gene
      gene_line = qpcR:::cbind.na(Gene,cancer_name,Chromosomal_location_of_the_amplicon,Cancer_stage_where_the_gene_is_clinically_relevant,
                                  Clinical_relevance,Only_gene_in_the_amplicon,mutated_or_amplified_genes_in_same_pathway,KD_blocks_growth,ampl_mut_mutually_exclusive,
                                  oe_genes, genes_omim,genes_that_interact_with_cancer_census_genes,Total_points,Class)
      if(k==1){amplicon_table = gene_line}else{amplicon_table = qpcR:::rbind.na(amplicon_table,gene_line)}
    }
    if(j==1){cancer_table = amplicon_table}else{cancer_table = qpcR:::rbind.na(cancer_table,amplicon_table)}
  }
  if(i==1){total_table = cancer_table}else{total_table = qpcR:::rbind.na(total_table,cancer_table)}
}

dim(total_table)
total_table[1:3,]
write.table(total_table,file=paste("./amplification/points_29_9_2020.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")



###Filter genes not present in STEP2
STEP_2_genes = read.table(file=paste("./amplification/STEP_2_compacted_chromosome_wilcoxtest_table_pvalue_adjusted_2.txt",sep=""),header=TRUE,sep="\t")
points = read.table(file=paste("./amplification/points_29_9_2020.txt",sep=""),header=T,sep="\t")
head(points)
filtered_points=NULL
for (i in 1:dim(points)[1]){
  if((i%%100)==0){print(i)}
   temp=points[i,]
   step2cancergenes = unique(as.character(STEP_2_genes[,colnames(STEP_2_genes)==as.character(temp$cancer_name)]))
   if(length(intersect(as.character(temp$Gene),step2cancergenes))>0){
      filtered_points = rbind(filtered_points,temp)
   }
}
dim(points)
dim(filtered_points)
filtered_points[1:20,1:3]
write.table(filtered_points,file=paste("./amplification/filtered_points_29_9_2020.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

###take all the glycogenes
total_table = read.table(file=paste("./amplification/filtered_points_29_9_2020.txt",sep=""),header=T,sep="\t")
head(total_table)
glycogenes <- read.table(file="./glycogenes.txt",sep="\t",header=TRUE)
total_table_glycogenes = total_table[(which(as.character(total_table[,1]) %in% as.character(glycogenes[,1]))),]
dim(total_table_glycogenes)
head(total_table_glycogenes)
length(unique(total_table_glycogenes[,1]))
#[1] 241
write.table(total_table_glycogenes,file=paste("./glycogenes_points_29_9_2020.txt",sep=""),quote=F,row.names=F,col.names=T,sep="\t")

for(k in 1:length(unique(total_table_glycogenes[,1]))){
  total_table_glycogenes[ which(as.character(total_table_glycogenes[,1]) %in%  unique(total_table_glycogenes[,1])[k]),]
  
}


hist(as.numeric(total_table_glycogenes[,11]), main=paste("Glycogene Point Frequencies",sep=""),xlab="points", ylab="glycogenes (with repetitions)", border="black", col="yellow", las=1, breaks=50)
dev.print(pdf,paste("./cancer_data/amplified_genes/total_table_glycogenes_point_frequencies.pdf",sep=""))
dev.off()

hist(as.numeric(total_table[,11]), main=paste("Gene Point Frequencies",sep=""),xlab="points", ylab="genes (with repetitions)", border="black", col="yellow", las=1, breaks=50)
dev.print(pdf,paste("./cancer_data/amplified_genes/total_table_point_frequencies.pdf",sep=""))
dev.off()


##################################
#####        THE END         #####
##################################
